[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "\u003d ConTAct"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W13-3/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W13-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W13-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a student management system for teaching assistants. It has a GUI but most of the user interactions happen using a Command Line Interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Teaching assistants who have trouble managing their student details, can use this to add, delete, find students. They can also use it to update attendance during each lesson and keep track of each students overall attendance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Also, this app also allows teaching assistants to keep track of their timetable and schedule classes and consultations easily, and even send out emails to all their students."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* This project was built upon the Address Book sample application by se-edu: https://github.com/se-edu/addressbook-level4[se-edu/addressbook-level4]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 1,
      "andrewtanJS": 2,
      "-": 30
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \"githubId\" : \"andrewtanJS\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \"displayName\" : \"Andrew Tan\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \"authorNames\" : [\"andrewtanJS\", \"andre\", \"U-ANDREWT\\\\andre\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \"githubId\" : \"preethi-d\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \"displayName\" : \"preethid\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \"authorNames\" : [\"preethi-d\", \"preethid\", \"preethidevarajan\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \"githubId\": \"yogtew\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \"displayName\": \"Yogusvi Tewari\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\" : \"alyip98\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "      \"displayName\" : \"Alfred Yip\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\" : \"cyrusguo\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\" : \"Cyrus Guo\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 1,
      "andrewtanJS": 19,
      "alyip98": 1,
      "-": 6
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    //Joda-Time for calendar time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    implementation \u0027joda-time:joda-time:2.7\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    // gson for JSON parsing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.5\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    archiveName \u003d \u0027contact.jar\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u0027site-name\u0027: \u0027ConTAct\u0027,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W13-3/main\u0027,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 7,
      "andrewtanJS": 3,
      "-": 239
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "alyip98": 1,
      "-": 422
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ConTAct was developed by the https://CS2103-AY1819S1-W13-3 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Preethi Devarajan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "image::preethi-d.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/preethi-d[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team lead +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Andrew Tan"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "image::andrewtanjs.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/andrewtanJS[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibility: Git Expert"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Cyrus Guo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "image::cyrusguo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/cyrusguo[github]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Scheduling and tracking +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Security Expert"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Yip Seun Yuen"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "image::alyip98.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/alyip98[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Code quality"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Yogusvi Tewari +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "image::yogtew.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/yogtew[github]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "-": 51
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W13-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "* *Email us* : You can also reach us at `e0203237@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d ConTAct - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-3/main.git"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "By: `Team ConTAct`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a student) and/or raise events."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* stores the Calendar data."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cStudent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* can save the Calendar data in xml format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "// tag::email[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "\u003d\u003d\u003d Email feature"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation - Emailing a single student"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "The email feature is faciliated by Outlook Mail API, since most NUS teaching assistants have an Outlook account. This API is a RESTful API, made for server-client communication. Since the Outlook mail API is a RESTful API, this feature uses the \u0027POST\u0027 request (which requests that the web server accepts the data enclosed in the body of the request message) to send the email specified in the user-input to the student specified in the user-input."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "The email command itself takes a few parameters:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "* `Index`: Index number of student in list. Only positive numbers present in list are valid.(`i/`)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "* `Subject`: Subject of email to be sent, valid if not an empty string.(`s/`)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "* `Body`: Subject of email to be sent, valid if not an empty string.(`b/`)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "e.g `email i/2 s/Attendance poor. b/Your attendance seems to be poor. Is there a problem?`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "When the user inputs the email in the CLI, the app fetches the email address of the student `index` specified and the subject and body of the email specified. This is converted to JSON, and passed as the `body` of the \u0027POST\u0027 request to Outlook."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The `CommandResult` object that is returned by the email command lets the user know if the email address has been successfully send to the student whose index is specified."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ".Component interactions for email command"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "image::EmailCommand Sequence Diagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "In the \u0027POST\u0027 request, a access token is required in order to be able to communicate to the web server, which is `Outlook` in this case. To get this access token from Outlook, a authorization code must be used, which is also provided when applicatoin is registered and authorized under Outlook. Only with this access token, can the email that is created be sent to Outlook as a \u0027POST\u0027 request."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ".App interactions with Outlook for email command"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "image::UML REST API.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "\u003d\u003d\u003d\u003d Alternative implementations:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "Including UI features to make Outlook\u0027s mail drafting screen appear in the `Browser Panel`, and requiring the user to input the index of student to email, the subject, and the body as three seperate inputs instead of one."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "//tag::schedule[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Schedule feature"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The schedule command is a completely new feature that allows the user to schedule events within ConTAct."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "It follows a similar command flow as that of the address book, but it will have it\u0027s own separate model and"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ".xml file for storage. Furthermore, to facilitate this command, a new data type is introduced: the Event class."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "This Event class has it\u0027s own unique fields that the user can specify to schedule an event:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Event Name: The name of the event, valid if it is not an empty string."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Date: The date of the event, valid if expressed in this forms:  `DD-MM-YYYY`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "It must also be a date that actually falls within a calendar and between the years 1600 to 9999 (i.e. dates such as 25-13-2000 are invalid)."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Start Time: The start time of the event, valid in this form: `HH:MM`, in 24-hour format."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* End Time: The end time of the event, valid if it is in this form: `HH:MM`, in 24-hour format."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The end time must also come after the start time."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Description: The description of the event, valid if it is not an empty string."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Currently, the main operation is the `schedule` command, and it is implemented as such:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `schedule event/EVENT_NAME date/DATE start/START_TIME end/END_TIME descr/DESCRIPTION`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "This operation exists within the logic component of ConTAct, with the Event data structure falling"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "under the models component."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Below is an example of how the schedule command behaves:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "`schedule event/Office Christmas Party date/23-12-2018 start/18:00 end/20:00 descr/Party at Scranton Branch`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "This will simply create an event with the specified fields and store it similar to how the addressbook stores a student."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Furthermore, the schedule command ensures that all the fields specified must be valid for it to be a success."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Once scheduled, the list of events will be sorted by chronological order (taking the date and the start time)."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The GUI itself will have a calendar component which will display the user\u0027s current list of events that they have"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "scheduled, while adjusting for the current date."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The sequence diagram below shows how the components interact for the scenario where the user issues the command `schedule EVENT`, where `EVENT` is the event as specified by the input parameters."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ".Component interactions for `delete EVENT` command (part 1)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "image::ScheduleEventSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The diagram below shows how the EventsCenter reacts to the CalendarChangedEvent, which also results in updates to the storage and the UI."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ".Component interactions for `delete EVENT` command (part 2)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "image::EventStorageSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The diagram below shows how the schedule command is parsed in the Logic component. Here again, `EVENT` is the event as specified by the input parameters."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ".Logic diagram for `schedule EVENT` command"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "image::ScheduleEventSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storing the sorted list of events"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 1 (current choice):** Store the list of events as a list, while sorting after each addition of an event."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Consistent with the overall design of the model, and also not as significant an overhead due to the small size of the list."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Cons: Is slower than other possible methods of implementation."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 2:** Store the list of events in a binary search tree."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: More efficient addition and removal of events."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Cons: Is unfeasible with the current design."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Displaying the events in the GUI"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 1 (current choice):** Display it as a sorted list of events."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Can be thought of as a to-do list, much more detailed representation."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Cons: Not as intuitive and easily understood."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 2 (current choice):** Display it within a calendar."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Much easier to glance through and understand."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Cons: Significantly harder to implement, and current java libraries are not feasible to utilize."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How to display events"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 1 (current choice):** Simply display all events, and scroll to nearest upcoming event."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Allows the user to see the entire list of events, past and future."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Cons: Will definitely get cluttered over time."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 2:** Display upcoming events, and keep past events in a \"history\" tab."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Is a compromise between the alternative 1 and 3."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Cons: May make the GUI itself cluttered."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 2:** Delete events once they are in the past."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Keeps things neat and in a to-do fashion."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Cons: Takes control away from the user to handle their own events."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How schedule handles the event model and storage"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 1 (current choice):** Stores the list of events within the same model as the addressbook, but keep"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "storage separate."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Will be consistent with the implementation of the addressbook, while also ensuring that the storage component"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "is distinct."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **Alternative 2:** Store the list of events as its own separate model and separate storage."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Will not interfere greatly with the implementation of the addressbook itself"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Cons: Will be detached from the original architecture"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::attendance[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Attendance feature"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "The attendance command is a completely new feature that allows the user to mark the attendance of students"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "within ConTAct. It follows a similar command flow as that of the address book, and the command will uses the model and"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "storage of the other commands. To facilitate this command, a new data type is introduced: the Attendance class."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "The Attendance class has it\u0027s own unique fields that the user can specify to mark the attendance. The Attendance class"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "uses another class called the AttendanceEnum class. This AttendanceEnum class is used to declare the Attendance Enums:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "PRESENT, ABSENT and UNDEFINED which are then used in the Attendance class. The attendance class has an overloaded"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "constructor which takes in different parameters."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "Field of first constructor:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* Attendance: takes in an AttendanceEnum, can be PRESENT, ABSENT or UNDEFINED"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Field of second constructor:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* Attendance: takes in a String attendance, where absent/0 is changed to ABSENT enum, present/1 to PRESENT enum and an empty string is changed to UNDEFINED enum"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Currently, the main operation is the `attendance` command, and it is implemented as such:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* `attendance index/INDEX PREFIX_ATTENDANCE/attendance`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Currently, this operation exists within the logic component of ConTAct."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Below is an example of how the attendance command behaves:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "`attendance 1 at/present`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "This will simply specify the attendance field of the Student with the specified attendance and store it similar to how the addressbook stores a student."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Furthermore, the attendance command ensures that all the fields specified must be valid for it to be a success."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows how the components interact for the scenario where the user issues the attendance command."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `attendance` command"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "image::attendance_diagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th student in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new student. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Step 4. The user now decides that adding the student was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the student being deleted)."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "alyip98"
        },
        "content": "// tag::markfeature[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d Mark feature"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Marks allow tutors to manage groups of students easily without typing a command multiple times for each student in the class."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "alyip98"
        },
        "content": "It is designed to work well with the existing `Tag` system, and designed with commands such as `attendance` and `email` in mind."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "alyip98"
        },
        "content": "It is session based, meaning that groups are not stored in the data files after the app has closed, and is not intended as a replacement for `Tag`."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "`Mark` is a container class which stores a `Set\u003cStudent\u003e` and exposes getter and setter methods, as well as methods for union and intersection of `Marks`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Marks are maintained by `ModelManager`, which is responsible for updating, storing and providing the correct `Mark` for commands."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Commands relating to the creation and manipulations of Marks are parsed by `MarkCommandParser`, which then returns the appropriate `MarkSubCommand` to be executed."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "alyip98"
        },
        "content": "It is designed in this way to be easily extensible in the future as more sub-commands are added."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "alyip98"
        },
        "content": "The commands adhere to the following pattern:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "alyip98"
        },
        "content": " mark [m/m1] \u003csubcommand\u003e [m/m2] [m/m3]`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "alyip98"
        },
        "content": "The arguments `m/m1`, `m/m2`, `m/m3` may be optional in some cases and default to `Mark.DEFAULT_NAME`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Sub-commands"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `find [name|tag]` -- marks Students matched by find command"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* `join m/m2 [m/m3]` -- returns union of m2 and m3"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* `and m/m2 [m/m3]` -- returns intersection of m2 and m3"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `show` -- shows marked Students in GUI"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Planned Sub-commands (1.4)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `tag [tagName]` -- tags marked Students with tagName"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `attd [0|1]` -- marks attendance of marked Students"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `email [emailText]` -- sends email to marked Students"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Use Cases:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Suppose a tutor wants to mark the attendance of all students from tutorial groups W13 and W14."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Instead of:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "alyip98"
        },
        "content": " find t/W13"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "alyip98"
        },
        "content": " attendance 1 at/Present"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "alyip98"
        },
        "content": " attendance 2 at/Present"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "alyip98"
        },
        "content": " attendance 3 at/Present"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "alyip98"
        },
        "content": " ..."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "alyip98"
        },
        "content": " find t/W14"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "alyip98"
        },
        "content": " attendance 1 at/Present"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "alyip98"
        },
        "content": " attendance 2 at/Present"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "alyip98"
        },
        "content": " attendance 3 at/Present"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "alyip98"
        },
        "content": " ..."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "alyip98"
        },
        "content": "The tutor can type in:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "alyip98"
        },
        "content": " mark m/a find t/W13` // adds students tagged with \"W13\" to mark m/a"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "alyip98"
        },
        "content": " mark m/b find t/W14` // adds students tagged with \"W14\" to mark m/b"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "alyip98"
        },
        "content": " mark m/res join m/a m/b` // merges students in m/a and m/b to mark m/res"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "alyip98"
        },
        "content": " attendance m/res at/Present` // updates the marked students\u0027 attendance"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Suppose the tutor then wants to send an email to the aforementioned group of students."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "alyip98"
        },
        "content": "They can do that with a simple command:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "alyip98"
        },
        "content": " email m/res b/[emailText]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "alyip98"
        },
        "content": "// end::markfeature[]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Teaching assistants"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* has a need to manage a significant number of students across multiple classes"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*Value proposition*: manage students and student details more effectively by providing a centralized platform"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "|`* * *` |tutor |add a new student |"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "|`* * *` |tutor |add students in bulk |easily keep track of my classes"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "|`* * *` |tutor |delete a student |remove entries that I no longer need"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "|`* * *` |tutor |find a student by name |locate details of students without having to go through the entire list"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "|`* * *` |tutor |mark attendace |keep track of who\u0027s been attending"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "|`* * *` |tutor |schedule events |keep track of class timings and consultations"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "|`* *` |tutor |sort students |identify groups of students"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "|`* *` |tutor |email students |let them know of any announcements"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "(For all use cases below, the *System* is the `ConTAct` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Use case: Add students"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "1. User requests to add a student with specified details"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "2. ConTAct adds the student into the system"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 1a. The formatting is invalid."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 1a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Use case: Search for students"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "1. User requests to a list of students matching an input string"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "2. ConTAct shows a list of students"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "** 2a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "+"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Use case: Add students"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "1. User requests to add a student with specified details"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "2. ConTAct adds the student into the system"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 1a. The formatting is invalid."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 1a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Use case: Sort students"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "1. User requests to sort the students according to a parameter"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "2. ConTAct displays the list of students in sorted order"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 1a. The parameter is invalid."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 1a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "** 2a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Use case: Mark attendance"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "1. User requests to mark the attendance of a specified group"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "2. ConTAct displays the list of students in that group"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "3. The user inputs the attendance of the group"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "4. ConTAct displays the resulting list"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 1a. The group is invalid."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 1a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "** 2a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 3a. The user types in an incorrect input."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 3a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Use case: Delete students"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "2.  ConTAct shows a list of students"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "3.  User requests to delete a specific student in the list"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "4.  ConTAct deletes the student"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "** 2a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 3a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Use case: Schedule events"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "1. User schedules an event with the specified details"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "2. ConTAct confirms the scheduling of said event"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 1a. The parameter(s) is invalid."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 1a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Use case: Email students"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "1. User requests to email all students in a given group"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "2. ConTAct fetches the emails of the students"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "3. User types in the email header and body"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "4. ConTAct sends out the email"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 1a. The group(s) is invalid."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 1a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 2a. The list of student emails is empty"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 2a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* 4a. ConTAct cannot send out the email."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "** 4a1. ConTAct shows an error message."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "+"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ".  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Deleting a student"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ". Deleting a student while all students are listed"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ".. Prerequisites: List all students using the `list` command. Multiple students in the list."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "   Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 46,
      "andrewtanJS": 255,
      "alyip98": 57,
      "-": 725
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "\u003d ConTAct - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-3/main.git"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "By: `Team ConTAct`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "ConTAct is an application for teaching assistants who *prefer to use a desktop app for managing students*. More importantly, ConTAct is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ConTAct can get your student management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ".  Download the latest `conTAct.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your ConTAct."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* **`add`**`n/John Doe sn/A98765432 e/johnd@example.com f/School of Computing` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME sn/STUDENT_NUMBER`, `sn/STUDENT_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Adding a student: `add`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Adds a student to the address book +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Format: `add n/NAME sn/STUDENT_NUMBER e/EMAIL f/FACULTY [t/TAG]...`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "A student can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `add n/Damith Rajapakse sn/A98765432 e/johnd@example.com f/School of Computing`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `add n/Bob Ross t/student e/betsycrowe@example.com f/Faculty of Science sn/U1234567 t/physics`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Listing all students : `list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Shows a list of all students in the address book. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Editing a student : `edit`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Edits an existing student in the address book. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Format: `edit INDEX [n/NAME] [sn/STUDENT_NUMBER] [e/EMAIL] [f/FACULTY] [t/TAG]...`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Edits the student at the specified `INDEX`. The index refers to the index number shown in the displayed student list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* You can remove all the student\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `edit 1 sn/A91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Edits the student number and email address of the 1st student to be `A91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Sorting students: `sort`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Sorts students according to a given parameter. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Format: `sort PARAMETER`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* The sorting itself is only performed on the already exisiting fields."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*`sort NAME` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "Returns a list of students sorted by their name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "*`sort GRADES` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "Returns a list of students sorted by their grades, which is a field of each student."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Marking attendance: `attendance`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Allows the user to mark the attendance of students using the index number. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `attendance INDEX_NUMBER at/ATTENDANCE`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* The attendance marking as present is done individually, by using the index number of the student, and the user can individually mark students who are absent as \u0027absent\u0027/\u00270\u0027 and who are present as \u0027present\u0027/\u00271\u0027."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* `attendance 1 at/present` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Marks the attendance of the student with index number 1 as present."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `attendance 3 at/0` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Marks the attendance of the student with index number 3 as absent."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Schedule timetables: `schedule`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Schedules an event for the user to keep track of. +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Format: `schedule event/EVENT_NAME date/DATE start/TIME_START end/TIME_END descr/DESCRIPTION`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "****"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* The event will be scheduled and reflected on the user\u0027s list of events"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Invalid dates and times will not be scheduled e.g. `32-12-2018` will not schedule any event. Also, the year range is between 1600 and 9999"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `schedule event/CS2103-Tutorial-W13 date/22-3-2018 start/16:00 end/18:00 descr/Product demo` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Schedules an event named `CS2103-Tutorial-W13` on 22-3-2018 from 4:00pm to 6:00pm"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "\u003d\u003d\u003d Emailing students: `email`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "Allows the user to email a specified student. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "Format: `email i/INDEX s/SUBJECT b/BODY`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "* The subject of the email is specified after the s/ and the body after the b/."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "* The user can specify only one student index, after the \u0027i/\u0027."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "* `email i/2 s/Attendance Problem b/Your attendance is poor. Is there a problem?` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Gathers the email address of the student with index 2 for emailing, and sets the subject and body respectively."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Locating students by name/tag: `find`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Finds students whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Students matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Finds students tagged with specified tag. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Format: `find t/TAG [MORE_TAGS]`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alyip98"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* Tags are case sensitive"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* The order of the tags does not matter"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Students matching at least one tag will be returned (i.e. `OR` search)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Returns any student having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* `find t/students` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Returns students tagged with `t/students`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* `find t/students t/colleagues` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Returns students tagged with `t/students` or `t/colleagues`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Deleting a student : `delete`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Deletes the specified student from the address book. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Deletes the student at the specified `INDEX`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Deletes the 2nd student in the address book."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Deletes the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003d\u003d\u003d Selecting a student : `select`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Selects the student identified by the index number used in the displayed student list. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* Selects the student and loads the Google search page the student at the specified `INDEX`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Selects the 2nd student in the address book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Selects the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "Clears all entries from the address book while still maintaining the calendar. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alyip98"
        },
        "content": "// tag::mark[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d Mark"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "A Mark represents a group of Students in the app. Some commands accept Marks as an alternative to INDEX as a parameter to quickly perform batch operations."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Mark Creation"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Format: `mark find t/TAGNAME` or `mark find KEYWORD`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "This creates a Mark containing the Students returned by the find command with the supplied arguments."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "E.g. `mark find t/friends` will find all students in the Address Book tagged with \"friends\" and add them to a Mark."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Named Marks"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Marks can be named by using the prefix `m/MARKNAME`. If not specified, the name of the created Mark will default to \"m/default\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "E.g. `mark m/myMarkName t/friends` will add the Students tagged with \"friends\" to a Mark called \"myMarkName\""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Note: Mark names must be alphanumeric and do not contain spaces."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Manipulating Marks"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Marks are able to be manipulated in the same way as sets, namely, they support the following operations: `union (join)`, `intersection (and)`, `complement (NYI)`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Format: `mark [m/DEST_MARK] \u003coperation\u003e m/OPERANDMARK1 [m/OPERANDMARK2]`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "E.g. `mark m/students join m/tut1 m/tut2` m/students will contain the Students of m/tut1 and m/tut2 merged together"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "E.g. `mark m/canRetake and m/absentFromTest m/validReason` -- m/canRetake will contain Students that are in both m/absentFromTest and m/validReason"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Note: The first operand is compulsory while the second operand is optional and will default to \"m/default\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Displaying Marks"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "The Students in a Mark can be shown in the GUI wit the following command:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alyip98"
        },
        "content": "`mark [m/MARKTOBESHOWN] show`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alyip98"
        },
        "content": "\u003d\u003d\u003d\u003d Reference"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alyip98"
        },
        "content": "`mark [m/m1] ...`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `find [name|t/tag]` -- finds students matching criteria and mark under _m1_"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* `join m/m2 m/m3` -- sets _m1_ to be the *union* of _m2_ and _m3_"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* `and m/m2 m/m3` -- sets _m1_ to be the *intersection* of _m2_ and _m3_"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `show` -- displays students from _m1_ in the GUI"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alyip98"
        },
        "content": "* _m1_ defaults to \"default\" if omitted"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alyip98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `mark find t/friends` -- adds all students with tag _t/friends_ under _m/default_"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `mark m/abc find t/colleagues` -- marks all students with tag _t/colleagues_ under _m/abc_"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `mark join m/a m/b` -- marks students in either _m/a_ or _m/b_ under _m/default_ (union of a and b)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `mark and m/a m/b` -- marks students in both _m/a_ and _m/b_ under _m/default_ (intersection of a and b)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* `mark m/test show` -- shows students marked under _m/test_ in the GUI"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alyip98"
        },
        "content": "// end::mark[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ConTAct folder."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* *Add* `add n/NAME sn/STUDENT_NUMBER e/EMAIL f/FACULTY [t/TAG]...` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "e.g. `add n/James Ho sn/A22224444 e/jamesho@example.com f/School of Computing t/student t/computerscience`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [sn/STUDENT_NUMBER] [e/EMAIL] [f/FACULTY] [t/TAG]...` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* *Sort* : `sort PARAMETER` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "e.g. `sort NAME`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* *Attendance* : `attendance INDEX_NUMBER at/ATTENDANCE`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "e.g. `attd CS2103-Tutorial-W13`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* *Schedule* : `schedule event/EVENT_NAME date/DATE start/TIME_START end/TIME_END descr/DESCRIPTION` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "e.g `schedule event/CS2103-Tutorial-W13 date/22-3-2018 start/16:00 end/18:00 descr/Product demo`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "* *Email* : `email GROUP_NAME [MORE_GROUP_NAMES]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "e.g. `email CS2103-Tutorial-W13`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 14,
      "andrewtanJS": 110,
      "alyip98": 48,
      "-": 227
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.storage.XmlCalendarStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Added milestone tag v1.3.1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        CalendarStorage calendarStorage \u003d new XmlCalendarStorage(userPrefs.getCalendarFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, calendarStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Optional\u003cReadOnlyCalendar\u003e calendarOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ReadOnlyAddressBook addressBookData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ReadOnlyCalendar calendarData;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            addressBookData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            addressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            addressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            calendarOptional \u003d storage.readCalendar();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            if (!calendarOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Calendar\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            calendarData \u003d calendarOptional.orElseGet(SampleDataUtil::getSampleCalendar);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Calendar\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            calendarData \u003d new Calendar();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Calendar\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            calendarData \u003d new Calendar();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new ModelManager(addressBookData, calendarData, userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 28,
      "-": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String appTitle \u003d \"ConTAct\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMES_FORMAT \u003d \"The start time is later than the end time!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String MESSAGE_WIP_COMMAND \u003d \"Command is a work-in-progress: %1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 3,
      "alyip98": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return \"number of students \" + data.getStudentList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/CalendarChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class CalendarChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final ReadOnlyCalendar data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public CalendarChangedEvent(ReadOnlyCalendar data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return \"number of students \" + data.getEventList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/StudentChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final Student oldStudent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final Student newStudent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentChangedEvent(Student oldStudent, Student newStudent) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.oldStudent \u003d oldStudent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.newStudent \u003d newStudent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (newStudent !\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return \"student changed: \" + oldStudent.toString() + \" -\u003e \" + newStudent.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return \"student deleted: \" + oldStudent.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Indicates a request to jump to the list of students"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/StudentPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents a selection change in the Student List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Student newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentPanelSelectionChangedEvent(Student newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Student getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * Returns true if {@code s} is a prefixed argument"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @param s string to check if prefixed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @param prefixes list of prefixes to check against"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @return whether string contains prefix"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static boolean isPrefixedArg(String s, Prefix... prefixes) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return Arrays.stream(prefixes).anyMatch(p -\u003e s.contains(p.getPrefix()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * Returns argument part from a prefixed argument"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @param s prefixed string"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @param prefix prefix to extract"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @return argument"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @throws IllegalArgumentException if s does not contain expected prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static String extractArgument(String s, Prefix prefix) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        if (!s.contains(prefix.getPrefix())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            throw new IllegalArgumentException(\"Expecting prefixed argument\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return s.split(prefix.getPrefix())[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alyip98": 26,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 6,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/OutlookRequest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " * Handles the sending of the mail"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class OutlookRequest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private String emailAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private String subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private String body;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public OutlookRequest(String emailAdd, String subject, String body) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        this.emailAdd \u003d emailAdd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private String getEmailAdd() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return emailAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public String getBody() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Connecting to outlook with appropriate tokens to send email"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static void sendMail(OutlookRequest outlookRequest) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            String url \u003d \"https://outlook.office.com/api/v2.0/me/sendmail\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            URL obj \u003d new URL(url);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            HttpURLConnection conn \u003d (HttpURLConnection) obj.openConnection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            conn.setRequestMethod(\"POST\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            conn.setDoOutput(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            String basicAuth \u003d \"Bearer EwA4A+l3BAAUv0lYxoez7x2t6RowHa2liVeLW/wAAZv01ygjLaIsxm+\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"uty3OAuwW0rqZEKW1mTT5dDr/GuAx3zDGSrVl5o/CgN6BeS9U7mesRgnkUNsLwYRoVDcoz/hA2yvz204My\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"FnXo86xT4PmkbshXrpkl2cSkbyy8DxzQTO60K3qRXYsEI5Ypn0Kqvx4OC+hAo7QnWSrQcNkMPry5BpI3/50f8P4\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"GUu3G0E2tlsEEOQtRmaUu0udvJHonSXmGLIJN6zC7N2+LQ6w/SneP474D/Zn1ujGcpVDBMJWEns44V0S5/q5eKxgc1\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"zlnAFf6GbWYJMJ/VOVSHxGAG9BjZ4OlCENPA8K2oNj7jjzc8GCC9Su4hDdxBbYx4Z/yS4DZgAACDJWRudcrPxBCAI3\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"vNfEGZwb091B6iRzpToU+F+uc6EMqspQ5SmXHzgF0qYi1e1pSSRbnKWYjUd5zWnbXu46s9VT1EfmCZ0CM1NrIsw0lpmr\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"5KWHqAwJPXCuENsXJ8iVnFbdNix3JRKGqgP/4PXu8fd8ICO29JmoeDNKlmmSuB0iFXBzR75ETmLNd3mZ26sN0x91ICxc\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"xSu/fFwyZzx39byFg1VgTULVH4PHvwc1jSEUO8oV8T2fidb3WAwFoePWc/HyR7PRPa0r99uUtPK5BuXyUpE66Cy0RjL4o\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"B+GKw5LR4flKwPHuZAqUa0NjPqu1Wur8TmmQrJwqDNc9FjHNvum95muBtIUKrP7tmIB74uIwVYK2zk4gURyM3yqdjbuj\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"8+RvAVFykqhu/bNVhJMI7Beg3+xlkDHGB9qhHrCTolwZ7VfVR6+9P/nV2rOASt5pK9PBZ5wZSucAjjMQ04MhtokWJAA\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"7mKpn5F0pakxi4LnQLU90vwD68B+OrEBtCj9FSbOtD1vQCwU51HKtI1QW40kzEddsbfyzrDqw0+1iEDt0PyEuoVzit2\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"d5uiwL/ABxPQwEGY4g33wzgBceinG2clZeriOWAbaGAG7e6O99ZaeM2XcE3/5/236i7K9Wqq0/yDELDWklmQD2X8UFq\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + \"s/4C8fHjsuSU+8lAwQvfIuYA1FFE2LWX/tAK4Tazy5uF4N68vtMwI\u003d\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            conn.setRequestProperty (\"Authorization\", basicAuth);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            conn.setRequestProperty(\"Accept\", \"application/json; odata.metadata\u003dnone\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            conn.setRequestProperty(\"Content-Type\", \"application/json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            String subject \u003d outlookRequest.getSubject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            String body \u003d outlookRequest.getBody();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            String emailAdd \u003d outlookRequest.getEmailAdd();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            String str \u003d \"{\\\"Message\\\":{\\\"Subject\\\":\\\"\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + subject + \"\\\",\\\"Body\\\":{\\\"ContentType\\\":\\\"Text\\\",\\\"Content\\\":\\\"\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    + body + \"\\\"},\\\"ToRecipients\\\":[{\\\"EmailAddress\\\":{\\\"Faculty\\\":\\\"\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    + emailAdd + \"\\\"}}]},\\\"SaveToSentItems\\\":\\\"true\\\"}\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            byte[] outputInBytes \u003d str.getBytes(\"UTF-8\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            OutputStream os \u003d conn.getOutputStream();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            os.write(outputInBytes);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            os.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            BufferedReader in \u003d new BufferedReader("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                    new InputStreamReader(conn.getInputStream()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            String inputLine;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            StringBuffer content \u003d new StringBuffer();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            while ((inputLine \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                content.append(inputLine);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 94,
      "andrewtanJS": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Adds a student to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_STUDENT_NUMBER + \"STUDENT_NUMBER \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_FACULTY + \"FACULTY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_STUDENT_NUMBER + \"A98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_EMAIL + \"e1234567@u.nus.edu \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_FACULTY + \"School of Computing \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_TAG + \"student \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_TAG + \"computerscience\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public AddCommand(Student student) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 22,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttendanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yogtew"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yogtew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yogtew"
        },
        "content": " * UPDATES ATTENDANCE OF A STUDENT IN THE ADDRESS BOOK."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yogtew"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class AttendanceCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attendance\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the attendance of a student. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            + PREFIX_ATTENDANCE + \"[ATTENDANCE]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            + PREFIX_ATTENDANCE + \"Present.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static final String MESSAGE_ADD_ATTENDANCE_SUCCESS \u003d \"Added attendance for student: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static final String MESSAGE_REMOVE_ATTENDANCE_SUCCESS \u003d \"Removed attendance for student: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * @param index of the student to mark the attendance of"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * @param attendance of the student"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public AttendanceCommand(Index index, Attendance attendance) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        requireAllNonNull(index, attendance);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d new Student(studentToEdit.getName(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                studentToEdit.getStudentNumber(), studentToEdit.getEmail(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                studentToEdit.getFaculty(), attendance, studentToEdit.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * Generates a command execution success message based on whether the attendance is updated to or removed from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code studentToEdit}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String generateSuccessMessage(Student studentToEdit) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        String message \u003d !attendance.value.toString().isEmpty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                ? MESSAGE_ADD_ATTENDANCE_SUCCESS : MESSAGE_REMOVE_ATTENDANCE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return String.format(message, studentToEdit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        if (object \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        if (!(object instanceof AttendanceCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        AttendanceCommand a \u003d (AttendanceCommand) object;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        return index.equals(a.index)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                \u0026\u0026 attendance.equals(a.attendance);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yogtew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 76,
      "andrewtanJS": 14,
      "alyip98": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Addressbook has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 9,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Edits the details of an existing student in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"[\" + PREFIX_STUDENT_NUMBER + \"STUDENT_NUMBER] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"[\" + PREFIX_FACULTY + \"FACULTY] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_STUDENT_NUMBER + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentNumber updatedStudentNumber \u003d editStudentDescriptor"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .getStudentNumber().orElse(studentToEdit.getStudentNumber());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Faculty updatedFaculty \u003d editStudentDescriptor.getFaculty().orElse(studentToEdit.getFaculty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Attendance updatedAttendance \u003d editStudentDescriptor.getAttendance().orElse(studentToEdit.getAttendance());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Student(updatedName, updatedStudentNumber,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                updatedEmail, updatedFaculty, updatedAttendance, updatedTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        private StudentNumber studentNumber;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        private Faculty faculty;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        private Attendance attendance;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            setStudentNumber(toCopy.studentNumber);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            setFaculty(toCopy.faculty);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            setAttendance(toCopy.attendance);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, studentNumber, email, faculty, tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void setStudentNumber(StudentNumber studentNumber) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            this.studentNumber \u003d studentNumber;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public Optional\u003cStudentNumber\u003e getStudentNumber() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return Optional.ofNullable(studentNumber);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void setFaculty(Faculty faculty) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public Optional\u003cFaculty\u003e getFaculty() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return Optional.ofNullable(faculty);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    \u0026\u0026 getStudentNumber().equals(e.getStudentNumber())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    \u0026\u0026 getFaculty().equals(e.getFaculty())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 68,
      "alyip98": 6,
      "-": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EmailCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.OutlookRequest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.EmailDraft;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Extracts email address from student identified using it\u0027s displayed index from the list of students."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class EmailCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"email\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sends email to student specified. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            + PREFIX_BODY + \"BODY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            + PREFIX_SUBJECT + \"Tutorial time changed \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            + PREFIX_BODY + \"Tutorial this week is on tuesday. \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String MESSAGE_SENT_SUCCESS \u003d \"Email sent to: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private final EmailDraft emailDraft;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Creates an EmailCommand to send the specified {@code EmailDraft}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public EmailCommand(EmailDraft emailDraft) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        this.emailDraft \u003d emailDraft;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Index targetIndex \u003d emailDraft.getIndex();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToEmail \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Email addressToEmail \u003d studentToEmail.getEmail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String emailAdd \u003d addressToEmail.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String subject \u003d emailDraft.getSubject().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String body \u003d emailDraft.getBody().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        OutlookRequest outlookRequest \u003d new OutlookRequest(emailAdd, subject, body);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        OutlookRequest.sendMail(outlookRequest);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SENT_SUCCESS, addressToEmail));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                || (other instanceof EmailCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                \u0026\u0026 emailDraft.equals(((EmailCommand) other).emailDraft)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 70,
      "andrewtanJS": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting ConTAct as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.IsTaggedPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Finds and lists all students in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Predicate\u003cStudent\u003e predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public FindCommand(IsTaggedPredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Predicate\u003cStudent\u003e getPredicate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 9,
      "alyip98": 7,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Lists all students in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Schedules an event to the calendar."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedules an event in the calendar. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_EVENT_NAME + \"EVENT_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_START + \"TIME_START \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_END + \"TIME_END \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_EVENT_NAME + \"CS2103 Tutorial W13 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_DATE + \"22-3-2018 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_START + \"16:00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_END + \"18:00 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Week 3 CS2103 tutorial\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the calendar\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Event toSchedule;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Creates a ScheduleCommand to add the specified (@code Event)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ScheduleCommand(Event event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        toSchedule \u003d event;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (model.hasEvent(toSchedule)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.addEvent(toSchedule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.commitCalendar();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toSchedule));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof ScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 toSchedule.equals(((ScheduleCommand) other).toSchedule));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Selects a student identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \": Selects the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_SELECT_STUDENT_SUCCESS \u003d \"Selected Student: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e filteredStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredStudentList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_STUDENT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 8,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.mark.IMarkExecutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Command that adds tags to marked Students"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class SetTagCommand extends Command implements IMarkExecutable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"[index|mark] tags...\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private String markName \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private boolean useMark \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public SetTagCommand(String markName, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.markName \u003d markName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        useMark \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public SetTagCommand(Index index, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        useMark \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        if (useMark) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return executeMark(model, history);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        descriptor.setTags(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return new EditCommand(index, descriptor).execute(model, history);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public CommandResult executeMark(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        Mark m \u003d model.getMark(markName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e updatedList \u003d m.getList().stream().map(p -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(p.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            updatedTags.addAll(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            Student newStudent \u003d new Student(p.getName(), p.getStudentNumber(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    p.getEmail(), p.getFaculty(), updatedTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            model.updateStudent(p, newStudent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return newStudent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        model.setMark(m.getName(), new Mark(updatedList, m.getName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new CommandResult(String.format(\"Successfully tagged %d students\", updatedList.size()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 9,
      "alyip98": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mark/IMarkExecutable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.commands.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": " * Interface for commands that support execution with marks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public interface IMarkExecutable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public CommandResult executeMark(Model model, CommandHistory history);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alyip98": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mark/MarkAndCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.commands.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": " * Mark \"and\" subcommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class MarkAndCommand extends MarkCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully added %d students from %s and %s to %s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private final String alias1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private final String alias2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private final String alias3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public MarkAndCommand(String alias1, String alias2, String alias3) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.alias1 \u003d alias1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.alias2 \u003d alias2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.alias3 \u003d alias3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        Mark mark1 \u003d model.getMark(alias2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        model.setMark(alias1, mark1.intersect(model.getMark(alias3)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mark1.getList().size(), alias2, alias3, alias1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "alyip98": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mark/MarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.commands.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Marks Students based on supplied Predicates"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public abstract class MarkCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String SHOW \u003d \"show\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String JOIN \u003d \"join\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String AND \u003d \"and\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a Mark.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + \"[\" + PREFIX_MARK + \"MARK1] \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + \"[\" + SHOW + \"|\" + FIND + \"|\" + JOIN + \"|\" + AND + \"] \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + \"[\" + PREFIX_MARK + \"MARK2] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + \"[\" + PREFIX_MARK + \"MARK3]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + \"Example: mark \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + PREFIX_MARK + \"mark1 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + JOIN + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + PREFIX_MARK + \"mark2 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            + PREFIX_MARK + \"mark3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    protected String alias1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    protected String alias2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    protected String alias3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                || (other instanceof MarkCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "alyip98": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mark/MarkFindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.commands.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": " * Mark \"find\" subcommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class MarkFindCommand extends MarkCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully added %d students to %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Predicate\u003cStudent\u003e p;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public MarkFindCommand(Predicate\u003cStudent\u003e p, String alias1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.p \u003d p;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.alias1 \u003d alias1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e marked \u003d model.getAddressBook().getStudentList().filtered(p);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        Mark mark \u003d new Mark(marked);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        model.setMark(alias1, mark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, marked.size(), alias1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "alyip98": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mark/MarkJoinCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.commands.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": " * Mark \"join\" subcommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": " * mark [alias1] join {alias2} [alias3]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class MarkJoinCommand extends MarkCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully added %d students in either %s or %s to %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private final String alias2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private final String alias3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public MarkJoinCommand(String alias1, String alias2, String alias3) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.alias1 \u003d alias1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.alias2 \u003d alias2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.alias3 \u003d alias3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        Mark mark1 \u003d model.getMark(alias2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        model.setMark(alias1, mark1.join(model.getMark(alias3)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mark1.getList().size(), alias2, alias3, alias1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "alyip98": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mark/MarkShowCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.commands.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": " * Mark \"show\" subcommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class MarkShowCommand extends MarkCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Listed %d students in %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public MarkShowCommand(String alias1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.alias1 \u003d alias1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        Mark mark \u003d model.getMark(alias1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(mark.getPredicate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mark.getList().size(), alias1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "alyip98": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        PREFIX_STUDENT_NUMBER, PREFIX_EMAIL, PREFIX_FACULTY, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_FACULTY, PREFIX_STUDENT_NUMBER, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentNumber studentNumber \u003d ParserUtil.parseStudentNumber(argMultimap.getValue(PREFIX_STUDENT_NUMBER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Faculty faculty \u003d ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student student \u003d new Student(name, studentNumber, email, faculty, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new AddCommand(student);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 14,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.SetTagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.mark.MarkCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        case AttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            return new AttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        case EmailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            return new EmailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        case MarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return new MarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        case SetTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return new SetTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 3,
      "preethi-d": 3,
      "andrewtanJS": 3,
      "alyip98": 11,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private String trailingArgs \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * Gets the number of non-empty keys"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public int countNonEmptyArgs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return argMultimap.values().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                .mapToInt(x -\u003e x.size() \u003d\u003d 0 ? 0 : 1).sum() - getAllValues(new Prefix(\"\")).size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * Check whether tokenized arg has more args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @return whether has trailingArgs"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public boolean hasTrailing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return !Objects.equals(trailingArgs, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public String getTrailingArgs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return trailingArgs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public void setTrailingArgs(String trailingArgs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.trailingArgs \u003d trailingArgs;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alyip98": 26,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        String[] splitArgs \u003d argsString.split(PREFIX_FINAL.getPrefix(), 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(splitArgs[0], prefixes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        ArgumentMultimap result \u003d extractArguments(splitArgs[0], positions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        result.setTrailingArgs(splitArgs.length \u003e 1 ? splitArgs[1] : \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alyip98": 7,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttendanceCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yogtew"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yogtew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yogtew"
        },
        "content": " * Parses input arguments and creates a new {@code AttendanceCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yogtew"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yogtew"
        },
        "content": "public class AttendanceCommandParser implements Parser\u003cAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AttendanceCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * and returns a {@code AttendanceCommand} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public AttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ATTENDANCE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                    AttendanceCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        String attendance \u003d argMultimap.getValue(PREFIX_ATTENDANCE).orElse(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        return new AttendanceCommand(index, new Attendance(attendance));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yogtew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 35,
      "andrewtanJS": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_NUMBER \u003d new Prefix(\"sn/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"event/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Prefix PREFIX_START \u003d new Prefix(\"start/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Prefix PREFIX_END \u003d new Prefix(\"end/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"descr/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final Prefix PREFIX_BODY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final Prefix PREFIX_FINAL \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final Prefix PREFIX_MARK \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 1,
      "preethi-d": 3,
      "andrewtanJS": 7,
      "alyip98": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_STUDENT_NUMBER,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_FACULTY, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            editStudentDescriptor.setStudentNumber(ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    .parseStudentNumber(argMultimap.getValue(PREFIX_STUDENT_NUMBER).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FACULTY).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            editStudentDescriptor.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new EditCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 16,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EmailCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Body;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.EmailDraft;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " * Parses input arguments and creates a new EmailCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EmailCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * and returns an EmailCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public EmailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_SUBJECT, PREFIX_BODY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_SUBJECT, PREFIX_BODY)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Body body \u003d ParserUtil.parseBody(argMultimap.getValue(PREFIX_BODY).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        EmailDraft emailDraft \u003d new EmailDraft(index, subject, body);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return new EmailCommand(emailDraft);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.IsTaggedPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        // if no PREFIXES used -\u003e search by name (default usage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        if (argumentMultimap.countNonEmptyArgs() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        if (argumentMultimap.getAllValues(PREFIX_TAG).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        // tag prefixes found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            List\u003cTag\u003e tags \u003d argumentMultimap.getAllValues(PREFIX_TAG)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                    .stream().map(Tag::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return new FindCommand(new IsTaggedPredicate(tags));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "alyip98": 21,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static seedu.address.model.mark.Mark.DEFAULT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.mark.MarkAndCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.mark.MarkCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.mark.MarkFindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.mark.MarkJoinCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.mark.MarkShowCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class MarkCommandParser implements Parser\u003cMarkCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public MarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            Expected format: mark [alias1] \u003ccommand\u003e [alias2] [alias3]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            alias1 defaults to DEFAULT_NAME"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            alias2, alias3 are required for certain commands"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            command list:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            show - shows the marked Students in the GUI"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            find - marks Students matching find"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            join - union of two Marks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            and - intersection of two Marks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alyip98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        ArrayList\u003cString\u003e splitArgs \u003d new ArrayList\u003c\u003e(Arrays.asList(args.trim().split(\" \")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        String alias1 \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        String alias2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        String alias3 \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        if (StringUtil.isPrefixedArg(splitArgs.get(0), PREFIX_MARK)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            alias1 \u003d StringUtil.extractArgument(splitArgs.get(0), PREFIX_MARK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            splitArgs.remove(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        //\u003ccommand\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        String subCommand \u003d splitArgs.get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        case MarkCommand.SHOW:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            // show"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return new MarkShowCommand(alias1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        case MarkCommand.FIND:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            // find"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            String findArgs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            int index \u003d splitArgs.indexOf(\"f/\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                findArgs \u003d String.join(\" \", splitArgs.subList(0, index));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                findArgs \u003d String.join(\" \", splitArgs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            FindCommand findCommand \u003d new FindCommandParser().parse(findArgs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            Predicate\u003cStudent\u003e p \u003d findCommand.getPredicate();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return new MarkFindCommand(p, alias1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        case MarkCommand.JOIN:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            // mark [alias1] join [alias2] [alias3]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            splitArgs.remove(0); // removes \"join\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            if (splitArgs.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkJoinCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            alias2 \u003d StringUtil.extractArgument(splitArgs.get(0), PREFIX_MARK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            if (splitArgs.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                alias3 \u003d StringUtil.extractArgument(splitArgs.get(1), PREFIX_MARK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return new MarkJoinCommand(alias1, alias2, alias3);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        case MarkCommand.AND:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            // mark [alias1] join [alias2] [alias3]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            splitArgs.remove(0); // removes \"join\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            if (splitArgs.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAndCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            alias2 \u003d StringUtil.extractArgument(splitArgs.get(0), PREFIX_MARK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            if (splitArgs.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                alias3 \u003d StringUtil.extractArgument(splitArgs.get(1), PREFIX_MARK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return new MarkAndCommand(alias1, alias2, alias3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            // invalid command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 4,
      "alyip98": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Body;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses a {@code String studentNumber} into a {@code StudentNumber}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws ParseException if the given {@code studentNumber} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static StudentNumber parseStudentNumber(String studentNumber) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(studentNumber);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String trimmedStudentNumber \u003d studentNumber.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!StudentNumber.isValidStudentNumber(trimmedStudentNumber)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new StudentNumber(trimmedStudentNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses a {@code String faculty} into an {@code Faculty}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws ParseException if the given {@code faculty} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static Faculty parseFaculty(String faculty) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String trimmedFaculty \u003d faculty.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!Faculty.isValidFaculty(trimmedFaculty)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Faculty(trimmedFaculty);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * Parses a {@code String attendance} into a {@code Attendance}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * @throws ParseException if given {@code attendance} is invalid"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static Attendance parseAttendance(String attendance) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        String trimmedAttendance \u003d attendance.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        if (!Attendance.isValidAttendance(trimmedAttendance)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            throw new ParseException(Attendance.MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        return new Attendance(trimmedAttendance);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Parses a {@code String body} into an {@code Body}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * @throws ParseException if the given {@code body} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static Body parseBody(String body) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        requireNonNull(body);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String trimmedBody \u003d body.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        if (!Body.isValidBody(trimmedBody)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            throw new ParseException(Body.MESSAGE_BODY_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return new Body(trimmedBody);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Parses a {@code String subject} into an {@code Subject}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * @throws ParseException if the given {@code subject} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static Subject parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        if (!Subject.isValidSubject(trimmedSubject)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return new Subject(trimmedSubject);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses a {@code String eventName} into an {@code EventName}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws ParseException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static EventName parseEventName(String eventName) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String trimmedEventName \u003d eventName.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!EventName.isValidEventName(trimmedEventName)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(EventName.EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new EventName(trimmedEventName);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(Date.DATE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses a {@code String startTime} into an {@code StartTime}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws ParseException if the given {@code startTime} is invalid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static StartTime parseStartTime(String startTime) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String trimmedStartTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!StartTime.isValidStartTime(trimmedStartTime)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(StartTime.START_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new StartTime(trimmedStartTime);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses a {@code String endTime} into an {@code endTime}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws ParseException if the given {@code endTime} is invalid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static EndTime parseEndTime(String endTime) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String trimmedEndTime \u003d endTime.trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!EndTime.isValidEndTime(trimmedEndTime)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(EndTime.END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new EndTime(trimmedEndTime);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(Description.DESCRIPTION_STRING_CONSTRAINTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 33,
      "yogtew": 11,
      "andrewtanJS": 101,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TIMES_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        PREFIX_START, PREFIX_END, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                PREFIX_DATE, PREFIX_START, PREFIX_END, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StartTime start \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_START).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EndTime end \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_END).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // If the start time is later than the end time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (start.startTime.compareTo(end.endTime) \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIMES_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Event event \u003d new Event(eventName, date, start, end, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new ScheduleCommand(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.commands.SetTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": " * Parser for SetTagCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class SetTagCommandParser implements Parser\u003cSetTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * Parses user input and returns a SetTagCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @param args user arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @return SetTagCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public SetTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        Usage: tag [index|mark] t/tagName ..."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        Set\u003cTag\u003e tags \u003d argMultiMap.getAllValues(PREFIX_TAG).stream().map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        if (argMultiMap.getPreamble().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            String markName \u003d argMultiMap.getValue(PREFIX_MARK).orElse(Mark.DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return new SetTagCommand(markName, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                return new SetTagCommand(index, tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                        SetTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alyip98": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Creates an AddressBook using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Adds a student to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The student must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The student identity of {@code editedStudent} must not be"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * the same as another existing student in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void updateStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 students.equals(((AddressBook) other).students));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 33,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Calendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Wraps all data at the calendar level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Duplicates are not allowed (by .isSameEvent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class Calendar implements ReadOnlyCalendar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Calendar() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Creates a Calendar using the events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Calendar(ReadOnlyCalendar toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Resets the existing data of this {@code Calendar} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void resetData(ReadOnlyCalendar newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if an event identical to {@code event} exists in the calendar."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Adds an event to the calendar."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The event must not already exist in the calendar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Removes {@code key} from this {@code Calendar}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code key} must exist in the calendar."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this //short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof Calendar // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 events.equals(((Calendar) other).events));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENT \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The student must exist in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code student} must not already exist in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The student identity of {@code editedStudent} must not be"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * the same as another existing student in the address book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void updateStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    Mark getMark(String markName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    void setMark(String markName, Mark mark);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** Returns the Calendar */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    ReadOnlyCalendar getCalendar();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the Event."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The event must exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code event} must not already exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** Returns an unmodifiable view of the filtered event list */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if the model has previous calendar states to restore."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    boolean canUndoCalendar();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if the model has undone calendar states to restore."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    boolean canRedoCalendar();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Restores the model\u0027s calendar to its previous state."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void undoCalendar();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Restores the model\u0027s calendar to its previously undone state."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void redoCalendar();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Saves the current calendar state for undo/redo."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void commitCalendar();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 74,
      "alyip98": 7,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.model.CalendarChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.model.StudentChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private final HashMap\u003cString, Mark\u003e marks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final VersionedCalendar versionedCalendar;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyCalendar calendar, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(versionedAddressBook.getStudentList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedCalendar \u003d new VersionedCalendar(calendar);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedCalendar.getEventList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this(new AddressBook(), new Calendar(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return versionedAddressBook.hasStudent(student);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedAddressBook.removeStudent(target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        indicateStudentDeleted(target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedAddressBook.addStudent(student);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void updateStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedAddressBook.updateStudent(target, editedStudent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        indicateStudentUpdated(target, editedStudent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredStudents);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo Address Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event and Scheduling \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return versionedCalendar;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void indicateCalendarChanged() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        raise(new CalendarChangedEvent(versionedCalendar));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** Raises an event to indicate a student has been changed */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void indicateStudentDeleted(Student target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        raise(new StudentChangedEvent(target, null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /** Raises an event to indicate a student has been changed */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void indicateStudentUpdated(Student target, Student newStudent) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        raise(new StudentChangedEvent(target, newStudent));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return versionedCalendar.hasEvent(event);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedCalendar.removeEvent(event);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        indicateCalendarChanged();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedCalendar.addEvent(event);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        indicateCalendarChanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo Calendar \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean canUndoCalendar() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return versionedCalendar.canUndo();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean canRedoCalendar() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return versionedCalendar.canRedo();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void undoCalendar() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedCalendar.undo();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        indicateCalendarChanged();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void redoCalendar() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedCalendar.redo();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        indicateCalendarChanged();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void commitCalendar() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        versionedCalendar.commit();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code versionedCalendar}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEvents);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public Mark getMark(String markName) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return marks.getOrDefault(markName, Mark.EMPTY);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public void setMark(String markName, Mark mark) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        marks.put(markName, mark);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void studentChangedEventHandler(StudentChangedEvent event) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        marks.forEach((name, mark) -\u003e {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            Set\u003cStudent\u003e set \u003d new HashSet\u003c\u003e(mark.getSet());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            if (set.contains(event.oldStudent)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                set.remove(event.oldStudent);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                if (event.newStudent !\u003d null) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    set.add(event.newStudent);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                setMark(name, new Mark(set, name));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 124,
      "alyip98": 26,
      "-": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCalendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public interface ReadOnlyCalendar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Path calendarFilePath \u003d Paths.get(\"data\", \"calendar.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return calendarFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setCalendarFilePath(Path calendarFilePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.calendarFilePath \u003d calendarFilePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 9,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedCalendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * (@code Calendar) that keeps track of its own history"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class VersionedCalendar extends Calendar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final List\u003cReadOnlyCalendar\u003e calendarStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public VersionedCalendar(ReadOnlyCalendar initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        calendarStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        calendarStateList.add(new Calendar(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Saves a copy of the current {@code Calendar} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        calendarStateList.add(new Calendar(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        calendarStateList.subList(currentStatePointer + 1, calendarStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Restores the calendar to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        resetData(calendarStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Restores the calendar to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        resetData(calendarStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if {@code undo()} has calendar states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if {@code redo()} has calendar states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return currentStatePointer \u003c calendarStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        VersionedCalendar otherVersionedCalendar \u003d (VersionedCalendar) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return super.equals(otherVersionedCalendar)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 calendarStateList.equals(otherVersionedCalendar.calendarStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedCalendar.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            super(\"Current state pointer at start of calendarStateList, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            super(\"Current state pointer at end of calendarStateList, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Body.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " * Represents the body of the email."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class Body {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String MESSAGE_BODY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            \"Body should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String BODY_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Constructs an {@code Body}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * @param body A valid body."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public Body(String body) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        requireNonNull(body);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        checkArgument(isValidBody(body), MESSAGE_BODY_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        value \u003d body;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Returns true if a given string is a valid body."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static boolean isValidBody(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return test.matches(BODY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                || (other instanceof Body"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                \u0026\u0026 value.equals(((Body) other).value));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/EmailDraft.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " * Represents an email message with a subject and a body in addressbook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class EmailDraft {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private final Subject subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private final Body body;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public EmailDraft(Index index, Subject subject, Body body) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        requireAllNonNull(index, subject, body);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public Body getBody() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public Subject getSubject() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        if (!(other instanceof EmailDraft)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        EmailDraft otherEmailDraft \u003d (EmailDraft) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return otherEmailDraft.getBody().equals(getBody())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                \u0026\u0026 otherEmailDraft.getSubject().equals(getSubject())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                \u0026\u0026 otherEmailDraft.getIndex().equals(getIndex());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public String toString(Object object) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return object.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Subject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " * Represents the subject of the email."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class Subject {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "            \"Subject should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String SUBJECT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Constructs an {@code Subject}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * @param subject A valid subject."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public Subject(String subject) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        value \u003d subject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Returns true if a given string is a valid subject."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static boolean isValidSubject(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return test.matches(SUBJECT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                || (other instanceof Subject"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                \u0026\u0026 value.equals(((Subject"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "                ) other).value));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents the start time of an event in the calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DATE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \"Dates should only be a valid date between the years 1600 and 9999, formatted as dd-mm-yyyy\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * This regex checks if the date is valid and is formatted as dd-mm-yyyy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(-)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(-)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(-)\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \"(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs a (@code Date)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param date a valid start time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        checkArgument(isValidDate(date), DATE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            || (other instanceof Date // instanceof handles null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u0026\u0026 date.equals(((Date) other).date));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents the description of an event in the calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DESCRIPTION_STRING_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DESCRIPTION_STRING_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs a (@code Description)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param description a valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        checkArgument(isValidDescription(description), DESCRIPTION_STRING_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return test.matches(DESCRIPTION_STRING_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EndTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents the end time of an event in the calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EndTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String END_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \"End times should only be given as hh:mm and it should only be in 24 hour format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The end time should be hh:mm and in a 24 hour format (leading zeroes optional)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String END_TIME_VALIDATION_REGEX \u003d \"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final String endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs a (@code EndTime)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param endTime a valid end time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EndTime(String endTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        checkArgument(isValidEndTime(endTime), END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a given string is a valid end time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static boolean isValidEndTime(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return test.matches(END_TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof EndTime // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 endTime.equals(((EndTime) other).endTime)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return endTime.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents an event in the calendar."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    // Comparator for events"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Comparator\u003cEvent\u003e COMPARATOR \u003d new Comparator\u003cEvent\u003e() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public int compare(Event e1, Event e2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                java.util.Date start \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\", Locale.ENGLISH)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        .parse(e1.date.date + \" \" + e1.startTime.startTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                java.util.Date end \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\", Locale.ENGLISH)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        .parse(e2.date.date + \" \" + e2.startTime.startTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                return start.compareTo(end);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                return 0; // Ideally the parsers should be doing their job. If not then simply leave it be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final StartTime startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final EndTime endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs a (@code Event)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param eventName a valid event name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param date a valid date in dd-mm-yyyy format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param startTime a valid start time in 24 hour format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param endTime a valid end time in 24 hour format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param description valid details of the event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Event(EventName eventName, Date date, StartTime startTime, EndTime endTime, Description description) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireAllNonNull(eventName, date, startTime, endTime, description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventName getEventName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StartTime getStartTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EndTime getEndTime() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if both events have the same event name, date, start time, and end time."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherEvent.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherEvent.getDate().equals(getDate())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherEvent.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherEvent.getEndTime().equals(getEndTime());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Event event \u003d (Event) o;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Objects.equals(getEventName(), event.getEventName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(getDate(), event.getDate())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(getStartTime(), event.getStartTime())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(getEndTime(), event.getEndTime())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(getDescription(), event.getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Objects.hash(getEventName(), getDate(), getStartTime(), getEndTime(), getDescription());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        builder.append(getEventName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(\" Start Time: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents the name of the event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String EVENT_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \"Event name can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String EVENT_NAME_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final String eventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs a (@code EventName)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param eventName a valid event name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventName(String eventName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        checkArgument(isValidEventName(eventName), EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static boolean isValidEventName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return test.matches(EVENT_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 eventName.equals(((EventName) other).eventName)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return eventName.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/StartTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents the start time of an event in the calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StartTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String START_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \"Start times should only be given as hh:mm and it should only be in 24 hour format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The start time should be hh:mm and in a 24 hour format (leading zeroes optional)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String START_TIME_VALIDATION_REGEX \u003d \"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final String startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs a (@code StartTime)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param startTime a valid start time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StartTime(String startTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        checkArgument(isValidStartTime(startTime), START_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static boolean isValidStartTime(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return test.matches(START_TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof StartTime // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 startTime.equals(((StartTime) other).startTime)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return startTime.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * An event is considered unique by comparing using {@code PEvent#isSameEvent(Event)}. As such, adding of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * events uses PEvent#isSameEvent(Event) for equality so as to ensure that the event being added is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * unique in terms of identity in the UniqueEventList. However, the removal of an event uses Event#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * as to ensure that the event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        internalList.sort(Event.COMPARATOR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * (@code events) must not contain duplicate events."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if {@code events} contains only unique students."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Signals that the operation will result in duplicate Events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EventNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mark/Mark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alyip98"
        },
        "content": "package seedu.address.model.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Stores a set of marked Students."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public class Mark {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"default\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final Mark EMPTY \u003d new Mark();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private HashSet\u003cStudent\u003e set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Mark(List\u003cStudent\u003e inputList, String markName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        set.addAll(inputList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        name \u003d markName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Mark(Set\u003cStudent\u003e set, String markName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.set.addAll(set);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        name \u003d markName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Mark(List\u003cStudent\u003e inputList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this(inputList, DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Mark(Set\u003cStudent\u003e set) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this(set, DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public Mark() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ArrayList\u003cStudent\u003e getList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return new ArrayList\u003c\u003e(set);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Predicate\u003cStudent\u003e getPredicate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return student -\u003e set.contains(student);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * Joins two marks (union)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @param other other mark to union"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @return new mark containing union"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public Mark join(Mark other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Set\u003cStudent\u003e copy \u003d new HashSet\u003c\u003e(set);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        copy.addAll(other.getList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return new Mark(copy);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * Common elements of two marks (intersect)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @param other other mark to check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     * @return new mark containing intersection"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alyip98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public Mark intersect(Mark other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ArrayList\u003cStudent\u003e copy \u003d new ArrayList\u003c\u003e(set);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        copy.retainAll(other.getList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return new Mark(copy);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Set\u003cStudent\u003e getSet() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return set;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean contains(Student oldStudent) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return set.contains(oldStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 15,
      "alyip98": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Attendance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yogtew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents a Student\u0027s attendance"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yogtew"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static final String MESSAGE_ATTENDANCE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            \"Attendance can take be either 1 (Present) or 0 (Absent) or Undefined.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * The first character of the attendance must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static final String ATTENDANCE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final AttendanceEnum value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public Attendance(AttendanceEnum attendance) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        checkArgument(isValidAttendance(attendance.toString()), MESSAGE_ATTENDANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        value \u003d attendance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public Attendance(String attendance) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        value \u003d fromString(attendance);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * Returns true if a given string is a valid attendance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static boolean isValidAttendance(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        return test.matches(ATTENDANCE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        return obj \u003d\u003d this || (obj instanceof Attendance)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                \u0026\u0026 value.equals(((Attendance) obj).value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * Takes a string attendance and returns a AttendanceEnum"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static AttendanceEnum fromString(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        if (s.equalsIgnoreCase(\"absent\") || s.equals(\"0\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return AttendanceEnum.ABSENT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        } else if (s.equalsIgnoreCase(\"present\") || s.equals(\"1\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return AttendanceEnum.PRESENT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            return AttendanceEnum.UNDEFINED;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yogtew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 48,
      "andrewtanJS": 2,
      "alyip98": 17,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/AttendanceEnum.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yogtew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yogtew"
        },
        "content": " * Used to represent the different types of attendance in Enum"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yogtew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "public enum AttendanceEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    ABSENT, PRESENT, UNDEFINED"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 3,
      "andrewtanJS": 1,
      "alyip98": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents a Student\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Faculty.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents a Student\u0027s faculty in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFaculty(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class Faculty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_FACULTY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \"Faculties can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The first character of the faculty must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String FACULTY_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs an {@code Faculty}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param faculty A valid faculty."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Faculty(String faculty) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        checkArgument(isValidFaculty(faculty), MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        value \u003d faculty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static boolean isValidFaculty(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return test.matches(FACULTY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof Faculty // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 value.equals(((Faculty) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 18,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/IsTaggedPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alyip98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Tests that a {@code Student}\u0027s contains any of the tags given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alyip98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class IsTaggedPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    private final List\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public IsTaggedPredicate(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .anyMatch(tag -\u003e student.getTags().contains(tag));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                || (other instanceof IsTaggedPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                \u0026\u0026 tags.equals(((IsTaggedPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alyip98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "alyip98": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents a Student\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents a Student in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final StudentNumber studentNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Faculty faculty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Student(Name name, StudentNumber studentNumber, Email email, Faculty faculty, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireAllNonNull(name, studentNumber, email, faculty, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.studentNumber \u003d studentNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.attendance \u003d new Attendance(\"absent\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Overloaded Constructor"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Student(Name name, StudentNumber studentNumber,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                   Email email, Faculty faculty, Attendance attendance, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireAllNonNull(name, studentNumber, email, faculty, attendance, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.studentNumber \u003d studentNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentNumber getStudentNumber() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return studentNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Faculty getFaculty() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 (otherStudent.getStudentNumber().equals(getStudentNumber())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || otherStudent.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherStudent.getStudentNumber().equals(getStudentNumber())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherStudent.getFaculty().equals(getFaculty())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherStudent.getAttendance().equals(getAttendance())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Objects.hash(name, studentNumber, email, faculty, attendance, tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(\" StudentNumber: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(getStudentNumber())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(\" Faculty: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(getFaculty())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/StudentNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents a Student\u0027s student number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStudentNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_STUDENT_NUMBER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \"Student Number should only be alphanumeric, and not be blank or contain white spaces.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String STUDENT_NUMBER_VALIDATION_REGEX \u003d \"^[a-zA-Z0-9][a-zA-Z0-9]*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs a {@code StudentNumber}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param studentNumber A valid student number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentNumber(String studentNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(studentNumber);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        checkArgument(isValidStudentNumber(studentNumber), MESSAGE_STUDENT_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        value \u003d studentNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if a given string is a valid student number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static boolean isValidStudentNumber(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return test.matches(STUDENT_NUMBER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof StudentNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 value.equals(((StudentNumber) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 18,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * As such, adding and updating of students uses Student#isSameStudent(Student) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * the student being added or updated is unique in terms of identity in the UniqueStudentList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * However, the removal of a student uses Student#equals(Object) so as to ensure that the student with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Signals that the operation will result in duplicate Students"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * (Students are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} and (@code Calendar) with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Student(new Name(\"Damith Rajapakse\"), new StudentNumber(\"110100110\"), new Email(\"damith@comp.nus.edu\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Faculty(\"School of Computing\"), new Attendance(\"absent\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                getTagSet(\"student\", \"computerscience\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Student(new Name(\"Alan Turing\"), new StudentNumber(\"100100110\"), new Email(\"aturing@comp.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Faculty(\"School of Computing\"), new Attendance(\"absent\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                getTagSet(\"student\", \"computerscience\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Student(new Name(\"Von Neumann\"), new StudentNumber(\"100100101\"), new Email(\"neumann@comp.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Faculty(\"School of Computing\"), new Attendance(\"absent\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                getTagSet(\"student\", \"softwareengineering\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Student(new Name(\"Bob Ross\"), new StudentNumber(\"12345678\"), new Email(\"bobross@painting.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Faculty(\"Faculty of Arts and Social Sciences\"), new Attendance(\"absent\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                getTagSet(\"student\", \"humanities\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Student(new Name(\"Isaac Newton\"), new StudentNumber(\"9810000\"), new Email(\"isaac@phy.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Faculty(\"Faculty of Science\"), new Attendance(\"absent\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                getTagSet(\"student\", \"physics\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Student(new Name(\"George Washington\"), new StudentNumber(\"04071776\"), new Email(\"george@usa.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Faculty(\"Faculty of Arts and Social Sciences\"), new Attendance(\"absent\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                getTagSet(\"student\", \"politicalscience\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"CS2103 tutorial 7\"), new Date(\"17-10-2018\"), new StartTime(\"13:00\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"14:00\"), new Description(\"v1.2\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"CS3230 tutorial 7\"), new Date(\"17-10-2018\"), new StartTime(\"14:00\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"15:00\"), new Description(\"prepare tutorial material\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"Staff Meeting - week 9\"), new Date(\"17-10-2018\"), new StartTime(\"18:00\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"20:00\"), new Description(\"v1.2\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"CS2103 tutorial 8\"), new Date(\"24-10-2018\"), new StartTime(\"13:00\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"14:00\"), new Description(\"mid v1.3\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"CS2103 tutorial 9\"), new Date(\"31-10-2018\"), new StartTime(\"13:00\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"14:00\"), new Description(\"v1.3 - demo\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"TA staff meeting\"), new Date(\"31-10-2018\"), new StartTime(\"10:00\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"12:30\"), new Description(\"YIH\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"CS2103 tutorial 10\"), new Date(\"7-11-2018\"), new StartTime(\"13:00\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"14:00\"), new Description(\"mid v1.4\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"CS2103 exam\"), new Date(\"5-12-2018\"), new StartTime(\"17:00\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"18:00\"), new Description(\"open book exam\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"CS2103 wrap up\"), new Date(\"12-12-2018\"), new StartTime(\"17:00\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"19:00\"), new Description(\"clear all admin tasks\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            new Event(new EventName(\"Post-semester lunch\"), new Date(\"14-12-2018\"), new StartTime(\"13:00\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    new EndTime(\"16:00\"), new Description(\"@ SoC\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        };"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static ReadOnlyCalendar getSampleCalendar() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Calendar sampleCalendar \u003d new Calendar();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            sampleCalendar.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return sampleCalendar;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 1,
      "andrewtanJS": 70,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CalendarStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Calendar}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public interface CalendarStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    Path getCalendarFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyCalendar}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @see #getCalendarFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Saves the given {@link ReadOnlyCalendar} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param calendar cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @see #saveCalendar(ReadOnlyCalendar)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.model.CalendarChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public interface Storage extends AddressBookStorage, CalendarStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    Path getCalendarFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Saves the current version of the Calendar to the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    void handleCalendarChangedEvent(CalendarChangedEvent abce);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 19,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.model.CalendarChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private CalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, CalendarStorage calendarStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return calendarStorage.getCalendarFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return readCalendar(calendarStorage.getCalendarFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return calendarStorage.readCalendar(filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        saveCalendar(calendar, calendarStorage.getCalendarFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        calendarStorage.saveCalendar(calendar, filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void handleCalendarChangedEvent(CalendarChangedEvent event) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            saveCalendar(event.data);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 47,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * JAXB-friendly version of the Event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class XmlAdaptedEvent {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs an XmlAdaptedEvent."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlAdaptedEvent() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs an {@code XmlAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlAdaptedEvent(String eventName, String date, String startTime, String endTime, String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Converts a given Event into this class for JAXB use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedEvent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        eventName \u003d source.getEventName().eventName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        date \u003d source.getDate().date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        startTime \u003d source.getStartTime().startTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        endTime \u003d source.getEndTime().endTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!EventName.isValidEventName(eventName)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(EventName.EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final EventName modelEventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(Date.DATE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    StartTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!StartTime.isValidStartTime(startTime)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(StartTime.START_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final StartTime modelStartTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!EndTime.isValidEndTime(endTime)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(EndTime.END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final EndTime modelEndTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(Description.DESCRIPTION_STRING_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Event(modelEventName, modelDate, modelStartTime, modelEndTime, modelDescription);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!(other instanceof XmlAdaptedEvent)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Objects.equals(eventName, otherEvent.eventName)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherEvent.date)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, otherEvent.startTime)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(endTime, otherEvent.endTime)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherEvent.description);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedStudent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * JAXB-friendly version of the Student."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class XmlAdaptedStudent {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String studentNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private String attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs an XmlAdaptedStudent."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlAdaptedStudent() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Constructs an {@code XmlAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlAdaptedStudent(String name, String studentNumber,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                             String email, String faculty, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.studentNumber \u003d studentNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Converts a given Student into this class for JAXB use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedStudent"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentNumber \u003d source.getStudentNumber().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        faculty \u003d source.getFaculty().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        attendance \u003d source.getAttendance().value.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Converts this jaxb-friendly adapted student object into the model\u0027s Student object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (studentNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    StudentNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!StudentNumber.isValidStudentNumber(studentNumber)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final StudentNumber modelStudentNumber \u003d new StudentNumber(studentNumber);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (faculty \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!Faculty.isValidFaculty(faculty)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalValueException(Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final Faculty modelFaculty \u003d new Faculty(faculty);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yogtew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                    Attendance.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        final Attendance modelAttendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Student(modelName, modelStudentNumber, modelEmail, modelFaculty, modelAttendance, modelTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!(other instanceof XmlAdaptedStudent)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent otherStudent \u003d (XmlAdaptedStudent) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Objects.equals(name, otherStudent.name)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(studentNumber, otherStudent.studentNumber)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherStudent.email)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 Objects.equals(faculty, otherStudent.faculty)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 tagged.equals(otherStudent.tagged);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 9,
      "andrewtanJS": 48,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadAddressBookDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlFileStorage.saveAddressBookDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlCalendarStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A class to access Calendar data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class XmlCalendarStorage implements CalendarStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlCalendarStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return readCalendar(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Similar to {@link #readCalendar()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            logger.info(\"Calendar file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlSerializableCalendar xmlCalendar \u003d XmlFileStorage.loadCalendarDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return Optional.of(xmlCalendar.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        saveCalendar(calendar, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Similar to {@link #saveCalendar(ReadOnlyCalendar)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(calendar);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlFileStorage.saveCalendarDataToFile(filePath, new XmlSerializableCalendar(calendar));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void saveAddressBookDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static XmlSerializableAddressBook loadAddressBookDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Saves the given calendar data to the specified file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void saveCalendarDataToFile(Path file, XmlSerializableCalendar calendar)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            XmlUtil.saveDataToFile(file, calendar);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns calendar in the file or an empty calendar"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static XmlSerializableCalendar loadCalendarDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableCalendar.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 26,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private List\u003cXmlAdaptedStudent\u003e students;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        students.addAll(src.getStudentList().stream().map(XmlAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code XmlAdaptedStudent}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (XmlAdaptedStudent p : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            Student student \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            if (addressBook.hasStudent(student)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            addressBook.addStudent(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return students.equals(((XmlSerializableAddressBook) other).students);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 12,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableCalendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * An Immutable Calendar that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "@XmlRootElement(name \u003d \"calendar\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class XmlSerializableCalendar {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private List\u003cXmlAdaptedEvent\u003e events;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Creates an empty XmlSerializableCalendar."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlSerializableCalendar() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public XmlSerializableCalendar(ReadOnlyCalendar src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Converts this calendar into the model\u0027s {@code Calendar} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code XmlAdaptedEvent}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Calendar toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Calendar addressBook \u003d new Calendar();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (XmlAdaptedEvent e : events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            Event event \u003d e.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!(other instanceof XmlSerializableCalendar)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return events.equals(((XmlSerializableCalendar) other).events);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Label eventName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        eventName.setText(event.getEventName().eventName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        date.setText(\"Date: \" + event.getDate().date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        startTime.setText(\"Start: \" + event.getStartTime().startTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        endTime.setText(\"End: \" + event.getEndTime().endTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        description.setText(event.getDescription().description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return event.equals(card.event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        setConnections(eventList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        scrollTo(LocalDateTime.now(), eventList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void setConnections(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Scrolls to the {@code EventCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            eventListView.scrollTo(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            eventListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Scrolls to the {@code EventCard} just after the given {@code date} and selects it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void scrollTo(LocalDateTime time, ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String date \u003d time.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String startTime \u003d time.format(DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // Creating a dummy event to compare to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Event event \u003d new Event(new EventName(\"index\"), new Date(date), new StartTime(startTime), new EndTime(\"23:59\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Description(\"nil\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Comparator\u003cEvent\u003e comparator \u003d Event.COMPARATOR;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // Finding the index of the nearest upcoming event to scroll to"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        while (index \u003c eventList.size() \u0026\u0026 comparator.compare(event, eventList.get(index)) \u003e 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        scrollTo(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private StackPane eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 10,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Label studentNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Label faculty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentNumber.setText(student.getStudentNumber().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        faculty.setText(student.getFaculty().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        attendance.setText(student.getAttendance().value.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        student.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 2,
      "andrewtanJS": 18,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        setConnections(studentList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void setConnections(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        logger.fine(\"Selection in student list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        raise(new StudentPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Scrolls to the {@code StudentCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            studentListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            studentListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 83
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u003cLabel fx:id\u003d\"eventName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTIme\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 29
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "         minWidth\u003d\"900\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "          \u003cVBox fx:id\u003d\"studentList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "          \u003cVBox fx:id\u003d\"eventList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 6,
      "-": 63
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \u003cLabel fx:id\u003d\"studentNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentNumber\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "      \u003cLabel fx:id\u003d\"faculty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$faculty\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yogtew"
        },
        "content": "      \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yogtew": 1,
      "andrewtanJS": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidStudentAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c!-- Valid Student --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003e9482424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003e4th street\u003c/faculty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e some attendance \u003c/attendance\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c!-- Student with invalid studentNumber field --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003e948asdf2424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003e4th street\u003c/faculty\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e some attendance \u003c/attendance\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "yogtew": 2,
      "andrewtanJS": 10,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidStudentAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c!-- Student with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003e9482424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003e4th street\u003c/faculty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateStudentAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003e94351253\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003e123, Jurong West Ave 6, #08-111\u003c/faculty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c!-- Student with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003e94351253\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003e4th street\u003c/faculty\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "yogtew": 2,
      "andrewtanJS": 9,
      "-": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidStudentAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c!-- Student with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003e9482424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003e4th street\u003c/faculty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalStudentsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Student values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003eA94351253\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003eabsent\u003c/attendance\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003ctagged\u003ecomputerscience\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003eU98765432\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003eabsent\u003c/attendance\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003ctagged\u003einformationsystems\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003ctagged\u003estudent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003eA95352563\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003eFaculty of Engineering\u003c/faculty\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003eabsent\u003c/attendance\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003eA87652533\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003eabsent\u003c/attendance\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003ctagged\u003ebusinessanalytics\u003c/tagged\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003eA9482224\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003eabsent\u003c/attendance\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003eA9482427\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003eFaculty of Engineering\u003c/faculty\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003eabsent\u003c/attendance\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber\u003eA9482442\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance\u003eabsent\u003c/attendance\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "yogtew": 7,
      "andrewtanJS": 33,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidStudentField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c!-- Student with an invalid studentNumber field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003cstudent\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudentNumber\u003e9482as*f424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cfaculty\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003ctagged\u003ecomputerscience\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c/student\u003e"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingStudentField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c!-- Student with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003cstudent\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudentNumber\u003eA9482424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cfaculty\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003ctagged\u003ecomputerscience\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c/student\u003e"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 3,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA9482424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA87249245\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA95352563\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA87652533\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA9482224\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA9482427\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA9482442\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA8482424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cstudentNumber isPrivate\u003d\"false\"\u003eA8482131\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        \u003cfaculty isPrivate\u003d\"false\"\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        \u003cattendance isPrivate\u003d\"false\"\u003e\u003c/attendance\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "yogtew": 9,
      "andrewtanJS": 36,
      "-": 21
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validStudent.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003cstudent\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cstudentNumber\u003eA9482424\u003c/studentNumber\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003cfaculty\u003eSchool of Computing\u003c/faculty\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    \u003ctagged\u003ecomputerscience\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "\u003c/student\u003e"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "-": 3
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final StudentListPanelHandle studentListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentListPanel \u003d new StudentListPanelHandle(getChildNode(StudentListPanelHandle.STUDENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentListPanelHandle getStudentListPanel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 4,
      "-": 42
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StudentCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Provides a handle to a student card in the student list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String FACULTY_FIELD_ID \u003d \"#faculty\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String STUDENT_NUMBER_FIELD_ID \u003d \"#studentNumber\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private static final String ATTENDANCE_FIELD_ID \u003d \"#attendance\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Label facultyLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Label studentNumberLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private final Label attendanceLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        facultyLabel \u003d getChildNode(FACULTY_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentNumberLabel \u003d getChildNode(STUDENT_NUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        attendanceLabel \u003d getChildNode(ATTENDANCE_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return facultyLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public String getStudentNumber() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return studentNumberLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public String getAttendance() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        return attendanceLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if this handle contains {@code student}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean equals(Student student) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return getName().equals(student.getName().fullName)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 getFaculty().equals(student.getFaculty().value)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 getStudentNumber().equals(student.getStudentNumber().value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 getEmail().equals(student.getEmail().value)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(student.getTags().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 6,
      "andrewtanJS": 21,
      "-": 66
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StudentListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Provides a handle for {@code StudentListPanel} containing the list of {@code StudentCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentListPanelHandle extends NodeHandle\u003cListView\u003cStudent\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String STUDENT_LIST_VIEW_ID \u003d \"#studentListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Optional\u003cStudent\u003e lastRememberedSelectedStudentCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentListPanelHandle(ListView\u003cStudent\u003e studentListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        super(studentListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns a handle to the selected {@code StudentCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e selectedStudentList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (selectedStudentList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"Student list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .map(StudentCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedStudentList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Navigates the listview to display {@code student}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void navigateToCard(Student student) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (!getRootNode().getItems().contains(student)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IllegalArgumentException(\"Student does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            getRootNode().scrollTo(student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Selects the {@code StudentCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the student card handle of a student associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentCardHandle getStudentCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .map(StudentCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .filter(handle -\u003e handle.equals(getStudent(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Student getStudent(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Remembers the selected {@code StudentCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void rememberSelectedStudentCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            lastRememberedSelectedStudentCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            lastRememberedSelectedStudentCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns true if the selected {@code StudentCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code rememberSelectedStudentCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public boolean isSelectedStudentCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return lastRememberedSelectedStudentCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return !lastRememberedSelectedStudentCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                    || !lastRememberedSelectedStudentCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model copy \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredStudentList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : ConTAct\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 7,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.storage.XmlAdaptedStudent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Path MISSING_STUDENT_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingStudentField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Path INVALID_STUDENT_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Path VALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"validStudent.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String INVALID_STUDENT_NUMBER \u003d \"9482as*f424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String VALID_STUDENT_NUMBER \u003d \"A9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String VALID_FACULTY \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            Collections.singletonList(new XmlAdaptedTag(\"computerscience\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(9, dataFromFile.getStudentList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void xmlAdaptedStudentFromFile_fileWithMissingStudentField_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                MISSING_STUDENT_FIELD_FILE, XmlAdaptedStudentWithRootElement.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                null, VALID_STUDENT_NUMBER, VALID_EMAIL, VALID_FACULTY, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent, actualStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void xmlAdaptedStudentFromFile_fileWithInvalidStudentField_validResult() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                INVALID_STUDENT_FIELD_FILE, XmlAdaptedStudentWithRootElement.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_NAME, INVALID_STUDENT_NUMBER, VALID_EMAIL, VALID_FACULTY, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent, actualStudent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void xmlAdaptedStudentFromFile_fileWithValidStudent_validResult() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_STUDENT_FILE, XmlAdaptedStudentWithRootElement.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_NAME, VALID_STUDENT_NUMBER, VALID_EMAIL, VALID_FACULTY, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent, actualStudent);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                builder.withStudent(new StudentBuilder().build()).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedStudent}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @XmlRootElement(name \u003d \"student\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static class XmlAdaptedStudentWithRootElement extends XmlAdaptedStudent {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 33,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        logic.getFilteredStudentList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(new AddCommand(validStudent), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentInList \u003d model.getAddressBook().getStudentList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(new AddCommand(studentInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 15,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStudent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStudent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void updateStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        public Mark getMark(String markName) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        public void setMark(String markName, Mark mark) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean canUndoCalendar() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean canRedoCalendar() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void undoCalendar() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void redoCalendar() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void commitCalendar() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 98,
      "alyip98": 11,
      "-": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AttendanceCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yogtew"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.AttendanceEnum;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yogtew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yogtew"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AttendanceCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yogtew"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yogtew"
        },
        "content": "public class AttendanceCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private static final String ATTENDANCE_STUB \u003d \"Some attendance\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void execute_addAttendanceUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(firstStudent).withAttendance(ATTENDANCE_STUB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AttendanceCommand attendanceCommand \u003d new AttendanceCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Attendance(editedStudent.getAttendance().value.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(AttendanceCommand.MESSAGE_ADD_ATTENDANCE_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Calendar(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(firstStudent, editedStudent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertCommandSuccess(attendanceCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(model.getFilteredStudentList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .get(INDEX_FIRST_STUDENT.getZeroBased()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                .withAttendance(ATTENDANCE_STUB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AttendanceCommand attendanceCommand \u003d new AttendanceCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new Attendance(editedStudent.getAttendance().value.toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(AttendanceCommand.MESSAGE_ADD_ATTENDANCE_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Calendar(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(firstStudent, editedStudent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertCommandSuccess(attendanceCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        AttendanceCommand attendanceCommand \u003d new AttendanceCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Attendance(VALID_ATTENDANCE_BOB));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(attendanceCommand, model, commandHistory,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * but smaller than size of conTAct list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of conTAct list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        AttendanceCommand attendanceCommand \u003d new AttendanceCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Attendance(VALID_ATTENDANCE_BOB));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(attendanceCommand, model, commandHistory,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToModify \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student modifiedStudent \u003d new StudentBuilder(studentToModify).withAttendance(ATTENDANCE_STUB).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AttendanceCommand attendanceCommand \u003d new AttendanceCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Attendance(ATTENDANCE_STUB));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Calendar(), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(studentToModify, modifiedStudent);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // first student attendance changed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        attendanceCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // undo -\u003e reverts conTAct back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // redo -\u003e same first student modified again"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        AttendanceCommand attendanceCommand \u003d new AttendanceCommand(outOfBoundIndex, new Attendance(\"\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(attendanceCommand, model, commandHistory,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 1. Modifies {@code Student#remark} from a filtered list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * 2. Undo the modification."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified student in the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the student object regardless of indexing."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yogtew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameStudentDeleted() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AttendanceCommand attendanceCommand \u003d new AttendanceCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Attendance(ATTENDANCE_STUB));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Calendar(), new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToModify \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student modifiedStudent \u003d new StudentBuilder(studentToModify).withAttendance(ATTENDANCE_STUB).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(studentToModify, modifiedStudent);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // modifies second student in unfiltered student list / first student in filtered student list"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        attendanceCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // undo -\u003e reverts address book back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // redo -\u003e modifies same second student in unfiltered student list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final AttendanceCommand standardCommand \u003d new AttendanceCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Attendance(VALID_ATTENDANCE_AMY));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AttendanceCommand commandWithSameValues \u003d new AttendanceCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Attendance(VALID_ATTENDANCE_AMY));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(standardCommand.equals(new AttendanceCommand(INDEX_SECOND_STUDENT,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Attendance(VALID_ATTENDANCE_AMY))));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        assertEquals(new Attendance(AttendanceEnum.UNDEFINED), new Attendance(AttendanceEnum.UNDEFINED));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        assertEquals(new Attendance(AttendanceEnum.ABSENT), new Attendance(AttendanceEnum.ABSENT));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        assertEquals(new Attendance(AttendanceEnum.PRESENT), new Attendance(AttendanceEnum.PRESENT));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        assertEquals(new Attendance(\"0\"), new Attendance(AttendanceEnum.ABSENT));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        assertEquals(new Attendance(\"1\"), new Attendance(AttendanceEnum.PRESENT));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        assertEquals(new Attendance(\" \"), new Attendance(AttendanceEnum.UNDEFINED));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // different attendance -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(standardCommand.equals(new AttendanceCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                new Attendance(\"1\"))));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yogtew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 141,
      "andrewtanJS": 59,
      "alyip98": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_NUMBER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_STUDENT_NUMBER_AMY \u003d \"A11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_STUDENT_NUMBER_BOB \u003d \"A22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_FACULTY_BOB \u003d \"Faculty of Science\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_TAG_PHYSICS \u003d \"physics\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_TAG_MATH \u003d \"math\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public static final String VALID_ATTENDANCE_AMY \u003d \"0\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public static final String VALID_ATTENDANCE_BOB \u003d \"0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String VALID_SUBJECT_EMAIL \u003d \"Subject\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String VALID_BODY_EMAIL \u003d \"Body\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String VALID_INDEX_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String STUDENT_NUMBER_DESC_AMY \u003d \" \" + PREFIX_STUDENT_NUMBER + VALID_STUDENT_NUMBER_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String STUDENT_NUMBER_DESC_BOB \u003d \" \" + PREFIX_STUDENT_NUMBER + VALID_STUDENT_NUMBER_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String FACULTY_DESC_AMY \u003d \" \" + PREFIX_FACULTY + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String FACULTY_DESC_BOB \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_MATH;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_EMAIL;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String BODY_DESC \u003d \" \" + PREFIX_BODY + VALID_BODY_EMAIL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String INDEX_DESC_AMY \u003d \" \" + PREFIX_INDEX + VALID_INDEX_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_STUDENT_NUMBER_DESC \u003d \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + PREFIX_STUDENT_NUMBER + \"911*a\"; // \u0027a\u0027 not allowed in student numbers"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_FACULTY_DESC \u003d \" \" + PREFIX_FACULTY; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"nope*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String INVALID_SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT; //empty string not allowed for subject"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String INVALID_BODY_DESC \u003d \" \" + PREFIX_BODY; //empty string not allowed for body of email"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static final String INVALID_INDEX_DESC \u003d \" \" + PREFIX_INDEX + \"1a\"; //\u0027a\u0027 not allowed in index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_EVENT_NAME_TUTORIAL \u003d \"Tutorial\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_EVENT_NAME_CONSULTATION \u003d \"Consultation\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_DATE_TUTORIAL \u003d \"24-10-2019\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_DATE_CONSULTATION \u003d \"01-11-2019\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_START_TIME_TUTORIAL \u003d \"13:00\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_START_TIME_CONSULTATION \u003d \"10:00\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_END_TIME_TUTORIAL \u003d \"14:00\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_END_TIME_CONSULTATION \u003d \"10:30\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_DESCRIPTION_TUTORIAL \u003d \"Prepare tutorial answers\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String VALID_DESCRIPTION_CONSULTATION \u003d \"Review midterm script\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String EVENT_NAME_DESC_TUTORIAL \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String EVENT_NAME_DESC_CONSULTATION \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME_CONSULTATION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DATE_DESC_TUTORIAL \u003d \" \" + PREFIX_DATE + VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DATE_DESC_CONSULTATION \u003d \" \" + PREFIX_DATE + VALID_DATE_CONSULTATION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String START_TIME_DESC_TUTORIAL \u003d \" \" + PREFIX_START + VALID_START_TIME_TUTORIAL;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String START_TIME_DESC_CONSULTATION \u003d \" \" + PREFIX_START + VALID_START_TIME_CONSULTATION;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String END_TIME_DESC_TUTORIAL \u003d \" \" + PREFIX_END + VALID_END_TIME_TUTORIAL;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String END_TIME_DESC_CONSULTATION \u003d \" \" + PREFIX_END + VALID_END_TIME_CONSULTATION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DESCRIPTION_DESC_TUTORIAL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DESCRIPTION_DESC_CONSULTATION \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + VALID_DESCRIPTION_CONSULTATION;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"12122018\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START + \"1000\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_END_TIME_DESC \u003d \" \" + PREFIX_END + \"25:00\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String INVALID_START_AND_END_DESC \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            \" \" + PREFIX_START + VALID_END_TIME_TUTORIAL"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            + \" \" + PREFIX_END + VALID_START_TIME_TUTORIAL;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withStudentNumber(VALID_STUDENT_NUMBER_AMY).withEmail(VALID_EMAIL_AMY).withFaculty(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withTags(VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withStudentNumber(VALID_STUDENT_NUMBER_BOB).withEmail(VALID_EMAIL_BOB).withFaculty(VALID_FACULTY_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withTags(VALID_TAG_PHYSICS, VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * - the address book and the filtered student list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Deletes the first student in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void deleteFirstStudent(Model model) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.deleteStudent(firstStudent);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 13,
      "yogtew": 1,
      "andrewtanJS": 80,
      "alyip98": 1,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // delete -\u003e first student deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 1. Deletes a {@code Student} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted student in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the student object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameStudentDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // delete -\u003e deletes second student in unfiltered student list / first student in filtered student list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertNotEquals(studentToDelete, model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // redo -\u003e deletes same second student in unfiltered student list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 54,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withStudentNumber(VALID_STUDENT_NUMBER_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withTags(VALID_TAG_PHYSICS).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withStudentNumber(VALID_STUDENT_NUMBER_BOB).withTags(VALID_TAG_PHYSICS).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, new EditCommand.EditStudentDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_STUDENT, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // edit student in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentInList \u003d model.getAddressBook().getStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // edit -\u003e first student edited"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // redo -\u003e same first student edited again"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 1. Edits a {@code Student} from a filtered list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited student in the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the student object regardless of indexing."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameStudentEdited() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // edit -\u003e edits second student in unfiltered student list / first student in filtered student list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertNotEquals(model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()), studentToEdit);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // redo -\u003e edits same second student in unfiltered student list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, DESC_AMY);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_STUDENT, copyDescriptor);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_STUDENT, DESC_AMY)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_STUDENT, DESC_BOB)));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 103,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptorWithSameValues \u003d new EditCommand.EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student number -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withStudentNumber(VALID_STUDENT_NUMBER_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different faculty -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withFaculty(VALID_FACULTY_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_PHYSICS).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 14,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EmailCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BODY_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Body;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.EmailDraft;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class EmailCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Subject subjectStub \u003d new Subject(VALID_SUBJECT_EMAIL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Body bodyStub \u003d new Body(VALID_BODY_EMAIL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        EmailDraft emailDraft \u003d new EmailDraft(outOfBoundIndex, subjectStub, bodyStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(emailDraft);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertCommandFailure(emailCommand, model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 31,
      "andrewtanJS": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.IsTaggedPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public void tag_equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        IsTaggedPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                new IsTaggedPredicate(Collections.singletonList(new Tag(\"first\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        IsTaggedPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                new IsTaggedPredicate(Collections.singletonList(new Tag(\"second\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 20,
      "alyip98": 8,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 7,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 10,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.mark.Mark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        new ScheduleCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_eventAcceptedByModel_scheduleSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        CommandResult commandResult \u003d new ScheduleCommand(validEvent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(String.format(ScheduleCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(validEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expectMessage(ScheduleCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        scheduleCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Event consultation \u003d new EventBuilder().withEventName(\"Consultation\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Event tutorial \u003d new EventBuilder().withEventName(\"Tutorial\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ScheduleCommand scheduleConsultationCommand \u003d new ScheduleCommand(consultation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ScheduleCommand scheduleTutorialCommand \u003d new ScheduleCommand(tutorial);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(scheduleConsultationCommand.equals(scheduleConsultationCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ScheduleCommand scheduleConsultationCommandCopy \u003d new ScheduleCommand(consultation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(scheduleConsultationCommand.equals(scheduleConsultationCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(scheduleConsultationCommand.equals(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(scheduleConsultationCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(scheduleConsultationCommand.equals(scheduleTutorialCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void updateStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean canUndoCalendar() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean canRedoCalendar() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void undoCalendar() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void redoCalendar() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void commitCalendar() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        public Mark getMark(String markName) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        public void setMark(String markName, Mark mark) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alyip98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * A Model stub that contains a single event."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * A Model stub that always accepts the event being added."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void commitCalendar() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            // called by {@code ScheduleCommand#execute()}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return new Calendar();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 261,
      "alyip98": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index lastStudentIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_STUDENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertExecutionSuccess(lastStudentIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_STUDENT_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 27,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            getTypicalCalendar(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 10,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_NUMBER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MATH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // multiple stuudent numbers - last student number accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_AMY + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // multiple faculties - last faculty accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB + FACULTY_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_MATH, VALID_TAG_PHYSICS)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB + FACULTY_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_AMY + FACULTY_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB + FACULTY_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // missing student number prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_STUDENT_NUMBER_BOB + EMAIL_DESC_BOB + FACULTY_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + VALID_EMAIL_BOB + FACULTY_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // missing faculty prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB + VALID_FACULTY_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_STUDENT_NUMBER_BOB + VALID_EMAIL_BOB + VALID_FACULTY_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB + FACULTY_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid student number"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_STUDENT_NUMBER_DESC + EMAIL_DESC_BOB + FACULTY_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + INVALID_EMAIL_DESC + FACULTY_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid faculty"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB + INVALID_FACULTY_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB + FACULTY_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_MATH, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB + INVALID_FACULTY_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 57,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BODY_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Body;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.EmailDraft;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.testutil.EmailDraftUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(new AddCommand(student), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void parseCommand_attendance() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        final Attendance attendance \u003d new Attendance(\"Some attendance.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        AttendanceCommand command \u003d (AttendanceCommand) parser.parseCommand(AttendanceCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + PREFIX_ATTENDANCE + attendance.value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(new AttendanceCommand(INDEX_FIRST_STUDENT, attendance), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_STUDENT), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_STUDENT, descriptor), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void parseCommand_email() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        thrown.expectMessage(ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Subject subject \u003d new Subject(VALID_SUBJECT_EMAIL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Body body \u003d new Body(VALID_BODY_EMAIL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EmailDraft emailDraft \u003d new EmailDraft(INDEX_FIRST_STUDENT, subject, body);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        EmailCommand command \u003d (EmailCommand) parser.parseCommand(EmailDraftUtil.getEmailCommand(emailDraft));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertEquals(new EmailCommand(emailDraft), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_STUDENT), command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 14,
      "yogtew": 5,
      "andrewtanJS": 21,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AttendanceCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yogtew"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yogtew"
        },
        "content": "public class AttendanceCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private AttendanceCommandParser parser \u003d new AttendanceCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    private final String nonEmptyAttendance \u003d \"Some attendance.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // have attendance"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_ATTENDANCE + nonEmptyAttendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AttendanceCommand expectedCommand \u003d new AttendanceCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yogtew"
        },
        "content": "                new Attendance(nonEmptyAttendance));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // no attendance"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedCommand \u003d new AttendanceCommand(INDEX_FIRST_STUDENT, new Attendance(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertParseFailure(parser, AttendanceCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertParseFailure(parser, AttendanceCommand.COMMAND_WORD + \" \" + nonEmptyAttendance, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yogtew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 39,
      "andrewtanJS": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_NUMBER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MATH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STUDENT_NUMBER_DESC,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS); // invalid student number"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FACULTY_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Faculty.MESSAGE_FACULTY_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid student number followed by valid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STUDENT_NUMBER_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // valid student number followed by invalid student number."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // The test case for invalid student number followed by valid student number"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, \"1\" + STUDENT_NUMBER_DESC_BOB + INVALID_STUDENT_NUMBER_DESC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_ADDRESS_AMY + VALID_STUDENT_NUMBER_AMY,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STUDENT_NUMBER_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + EMAIL_DESC_AMY + FACULTY_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withStudentNumber(VALID_STUDENT_NUMBER_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withFaculty(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withTags(VALID_TAG_PHYSICS, VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withStudentNumber(VALID_STUDENT_NUMBER_BOB)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // student number"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STUDENT_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withStudentNumber(VALID_STUDENT_NUMBER_AMY).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withFaculty(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STUDENT_NUMBER_DESC_AMY + FACULTY_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + TAG_DESC_FRIEND + STUDENT_NUMBER_DESC_AMY + FACULTY_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_BOB + FACULTY_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withStudentNumber(VALID_STUDENT_NUMBER_BOB)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_MATH, VALID_TAG_PHYSICS)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_STUDENT_NUMBER_DESC + STUDENT_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withStudentNumber(VALID_STUDENT_NUMBER_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_STUDENT_NUMBER_DESC + FACULTY_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withStudentNumber(VALID_STUDENT_NUMBER_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withFaculty(VALID_FACULTY_BOB).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 78,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EmailCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BODY_DESC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INDEX_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BODY_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INDEX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BODY_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.model.email.Body.MESSAGE_BODY_CONSTRAINTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.model.email.Subject.MESSAGE_SUBJECT_CONSTRAINTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Body;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.EmailDraft;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class EmailCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private EmailCommandParser parser \u003d new EmailCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void parse_validArgs_returnsEmailCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Subject subject \u003d new Subject(VALID_SUBJECT_EMAIL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Body body \u003d new Body(VALID_BODY_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        EmailDraft emailDraft \u003d new EmailDraft(INDEX_FIRST_STUDENT, subject, body);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertParseSuccess(parser, INDEX_DESC_AMY + SUBJECT_DESC + BODY_DESC, new EmailCommand(emailDraft));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String expectedSubjectMessage \u003d String.format(MESSAGE_SUBJECT_CONSTRAINTS, EmailCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String expectedIndexMessage \u003d String.format(MESSAGE_INVALID_INDEX, EmailCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String expectedBodyMessage \u003d String.format(MESSAGE_BODY_CONSTRAINTS, EmailCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //invalid index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertParseFailure(parser, INVALID_INDEX_DESC + SUBJECT_DESC + BODY_DESC, expectedIndexMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //invalid subject"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertParseFailure(parser, INDEX_DESC_AMY + INVALID_SUBJECT_DESC + BODY_DESC, expectedSubjectMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //invalid body"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertParseFailure(parser, INDEX_DESC_AMY + SUBJECT_DESC + INVALID_BODY_DESC, expectedBodyMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 50,
      "andrewtanJS": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.IsTaggedPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alyip98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public void parse_tag_valid() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alyip98"
        },
        "content": "                new FindCommand(new IsTaggedPredicate(Arrays.asList(new Tag(\"friends\"), new Tag(\"colleagues\"))));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        // multiple tags"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        assertParseSuccess(parser, \" t/friends t/colleagues\", expectedFindCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    public void parse_tag_invalid() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        // empty tag name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        assertParseFailure(parser, \" t/\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alyip98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alyip98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "alyip98": 15,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String INVALID_STUDENT_NUMBER \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String INVALID_FACULTY \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String VALID_STUDENT_NUMBER \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String VALID_FACULTY \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void parseStudentNumber_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStudentNumber((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void parseStudentNumber_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseStudentNumber(INVALID_STUDENT_NUMBER));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void parseStudentNumber_validValueWithoutWhitespace_returnsStudentNumber() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentNumber expectedStudentNumber \u003d new StudentNumber(VALID_STUDENT_NUMBER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudentNumber, ParserUtil.parseStudentNumber(VALID_STUDENT_NUMBER));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void parseStudentNumber_validValueWithWhitespace_returnsTrimmedStudentNumber() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String studentNumberWithWhitespace \u003d WHITESPACE + VALID_STUDENT_NUMBER + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentNumber expectedStudentNumber \u003d new StudentNumber(VALID_STUDENT_NUMBER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudentNumber, ParserUtil.parseStudentNumber(studentNumberWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFaculty((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFaculty(INVALID_FACULTY));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Faculty expectedFaculty \u003d new Faculty(VALID_FACULTY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedFaculty, ParserUtil.parseFaculty(VALID_FACULTY));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_FACULTY + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Faculty expectedFaculty \u003d new Faculty(VALID_FACULTY);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedFaculty, ParserUtil.parseFaculty(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 29,
      "-": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TIMES_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_CONSULTATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CONSULTATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_CONSULTATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_CONSULTATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_AND_END_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_CONSULTATION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_CONSULTATION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_TUTORIAL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_CONSULTATION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_TUTORIAL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CONSULTATION;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Event expectedEvent \u003d new EventBuilder(CONSULTATION).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_CONSULTATION + DATE_DESC_CONSULTATION"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + START_TIME_DESC_CONSULTATION + END_TIME_DESC_CONSULTATION + DESCRIPTION_DESC_CONSULTATION,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new ScheduleCommand(expectedEvent));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // multiple event names - last event name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_TUTORIAL + EVENT_NAME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_CONSULTATION + START_TIME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_CONSULTATION + DESCRIPTION_DESC_CONSULTATION,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new ScheduleCommand(expectedEvent));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL + DATE_DESC_CONSULTATION + START_TIME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_CONSULTATION + DESCRIPTION_DESC_CONSULTATION,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new ScheduleCommand(expectedEvent));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // multiple start times - last start time accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_CONSULTATION + START_TIME_DESC_TUTORIAL + START_TIME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_CONSULTATION + DESCRIPTION_DESC_CONSULTATION,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new ScheduleCommand(expectedEvent));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // multiple end times - last end time accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_CONSULTATION + START_TIME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL + END_TIME_DESC_CONSULTATION + DESCRIPTION_DESC_CONSULTATION,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new ScheduleCommand(expectedEvent));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_CONSULTATION + START_TIME_DESC_CONSULTATION"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_CONSULTATION + DESCRIPTION_DESC_TUTORIAL + DESCRIPTION_DESC_CONSULTATION,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new ScheduleCommand(expectedEvent));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // missing event name prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_EVENT_NAME_TUTORIAL"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DESCRIPTION_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_DATE_TUTORIAL"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DESCRIPTION_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // missing start time prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_START_TIME_CONSULTATION"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DESCRIPTION_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // missing end time prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_END_TIME_TUTORIAL"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DESCRIPTION_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_DESCRIPTION_TUTORIAL,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_EVENT_NAME_TUTORIAL"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_DATE_TUTORIAL"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_START_TIME_TUTORIAL"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_END_TIME_CONSULTATION"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + VALID_DESCRIPTION_TUTORIAL,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid event name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                INVALID_EVENT_NAME_DESC"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DESCRIPTION_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EventName.EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DESCRIPTION_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Date.DATE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_START_TIME_DESC"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DESCRIPTION_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                StartTime.START_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_END_TIME_DESC"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DESCRIPTION_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EndTime.END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Description.DESCRIPTION_STRING_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                INVALID_EVENT_NAME_DESC"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + END_TIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EventName.EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                PREAMBLE_NON_EMPTY + EVENT_NAME_DESC_CONSULTATION + DATE_DESC_CONSULTATION"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + START_TIME_DESC_CONSULTATION + END_TIME_DESC_CONSULTATION + DESCRIPTION_DESC_CONSULTATION,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void parse_invalidStartEndTimes_failure() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // start time after the end time"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                EVENT_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + INVALID_START_AND_END_DESC"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + DESCRIPTION_DESC_TUTORIAL, MESSAGE_INVALID_TIMES_FORMAT);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 219
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getStudentList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_PHYSICS)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newStudents);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(DuplicateStudentException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        addressBook.hasStudent(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void hasStudent_studentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(addressBook.hasStudent(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void hasStudent_studentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        addressBook.addStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(addressBook.hasStudent(ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        addressBook.addStudent(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_PHYSICS)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(addressBook.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        addressBook.getStudentList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * A stub ReadOnlyAddressBook whose students list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AddressBookStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 33,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CONSULTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.CalendarBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        modelManager.hasStudent(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void hasStudent_studentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void hasStudent_studentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        modelManager.getFilteredStudentList().remove(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Calendar calendar \u003d new CalendarBuilder().withEvent(TUTORIAL).withEvent(CONSULTATION).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Calendar differentCalendar \u003d new Calendar();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, calendar, userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, calendar, userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentCalendar, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, calendar, userPrefs)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, calendar, differentUserPrefs)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 26,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withStudent(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withStudent(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withStudent(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 6,
      "-": 292
    }
  },
  {
    "path": "src/test/java/seedu/address/model/email/BodyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class BodyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Body(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String invalidBody \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Body(invalidBody));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void isValidBody() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //null body"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Body.isValidBody(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //invalid body"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertFalse(Body.isValidBody(\"\")); //empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertFalse(Body.isValidBody(\" \")); //spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //valid body"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"^\")); // non-alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/email/EmailDraftTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class EmailDraftTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void isValidEmailDraft() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/email/SubjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class SubjectTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Subject(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        String invalidSubject \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Subject(invalidSubject));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public void isValidSubject() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //null body"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Body.isValidBody(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //invalid body"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertFalse(Subject.isValidSubject(\"\")); //empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertFalse(Subject.isValidSubject(\" \")); //spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        //valid body"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Subject.isValidSubject(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Subject.isValidSubject(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Subject.isValidSubject(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Subject.isValidSubject(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"^\")); // non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        assertTrue(Body.isValidBody(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "preethi-d": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // null Date number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid Date numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Date.isValidDate(\"12\")); // not a date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Date.isValidDate(\"Date\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Date.isValidDate(\"22-MM-2013\")); // alphabets used"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Date.isValidDate(\"22 02 2000\")); // spaces as delimiter"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-12-1599\")); // Too early"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Date.isValidDate(\"29-02-2011\")); // impossible date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // valid Date numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Date.isValidDate(\"01-01-1600\")); // Earliest possible date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-9999\")); // Latest possible date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-2021\")); // valid date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Date.isValidDate(\"1-12-2018\")); // valid date, single digit day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Date.isValidDate(\"22-1-2018\")); // valid date, single digit month"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Date.isValidDate(\"1-1-2018\")); // valid date, single digit day and month"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-02-2016\")); // valid date, leap year"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Description.isValidDescription(\"25th Anniversary at Marina Bay Sands\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Description.isValidDescription(\"TODO: Prepare coursework\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EndTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EndTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EndTime(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_invalidEndTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String invalidEndTime \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EndTime(invalidEndTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void isValidEndTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // null end time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EndTime.isValidEndTime(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(EndTime.isValidEndTime(\"25:00\")); // invalid time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(EndTime.isValidEndTime(\"1111\")); // no colon"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // valid end time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(EndTime.isValidEndTime(\"23:59\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(EndTime.isValidEndTime(\"00:00\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(EndTime.isValidEndTime(\"12:30\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EventNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_invalidEventName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String invalidEventName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidEventName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void isValidEventName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // null event name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventName.isValidEventName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid event name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(EventName.isValidEventName(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(EventName.isValidEventName(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // valid event name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"Bob\u0027s Birthday Party\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"Office Dinner Function\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"-\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/StartTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StartTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new StartTime(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_invalidStartTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String invalidStartTime \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartTime(invalidStartTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void isValidStartTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // null start time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StartTime.isValidStartTime(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(StartTime.isValidStartTime(\"25:00\")); // invalid time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(StartTime.isValidStartTime(\"1111\")); // no colon"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // valid start time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(StartTime.isValidStartTime(\"23:59\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(StartTime.isValidStartTime(\"00:00\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(StartTime.isValidStartTime(\"12:30\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Faculty(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Faculty(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Faculty.isValidFaculty(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/AttendanceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yogtew"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Attendance attendance \u003d new Attendance(\"present\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // if its the same object, return true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertTrue(attendance.equals(attendance));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // if it has the same value, return true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Attendance anotherAttd \u003d new Attendance(attendance.value);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertTrue(attendance.equals(anotherAttd));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // if it is of different types, return false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertFalse(attendance.equals(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // if it is null, return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertFalse(attendance.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // if it is different attendance, return false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Attendance diffAttd \u003d new Attendance(\"absent\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertFalse(attendance.equals(diffAttd));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    public void isValidAttendance() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // null attendance"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Attendance.isValidAttendance(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // invalid attendance"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        // valid attendance"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alyip98"
        },
        "content": "        // assertTrue(Attendance.isValidAttendance(\" \")); // spaces only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"Present\")); // one word"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yogtew"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"1\")); // one character"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yogtew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yogtew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 45,
      "andrewtanJS": 1,
      "alyip98": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // Keywords match student number, email and faculty, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withStudentNumber(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withEmail(\"alice@email.com\").withFaculty(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 12,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentNumberTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentNumberTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new StudentNumber(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void constructor_invalidStudentNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String invalidStudentNumber \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StudentNumber(invalidStudentNumber));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void isValidStudentNumber() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // null student number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StudentNumber.isValidStudentNumber(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // invalid student numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(StudentNumber.isValidStudentNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(StudentNumber.isValidStudentNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(StudentNumber.isValidStudentNumber(\"student number\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(StudentNumber.isValidStudentNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(StudentNumber.isValidStudentNumber(\"$AA\")); // non alphanumeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(StudentNumber.isValidStudentNumber(\"$**AA\")); // non alphanumeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // valid student numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(StudentNumber.isValidStudentNumber(\"9\")); // only one digit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(StudentNumber.isValidStudentNumber(\"A\")); // only one letter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(StudentNumber.isValidStudentNumber(\"93121FD534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(StudentNumber.isValidStudentNumber(\"A124293842033123\")); // long student numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        student.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student number and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withStudentNumber(VALID_STUDENT_NUMBER_BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // same name, same student number, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withFaculty(VALID_FACULTY_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withTags(VALID_TAG_PHYSICS).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withStudentNumber(VALID_STUDENT_NUMBER_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withFaculty(VALID_FACULTY_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withTags(VALID_TAG_PHYSICS).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // same name, same student number, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_PHYSICS).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student number -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withStudentNumber(VALID_STUDENT_NUMBER_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different faculty -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_PHYSICS).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 39,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/UniqueStudentListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_PHYSICS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(DuplicateStudentException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudent(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(StudentNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_PHYSICS)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(DuplicateStudentException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(StudentNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudents((UniqueStudentList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudents((List\u003cStudent\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(DuplicateStudentException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.setStudents(listWithDuplicateStudents);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uniqueStudentList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlCalendarStorage calendarStorage \u003d new XmlCalendarStorage(getTempFilePath(\"cal\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, calendarStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                                             new XmlCalendarStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    class XmlCalendarStorageExceptionThrowingStub extends XmlCalendarStorage {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public XmlCalendarStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        public void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 17,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedStudentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.storage.XmlAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class XmlAdaptedStudentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String INVALID_STUDENT_NUMBER \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String VALID_STUDENT_NUMBER \u003d BENSON.getStudentNumber().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getFaculty().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new XmlAdaptedStudent(INVALID_NAME, VALID_STUDENT_NUMBER, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(null, VALID_STUDENT_NUMBER,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void toModelType_invalidStudentNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new XmlAdaptedStudent(VALID_NAME, INVALID_STUDENT_NUMBER, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void toModelType_nullStudentNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StudentNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new XmlAdaptedStudent(VALID_NAME, VALID_STUDENT_NUMBER, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_STUDENT_NUMBER, null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new XmlAdaptedStudent(VALID_NAME, VALID_STUDENT_NUMBER, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d Faculty.MESSAGE_FACULTY_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_STUDENT_NUMBER,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                new XmlAdaptedStudent(VALID_NAME, VALID_STUDENT_NUMBER, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 46,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void readAddressBook_invalidStudentAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        readAddressBook(\"invalidStudentAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void readAddressBook_invalidAndValidStudentAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        readAddressBook(\"invalidAndValidStudentAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 11,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        AddressBook typicalStudentsAddressBook \u003d TypicalStudents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(addressBookFromFile, typicalStudentsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 13,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Adds a new {@code Student} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public AddressBookBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        addressBook.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CalendarBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A utility class to help with building Calendar objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " *     {@code Calendar cal \u003d new CalendarBuilder().withStudent(\"Consultation\", \"Tutorial\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class CalendarBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public CalendarBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public CalendarBuilder(Calendar calendar) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.calendar \u003d calendar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Adds a new {@code Event} to the {@code Calendar} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public CalendarBuilder withEvent(Event event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        calendar.addEvent(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Calendar build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor \u003d new EditCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setStudentNumber(student.getStudentNumber());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setFaculty(student.getFaculty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setAttendance(student.getAttendance());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code StudentNumber} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptorBuilder withStudentNumber(String studentNumber) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setStudentNumber(new StudentNumber(studentNumber));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Faculty} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptorBuilder withFaculty(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setFaculty(new Faculty(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EmailDraftUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "import seedu.address.model.email.EmailDraft;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " * A utility class for EmailDraft."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "preethi-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "public class EmailDraftUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Returns an email command string for adding the {@code email}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    public static String getEmailCommand(EmailDraft emailDraft) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return EmailCommand.COMMAND_WORD + \" \" + getEmailDetails(emailDraft);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     * Returns the part of command string for the given {@code email}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    private static String getEmailDetails(EmailDraft emailDraft) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        sb.append(PREFIX_INDEX + emailDraft.getIndex().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        sb.append(PREFIX_SUBJECT + emailDraft.getSubject().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        sb.append(PREFIX_BODY + emailDraft.getBody().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "preethi-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_EVENT_NAME \u003d \"CS2103 Tutorial\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"24-10-2018\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"13:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"14:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Mid v1.3\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private StartTime startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private EndTime endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_EVENT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        startTime \u003d new StartTime(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        endTime \u003d new EndTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        eventName \u003d eventToCopy.getEventName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        date \u003d eventToCopy.getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        startTime \u003d eventToCopy.getStartTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        endTime \u003d eventToCopy.getEndTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code EventName} of the {@code Event} that we are building"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventBuilder withEventName(String eventName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.eventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Date} of the {@code Event} that we are building"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventBuilder withDate(String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code StartTime} of the {@code Event} that we are building"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.startTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code EndTime} of the {@code Event} that we are building"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.endTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Event(eventName, date, startTime, endTime, description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_STUDENT_NUMBER \u003d \"A85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final String DEFAULT_ATTENDANCE \u003d \"Absent\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private StudentNumber studentNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Faculty faculty;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentNumber \u003d new StudentNumber(DEFAULT_STUDENT_NUMBER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        faculty \u003d new Faculty(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        attendance \u003d new Attendance(DEFAULT_ATTENDANCE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentNumber \u003d studentToCopy.getStudentNumber();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        faculty \u003d studentToCopy.getFaculty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        attendance \u003d studentToCopy.getAttendance();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Faculty} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentBuilder withFaculty(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.faculty \u003d new Faculty(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Attendance} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentBuilder withAttendance(String attendance) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.attendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code StudentNumber} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentBuilder withStudentNumber(String studentNumber) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.studentNumber \u003d new StudentNumber(studentNumber);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new Student(name, studentNumber, email, faculty, attendance, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        sb.append(PREFIX_STUDENT_NUMBER + student.getStudentNumber().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        sb.append(PREFIX_FACULTY + student.getFaculty().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditCommand.EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.getStudentNumber().ifPresent(studentNumber -\u003e sb.append(PREFIX_STUDENT_NUMBER)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .append(studentNumber.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        descriptor.getFaculty().ifPresent(address -\u003e sb.append(PREFIX_FACULTY).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_CONSULTATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CONSULTATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_CONSULTATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_CONSULTATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_CONSULTATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A utility class containing a list o {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Event BIRTHDAY \u003d new EventBuilder().withEventName(\"Birthday\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withDate(\"12-12-2018\").withStartTime(\"12:00\").withEndTime(\"15:00\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withDescription(\"Bring candles\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Event INTERVIEW \u003d new EventBuilder().withEventName(\"Interview\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withDate(\"15-10-2018\").withStartTime(\"15:00\").withEndTime(\"15:30\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withDescription(\"At Google HQ\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Event CONSULTATION \u003d new EventBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEventName(VALID_EVENT_NAME_CONSULTATION)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withDate(VALID_DATE_CONSULTATION)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withStartTime(VALID_START_TIME_CONSULTATION)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEndTime(VALID_END_TIME_CONSULTATION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CONSULTATION)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Event TUTORIAL \u003d new EventBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEventName(VALID_EVENT_NAME_TUTORIAL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withDate(VALID_DATE_TUTORIAL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withStartTime(VALID_START_TIME_TUTORIAL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEndTime(VALID_END_TIME_TUTORIAL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns a {@code Calendar} with all the typical events."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static Calendar getTypicalCalendar() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Calendar cal \u003d new Calendar();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            cal.addEvent(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return cal;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BIRTHDAY, INTERVIEW, CONSULTATION, TUTORIAL));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Index INDEX_FIRST_STUDENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Index INDEX_SECOND_STUDENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Index INDEX_THIRD_STUDENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yogtew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MATH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yogtew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withFaculty(\"School of Computing\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withStudentNumber(\"A94351253\").withAttendance(\"0\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withTags(\"computerscience\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withFaculty(\"School of Computing\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(\"johnd@example.com\").withStudentNumber(\"U98765432\").withAttendance(\"0\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withTags(\"informationsystems\", \"student\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\").withStudentNumber(\"A95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(\"heinz@example.com\").withFaculty(\"Faculty of Engineering\").withAttendance(\"0\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\").withStudentNumber(\"A87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withFaculty(\"School of Computing\").withTags(\"businessanalytics\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAttendance(\"0\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\").withStudentNumber(\"A9482224\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(\"werner@example.com\").withFaculty(\"School of Computing\").withAttendance(\"0\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withStudentNumber(\"A9482427\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(\"lydia@example.com\").withFaculty(\"Faculty of Engineering\").withAttendance(\"0\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withStudentNumber(\"A9482442\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(\"anna@example.com\").withFaculty(\"School of Computing\").withAttendance(\"0\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withStudentNumber(\"U8482424\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(\"stefan@example.com\").withFaculty(\"Faculty of Science\").withAttendance(\"0\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withStudentNumber(\"A8482131\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(\"hans@example.com\").withFaculty(\"Faculty of Science\").withAttendance(\"0\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withStudentNumber(VALID_STUDENT_NUMBER_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withFaculty(VALID_ADDRESS_AMY).withAttendance(VALID_ATTENDANCE_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withTags(VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withStudentNumber(VALID_STUDENT_NUMBER_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withFaculty(VALID_FACULTY_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            .withAttendance(VALID_ATTENDANCE_BOB).withTags(VALID_TAG_PHYSICS, VALID_TAG_MATH)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical students."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yogtew": 6,
      "andrewtanJS": 44,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StudentCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStudent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import guitests.guihandles.StudentCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentWithNoTags \u003d new StudentBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentCard studentCard \u003d new StudentCard(studentWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uiPartRule.setUiPart(studentCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCardDisplay(studentCard, studentWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentWithTags \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentCard \u003d new StudentCard(studentWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uiPartRule.setUiPart(studentCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCardDisplay(studentCard, studentWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentCard studentCard \u003d new StudentCard(student, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // same student, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentCard copy \u003d new StudentCard(student, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(studentCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(studentCard.equals(studentCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(studentCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(studentCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // different student, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student differentStudent \u003d new StudentBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(studentCard.equals(new StudentCard(differentStudent, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // same student, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(studentCard.equals(new StudentCard(student, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Asserts that {@code studentCard} displays the details of {@code expectedStudent} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void assertCardDisplay(StudentCard studentCard, Student expectedStudent, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentCardHandle studentCardHandle \u003d new StudentCardHandle(studentCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", studentCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // verify student details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCardDisplaysStudent(expectedStudent, studentCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StudentListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStudent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import guitests.guihandles.StudentCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import guitests.guihandles.StudentListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "public class StudentListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final ObservableList\u003cStudent\u003e TYPICAL_STUDENTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            FXCollections.observableList(getTypicalStudents());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private StudentListPanelHandle studentListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        initUi(TYPICAL_STUDENTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_STUDENTS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            studentListPanelHandle.navigateToCard(TYPICAL_STUDENTS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            Student expectedStudent \u003d TYPICAL_STUDENTS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            StudentCardHandle actualCard \u003d studentListPanelHandle.getStudentCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            assertCardDisplaysStudent(expectedStudent, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        initUi(TYPICAL_STUDENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentCardHandle expectedStudent \u003d studentListPanelHandle"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .getStudentCardHandle(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentCardHandle selectedStudent \u003d studentListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCardEquals(expectedStudent, selectedStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Verifies that creating and deleting large number of students in {@code StudentListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        ObservableList\u003cStudent\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }, \"Creation and deletion of student cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns a list of students containing {@code studentCount} students that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code StudentListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private ObservableList\u003cStudent\u003e createBackingList(int studentCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithStudents(studentCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getStudentList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns a .xml file containing {@code studentCount} students. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Path createXmlFileWithStudents(int studentCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (int i \u003d 0; i \u003c studentCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            builder.append(\"\u003cstudents\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            builder.append(\"\u003cstudentNumber\u003e000\u003c/studentNumber\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            builder.append(\"\u003cfaculty\u003ea\u003c/faculty\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            builder.append(\"\u003cattendance\u003e\u003c/attendance\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            builder.append(\"\u003c/students\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Path manyStudentsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyStudents.xml\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        FileUtil.createFile(manyStudentsFile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        FileUtil.writeToFile(manyStudentsFile, builder.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        manyStudentsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return manyStudentsFile;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Initializes {@code studentListPanelHandle} with a {@code StudentListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code StudentListPanel}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void initUi(ObservableList\u003cStudent\u003e backingList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        StudentListPanel studentListPanel \u003d new StudentListPanel(backingList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        uiPartRule.setUiPart(studentListPanel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentListPanelHandle \u003d new StudentListPanelHandle(getChildNode(studentListPanel.getRoot(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                StudentListPanelHandle.STUDENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import guitests.guihandles.StudentCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import guitests.guihandles.StudentListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void assertCardEquals(StudentCardHandle expectedCard, StudentCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedCard.getFaculty(), actualCard.getFaculty());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedCard.getStudentNumber(), actualCard.getStudentNumber());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedStudent}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void assertCardDisplaysStudent(Student expectedStudent, StudentCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent.getStudentNumber().value, actualCard.getStudentNumber());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent.getFaculty().value, actualCard.getFaculty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent.getAttendance().value.toString(), actualCard.getAttendance());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedStudent.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Asserts that the list in {@code studentListPanelHandle} displays the details of {@code students} correctly and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void assertListMatching(StudentListPanelHandle studentListPanelHandle, Student... students) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        for (int i \u003d 0; i \u003c students.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            studentListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "            assertCardDisplaysStudent(students[i], studentListPanelHandle.getStudentCardHandle(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Asserts that the list in {@code studentListPanelHandle} displays the details of {@code students} correctly and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void assertListMatching(StudentListPanelHandle studentListPanelHandle, List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertListMatching(studentListPanelHandle, students.toArray(new Student[0]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Asserts the size of the list in {@code studentListPanelHandle"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * } equals to {@code size}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void assertListSize(StudentListPanelHandle studentListPanelHandle, int size) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        int numberOfStudents \u003d studentListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(size, numberOfStudents);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 27,
      "-": 49
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_NUMBER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a student without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student toAdd \u003d AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + STUDENT_NUMBER_DESC_AMY + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + FACULTY_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a student with all fields same as another student in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        toAdd \u003d new StudentBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_AMY + FACULTY_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a student with all fields same as another student in the address book"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "         * except student number and email -\u003e added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        toAdd \u003d new StudentBuilder(AMY).withStudentNumber(VALID_STUDENT_NUMBER_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteAllStudents();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a student with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + STUDENT_NUMBER_DESC_BOB + FACULTY_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a student, missing tags -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: filters the student list before adding -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* ------------------------ Perform add operation while a student card is selected -------------------------- */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: selects first card in the student list, add a student -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        selectStudent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a duplicate student -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a duplicate student except with different student number -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        toAdd \u003d new StudentBuilder(HOON).withStudentNumber(VALID_STUDENT_NUMBER_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a duplicate student except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        toAdd \u003d new StudentBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a duplicate student except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        toAdd \u003d new StudentBuilder(HOON).withFaculty(VALID_FACULTY_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: add a duplicate student except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_AMY + FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: missing student number -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + STUDENT_NUMBER_DESC_AMY + FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d \"adds \" + StudentUtil.getStudentDetails(toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_AMY + FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: invalid student number -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + INVALID_STUDENT_NUMBER_DESC + EMAIL_DESC_AMY + FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_AMY + INVALID_EMAIL_DESC + FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_AMY + INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_AMY + FACULTY_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void assertCommandSuccess(Student toAdd) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(StudentUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Student)}. Executes {@code command}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Student)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void assertCommandSuccess(String command, Student toAdd) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.addStudent(toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Student)} except asserts that"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 2. {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Student)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 91,
      "-": 161
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import guitests.guihandles.StudentListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return TypicalStudents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public StudentListPanelHandle getStudentListPanel() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return mainWindowHandle.getStudentListPanel();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Displays all students in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    protected void showAllStudents() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(getModel().getAddressBook().getStudentList().size(), getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Displays all students with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    protected void showStudentsWithName(String keyword) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(getModel().getFilteredStudentList().size() \u003c getModel().getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Selects the student at {@code index} of the displayed list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    protected void selectStudent(Index index) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(index.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Deletes all students in the address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    protected void deleteAllStudents() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same student objects as {@code expectedModel}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * and the student list panel displays the students in the model correctly."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertListMatching(getStudentListPanel(), expectedModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code StudentListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        getStudentListPanel().rememberSelectedStudentCard();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * of the previously selected student."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(getStudentListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the student in the student list panel at"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @see StudentListPanelHandle#isSelectedStudentCardChanged()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        getStudentListPanel().navigateToCard(getStudentListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the student list panel remain unchanged."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @see StudentListPanelHandle#isSelectedStudentCardChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(getStudentListPanel().isSelectedStudentCardChanged());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 32,
      "-": 230
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: selects first card in student list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        selectStudent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: filters the student list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "-": 96
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TestUtil.getStudent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: delete the first student in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_STUDENT.getOneBased() + \"      \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student deletedStudent \u003d removeStudent(expectedModel, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: delete the last student in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index lastStudentIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(lastStudentIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: undo deleting the last student in the list -\u003e last student restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: redo deleting the last student in the list -\u003e last student deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        removeStudent(modelBeforeDeletingLast, lastStudentIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: delete the middle student in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index middleStudentIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(middleStudentIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: filtered student list, delete index within bounds of address book and student list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: filtered student list, delete index within bounds of address book but out of bounds of student list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* --------------------- Performing delete operation while a student card is selected ----------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: delete the selected student -\u003e student list panel selects the student before the deleted student */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showAllStudents();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        selectStudent(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deletedStudent \u003d removeStudent(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                getModel().getAddressBook().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Removes the {@code Student} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @return the removed student"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private Student removeStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student targetStudent \u003d getStudent(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.deleteStudent(targetStudent);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return targetStudent;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Deletes the student at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student deletedStudent \u003d removeStudent(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                expectedResultMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 46,
      "-": 148
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_NUMBER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_NUMBER_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PHYSICS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Faculty;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.StudentNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + FACULTY_DESC_BOB + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_PHYSICS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: undo editing the last student in the list -\u003e last student restored */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: redo editing the last student in the list -\u003e last student edited again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateStudent("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                getModel().getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()), editedStudent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: edit a student with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(getModel().getAddressBook().getStudentList().contains(BOB));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        index \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertNotEquals(getModel().getFilteredStudentList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedStudent \u003d new StudentBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values but with"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        different student number and email"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        index \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedStudent \u003d new StudentBuilder(BOB).withStudentNumber(VALID_STUDENT_NUMBER_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedStudent \u003d new StudentBuilder(studentToEdit).withTags().build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: filtered student list, edit index within bounds of address book and student list -\u003e edited */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        editedStudent \u003d new StudentBuilder(studentToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: filtered student list, edit index within bounds of address book but out of bounds of student list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* --------------------- Performing edit operation while a student card is selected ------------------------- */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: selects first card in the student list, edit a student -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showAllStudents();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        selectStudent(index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + STUDENT_NUMBER_DESC_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        // browser\u0027s url is updated to reflect the new student\u0027s name"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: invalid student number -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_STUDENT_NUMBER_DESC, StudentNumber.MESSAGE_STUDENT_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_FACULTY_DESC, Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        executeCommand(StudentUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(getModel().getAddressBook().getStudentList().contains(BOB));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(getModel().getFilteredStudentList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + EMAIL_DESC_BOB + FACULTY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + EMAIL_DESC_BOB + FACULTY_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + STUDENT_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + EMAIL_DESC_BOB + FACULTY_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values but with"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "         different student number -\u003e rejected */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + STUDENT_NUMBER_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                + FACULTY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Student, Index)} except that"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Student, Index)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedStudent, null);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the student at index {@code toEdit} being"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * updated to values specified {@code editedStudent}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateStudent(expectedModel.getFilteredStudentList().get(toEdit.getZeroBased()), editedStudent);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 129,
      "-": 182
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find multiple students in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "         * -\u003e 2 students found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "preethi-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: repeat previous find command where student list is displaying the students we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "         * -\u003e 2 students found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find student where student list is not displaying the student we are finding -\u003e 1 student found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find multiple students in address book, 2 keywords -\u003e 2 students found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find multiple students in address book, 2 keywords in reversed order -\u003e 2 students found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find multiple students in address book, 2 keywords with 1 repeat -\u003e 2 students found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find multiple students in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "         * -\u003e 2 students found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find same students in address book after deleting 1 of them -\u003e 1 student found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(getModel().getAddressBook().getStudentList().contains(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find student in address book, keyword is same as name but of different case -\u003e 1 student found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find student in address book, keyword is substring of name -\u003e 0 students found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find student in address book, name is substring of keyword -\u003e 0 students found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find student not in address book -\u003e 0 students found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find student number of student in address book -\u003e 0 students found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getStudentNumber().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find address of student in address book -\u003e 0 students found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getFaculty().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find email of student in address book -\u003e 0 students found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find tags of student in address book -\u003e 0 students found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find while a student is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showAllStudents();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        selectStudent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertFalse(getStudentListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: find student in empty address book -\u003e 0 students found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteAllStudents();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * box displays {@code Messages#MESSAGE_STUDENTS_LISTED_OVERVIEW} with the number of students in the filtered list,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                MESSAGE_STUDENTS_LISTED_OVERVIEW, expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "preethi-d": 1,
      "andrewtanJS": 35,
      "-": 160
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        getStudentListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 5,
      "-": 96
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static final Predicate\u003cStudent\u003e PREDICATE_MATCHING_NO_STUDENTS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cStudent\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Optional\u003cPredicate\u003cStudent\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        model.updateFilteredStudentList(predicate.orElse(PREDICATE_MATCHING_NO_STUDENTS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    public static void setFilteredList(Model model, Student... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Student} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "    private static Predicate\u003cStudent\u003e getPredicateMatching(Student other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        return student -\u003e student.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Student[] expectedList \u003d SampleDataUtil.getSampleStudents();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertListMatching(getStudentListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 3,
      "-": 48
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_STUDENT_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: select the first card in the student list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: select the last card in the student list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        Index studentCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + studentCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandSuccess(command, studentCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: select the middle card in the student list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: filtered student list, select index within bounds of address book but out of bounds of student list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        /* Case: filtered student list, select index within bounds of address book and student list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        deleteAllStudents();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected student.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "                MESSAGE_SELECT_STUDENT_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getStudentListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewtanJS"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewtanJS": 28,
      "-": 126
    }
  }
]
