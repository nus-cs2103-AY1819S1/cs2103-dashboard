[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d iScheduler Xs Max"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-F11-1/main[image:https://api.travis-ci.org/CS2103-AY1819S1-F11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "https://ci.appveyor.com/project/HEARTOFAL1ON/main[image:https://ci.appveyor.com/api/projects/status/pxjdbvbr3dap7noa?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-F11-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-F11-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "https://www.codacy.com/app/HEARTOFAL1ON/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-F11-1/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/0a72522d6b2d4e7a92f11b1714a02391[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/logo.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "image::images/logo.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d Showcase"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*A desktop Event Scheduler application.*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* *CLI (Command Line Interface)* interactions with modern *GUI* brought to you by us!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* *Always connected.* Sync it with your Google account!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* *Cross platform.* You can run it on both *Windows* AND *Mac*!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *Responsive interface.* We ensure your smooth experience."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Latest Features"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Supports repeating events."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Supports tag management."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* Syncs with Google Calendar."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Pop-up alert."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* This application was morphed from the CS2103 AddressBook-Level4 project created by https://github.com/se-edu/[SE-EDU initiative]."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], http://natty.joestelmach.com/[natty]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 2,
      "ChengYuuu": 4,
      "YezhongZ": 2,
      "-": 39,
      "HEARTOFAL1ON": 9
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"HEARTOFAL1ON\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"DANIE...E YAO\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "      \"authorNames\": [\"HEARTOFAL1ON\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"ChengYuuu\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"GOH C...NG YU\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "      \"authorNames\": [\"ChengYuuu\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"Hexinyiyi\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"HE ...NYI\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "      \"authorNames\": [\"He Xinyi\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"jiacheng-panda\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"WU JI...CHENG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "      \"authorNames\": [\"jiacheng-panda\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"YezhongZ\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"ZHANG...ZHONG\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "      \"authorNames\": [\"YezhongZ\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YezhongZ": 1,
      "-": 21,
      "HEARTOFAL1ON": 8
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "mainClassName \u003d \u0027seedu.scheduler.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    implementation \u0027org.slf4j:slf4j-log4j12:1.7.25\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    implementation \u0027com.google.api-client:google-api-client:1.23.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    implementation \u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    implementation \u0027com.google.apis:google-api-services-calendar:v3-rev305-1.23.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    implementation group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.11\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    archiveName \u003d \u0027iScheduler.jar\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            test.include \u0027seedu/scheduler/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            test.include \u0027seedu/scheduler/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            test.exclude \u0027seedu/scheduler/ui/**\u0027"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u0027site-name\u0027: \u0027iScheduler Xs Max\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-F11-1/main\u0027,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 5,
      "YezhongZ": 7,
      "-": 235
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "iScheduler Xs Max was developed by the https://github.com/CS2103-AY1819S1-F11-1[F11-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "It was developed with reference to the work of the https://github.com/se-edu/[se-edu] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d RAJAPAKSE, Damith Chatura"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "image::damithc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d Zhang Yezhong"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "image::yezhongz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "{empty}[http://github.com/YeZhongZ[github]] [\u003c\u003cyezhongz#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Responsibilities: Code quality, Logic, IntelliJ expert"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d NG, Daniel, S. Y."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "image::heartofal1on.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "{empty}[http://github.com/HEARTOFAL1ON[github]] [\u003c\u003cheartofal1on#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Roles: Deliverables and deadlines + Scheduling and tracking +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Responsibilities: Testing, Logic and IntelliJ expert"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Wu Jiacheng"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::jiacheng-panda.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/jiacheng-panda[github]] [\u003c\u003cjiacheng-panda#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Documentation, Markdown, Component Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d Goh Cheng Yu"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "image::chengyuuu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "{empty}[https://github.com/chengyuuu[github]] [\u003c\u003cchengyuuu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d\u003d He Xinyi"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "image::hexinyiyi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "{empty}[https://github.com/hexinyiyi[github]] [\u003c\u003chexinyiyi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Role: Developer + Testing +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 6,
      "ChengYuuu": 9,
      "YezhongZ": 3,
      "-": 41,
      "HEARTOFAL1ON": 6
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-F11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "HEARTOFAL1ON": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d iScheduler Xs Max - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F11-1/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "By: `CS2103-AY1819S1-F11-1`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "IntelliJ by default has Gradle and JavaFX plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/scheduler/storage/XmlAdaptedEvent.java[`XmlAdaptedEvent.java`] and link:{repoURL}/src/main/java/seedu/scheduler/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/scheduler/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/scheduler/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ". Run the `seedu.scheduler.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `CS2103-AY1819S1-F11-1/main` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S1-F11-1/main`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/scheduler/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* At app launch: Initializing the components in the correct sequence, and connecting them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* At shut down: Shutting down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* `EventsCenter`: This class (written using https://github.com/Google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter`: Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "image::SDforDeleteEvent.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Note how the `Model` simply raises a `SchedulerChangedEvent` when the Scheduler data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "image::SDforDeleteEventEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/scheduler/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `EventListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/scheduler/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "link:{repoURL}/src/main/java/seedu/scheduler/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ".  `Logic` uses the `SchedulerParser` class to parse the user command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding an event) and/or raise events."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "image::DeleteEventSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/scheduler/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* stores the Scheduler data."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Scheduler`, which `Event` can reference. This would allow `Scheduler` to only require one `Tag` object per unique `Tag`, instead of each `Event` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/scheduler/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* can save `UserPref` objects in JSON format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* can save the Scheduler data in XML format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Classes used by multiple components are in the `seedu.scheduler.commons` package."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedScheduler`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "It extends `Scheduler` with an undo/redo history, stored internally as a `schedulerStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* `VersionedScheduler#commit()` -- Saves the current scheduler state in its history."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* `VersionedScheduler#undo()` -- Restores the previous scheduler state from its history."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* `VersionedScheduler#redo()` -- Restores a previously undone scheduler state from its history."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitScheduler()`, `Model#undoScheduler()` and `Model#redoScheduler()` respectively."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedScheduler` will be initialized with the initial scheduler state, and the `currentStatePointer` pointing to that single scheduler state."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th event in the scheduler. The `delete` command calls `Model#commitScheduler()`, causing the modified state of the scheduler after the `delete 5` command executes to be saved in the `schedulerStateList`, and the `currentStatePointer` is shifted to the newly inserted scheduler state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Step 3. The user executes `add n/Holiday ...` to add a new event. The `add` command also calls `Model#commitscheduler()`, causing another modified scheduler state to be saved into the `schedulerStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "If a command fails its execution, it will not call `Model#commitScheduler()`, so the scheduler state will not be saved into the `schedulerStateList`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Step 4. The user now decides that adding the event was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoScheduler()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous scheduler state, and restores the scheduler to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial scheduler state, then there are no previous scheduler states to restore. The `undo` command uses `Model#canUndoScheduler()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The following sequence diagram shows how the `undo` operation works:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoScheduler()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the scheduler to that state."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "If the `currentStatePointer` is at index `schedulerStateList.size() - 1`, pointing to the latest scheduler state, then there are no undone scheduler states to restore. The `redo` command uses `Model#canRedoScheduler()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the scheduler, such as `list`, will usually not call `Model#commitScheduler()`, `Model#undoScheduler()` or `Model#redoScheduler()`. Thus, the `schedulerStateList` remains unchanged."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitScheduler()`. Since the `currentStatePointer` is not pointing at the end of the `schedulerStateList`, all scheduler states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/Party ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire scheduler."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the event being deleted)."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command is correct."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of scheduler states."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedScheduler`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "// tag::getGoogleCalendarEvents/postGoogleCalendarEvents[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d Get/Post Google Calendar Events"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The get/post Google Calendar events mechanism is facilitated by [proposed] utility method to get Google authentication. It implements the following operations:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* `getGoogleCalendarEvents` -- Get (pull) the online Google Calendar events and merge with local events."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* `postGoogleCalendarEvents` -- Post (push) the local events and merge with online Google Calendar."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Below is an example usage scenario and explanation on the `Get/PostGoogleCalendarEvents` mechanism behavior behind each step."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "**Step 1** +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e The user has always been using the application locally. +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e All Scheduler Events have been created locally. That is, the Scheduler has only local events (no Google Calendar Events)."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e An empty database is illustrated below as an imaginary array:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "image::EmptyLocalDataBaseDiagram.png[width\u003d\"150\"]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "**Step 2** +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e The user executes `GetGCEvents` command to download the Google Calendar Events to the local database. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e A `Calendar` object is to be built with method `getCalendar()`. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e A method `getNetHttpTransport()` is called to let application establish a connection with Google to initiate an authorization process"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "(for those who use this command for the  first time)."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e A pop-up window will appear. The User will be required to log in their Google Account as per other Google Service. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "After successful login, the login credential will be saved locally such that no future log-in is required. +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "**Step 3** +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e After successful authentication, a success message is shown for the user and instruct the user to close the browser. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e At the same time, the application proceeds automatically for the downloading and merging of Google Calendar\u0027s events to local events. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e The flowchart below shows the process of deciding whether to prompt a login page or to proceed with a local credential file:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "image::flowChatForDecisionOnLogIn.png[width\u003d\"350\"]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "For developers, if you test the application locally, please do not push (include) this log-in credential file to the `out/production` package. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Errors could occur when the user downloads and uses it."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "**Step 4** +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e The application will then call method `getEvents` to extract a (Google)`Events` object from the user’s online Google Calendar."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "For current implementation, only events in the primary (default) are extracted."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "**Step 5** +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e For each event extracted, a [proposed] eventConvertor utility method called `addGcEventToLocal` is called to convert the Google Extracted Event to local Event."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "**Step 6** +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e In the `execute` method, the converted events are saved in the local database, together with other locally created Events."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* **Save local login credential** (current choice)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Pro: Improves the user experience -- user won’t have to log in every time they use this command, it would be too troublesome and not user-friendly."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Con: Improper protection could cause a leak of personal info."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* **Require login everytime** (alternative)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Pro: Very secured."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Con: Not user-friendly."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "{more to be updated}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE`: Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING`: Can continue, but with caution"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO`: Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE`: Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d Add Command"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The `add` command allows the user to add new events to the scheduler. Add Command is facilitated by the `AddCommand` class."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "The format of this command is `add event n/EVENT_NAME [s/START_DATETIME] [e/END_DATETIME] [d/DESCRIPTION] [v/VENUE] [rt/RECURRING_TYPE] [ru/RECURRING_UNTIL_DATETIME] [t/TAG]…​`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The command uses Natty, a natural language date parser written in Java to parse `DateTime` given by the user. When given a user inputted string, Natty will parse the string into a `LocalDateTime` class."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "`AddCommand` requires the interaction between both `Logic` and `Model` Component. The `Logic` component comprises of `AddCommandParser` and `RepeatEventGenerator`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "The `AddCommandParser` parses the user input and `RepeatEventGenerator` generates repeating events (if any). The `Model` component is responsible for updating the internal event list."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Given below is the execution flow of `Add Command`."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "1. When the user inputs a command, `LogicManager` will call the `parseCommand` method in `SchedulerParser` with the user input as arguments."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "2. If the user input is valid and contains the keyword `add`, `AddCommandParser` will be instantiated."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "3. `SchedulerParser` will then call the `parse` method of `AddCommandParser`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "4. `AddCommandParser` parses the user input with the respective parsing methods."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "5. `generateAllRepeatedEvents` method in `RepeatEventGenerator` is invoked to generate a list of repeating events according to the repeat type of event specified by the user input."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "6. `AddCommand` will be instantiated with the list of events."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "7. `LogicManager` will then proceed to call the `execute()` method of `AddCommand`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "8. `Model` Component will then add the list of events to an internal list of events using the `addEvents` method."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "The following sequence diagram demonstrates how the add operation works:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "image::AddCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `Add Command`:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "image::AddCommandActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Generation of repeating events"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* **Alternative 1 (current choice):** Use `RepeatEventGenerator` to generate repeating events."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Pros: Singleton pattern. Easy to generate repeating events anywhere in the code base. Reduce `RepeatEventGenerator` object creations in testing. Uses the Single Responsibility Principle."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Cons: May increase coupling across the code base. May increase the difficulty of testing due to the singleton object."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* **Alternative 2:** Event model knows how to generate its repeating events by itself."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "** Pros: Will use less memory (e.g. generating events do not need to depend on another class to generate the repeating events)."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "** Cons: Increase coupling."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Datetime Parser"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* **Alternative 1 (current choice):** Use Natty, a natural language date parser."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Pros: Users do not need to conform to a standard format and able to enter `DateTime` in a more natural way. The user can also specify relative `DateTime`, which provides flexibility in `DateTime` input."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Cons: Parser may not be able to parse all natural language format due to ambiguity in language formats. There may also be a chance of parsing an invalid DateTime."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* **Alternative 2:** Use standard `DDMMYY` `HHMMSS` format for all `DateTime` inputs."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Pros: Users will always be assured of correct `DateTime` being parsed if they provide the correct input."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "** Cons: Reduce the flexibility as users have to conform to a standard format."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "// tag::Pop-up Alert[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d\u003d Pop-up Alert"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The pop-up function is currently implemented with the `add` and `edit` command as input fields. We will implement a separate command `setReminder` for a later iteration."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "The format for input is `[re/xxHxxMxxS]` and multiple inputs are allowed for one event."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* `add ... [/re xxHxxMxxS]` -- set pop-up alert `xxHxxMxxS` before the event start time. +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "   This will be replaced with `setReminder index xxHxxMxxS` in later iteration."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* `edit ... [/re xxHxxMxxS]` -- change pop-up time for the event. +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "   This will be replaced with `addReminder` and `deleteReminder` commands in a later iteration."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Pop-up Alert feature requires the interaction between both \u0027Logic\u0027 and \u0027Model\u0027 Component as explained below. The main utility responsible for this feature is `PopUpManager`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The storage for pop-up info is together with `Event` object in an XML file. It is stored as a `ReminderDurationList` object which is a `HashMap` of `Duration` object (parsed from xxHxxMxxS) and `Boolean` that indicates whether that time has popped-up."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Every time `Event` object is updated or the Scheduler is opened, it will trigger an update in the `PopUpManager`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "`PopUpManager` will call `EventPopUpInfo` in `Model` to generate `EventPopUpInfo` objects according to the number of reminder times the event has. If the event has 3 pop-up times,"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "it will generate 3 `EventPopUpInfo` with 3 different `PopUp Time` while the rest of the info fields are the same."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "The generated  `EventPopUpInfo` objects will be pushed to the `PopUp Queue` maintained by the `PopUpManager`. Its underlying data structure is a `Priority Queue`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "and key of the Reminder Time. When the App is opened, `PopUpManager` runs on a parallel thread to constantly check the queue to determine when to pop-up what alert."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Once the reminder has popped up, `PopUpManager` will use `eventUid` (of `UUID` type) stored in the `PopUpInfo` object to find the `Event` and set True corresponding to the `Duration` that has popped up."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "The overall workflow can be represented by the below activity diagram:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "image::PopUpActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Below is an example usage scenario and explanation on the pop-up Alert mechanism behavior behind each step."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "**Step 1** +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The user opens Scheduler. The `PopUpManager` initializes the PopUp Queue and checks if any PopUp should have been popped up when the app is closed. +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "For example, the user opens the Scheduler at 10:00. He has a pop-up set at 9:30. It will appear once he opens the app to remind him that the event has passed. +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "At the same time, the `PopUpManager` will keep checking the Queue concurrently when the app is open."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "**Step 2** +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The user adds a new event \"Assignment Due\" and he wants to have two pop-up reminders before the deadline. He keys in `add n/Assignment Due s/today 10PM /re 4H /re 2H`. +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "The `AddCommandParser` will parse the input to a ReminderDurationList: `4H: False, 2H: False`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The `AddCommand` will also trigger `PopUpManager` to update the Popup Queue. Two \u0027EventPopUpInfo\u0027 objects with \u0027PopUpTime\u0027 6 PM and 8 PM separately will be initiated and added into the PopUp Queue."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "The user can close the Scheduler or use other functions of the Scheduler."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "**Step 3** +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "At 6 PM on that day, if the Scheduler is open, a pop-up alert will appear. The `PopUpManager` pop out the corresponding `EventPopUpInfo`."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Meanwhile, it will use the `eventUid` (of `UUID` type) stored in `EventPopUpInfo` to find the `Event` object and set `4H: True`. +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "The 8 PM pop-up is still in the Pop-up queue."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* **Use HashMap to store ReminderDurationList** (current choice)"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Pro: Faster searching when deleting. The user can also view the reminder times he has set as part of the event info since it will not be deleted when it popped up."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Con: More complex implementation"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* **Use ArrayList to store ReminderDurationList** (alternative)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Store the `Durations` in an ArrayList, every time the `EventPopUpInfo` is popped out, delete the corresponding `Duration`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Pro: Easier implementation"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Con: Searching and Deleting the Duration will take longer time."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "// end::Pop-up Alert[]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::addDeleteListTag[]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add/Delete/List Tags"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Current tag is implemented as a feature of an event instead of an independent object stored in local storage."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Similar to add event command, all tags are stored in local storage."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The `addTag` command allows the user to add new tags to the scheduler. Add Tag Command is facilitated by the `AddTagCommand` class."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "The format of this command is `add [TAG_NAME]`."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "`AddTagCommand` requires the interaction between both `Logic` and `Model` Component. The `Logic` component comprises of `AddTagCommandParser`."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "The `AddTagCommandParser` parses the user input and generates a tag. The `Model` component is responsible for updating the internal tag list."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the execution flow of `Add Tag Command`."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "1. When the user inputs a command, `LogicManager` will call the `parseCommand` method in `SchedulerParser` with the user input as arguments."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "2. If the user input is valid and contains the keyword `addTag`, `AddTagCommandParser` will be instantiated."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "3. `SchedulerParser` will then call the `parse` method of `AddTagCommandParser`."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "4. `AddTagCommandParser` parses the user input with the respective parsing methods."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "5. `AddTagCommand` will be instantiated with the list of tags."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "6. `LogicManager` will then proceed to call the `execute` command of `AddTagCommand`."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "7. `Model` Component will then add the list of tags to an internal list of tags using the `addTags` method."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Tag Command"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "To be updated."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d List Tag Command"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "To be updated."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "{more to be updated}"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "// end::addDeleteListTag[]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "// tag::commandAliasing[]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d Command Aliasing"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- For the `add` command, typing `add`, `ad` or even simply `a` with the appropriate parameters can add an event. +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- Similarly, for the \u0027delete\u0027 command, typing one of the following -- `delete`, `delet`, dele`, `del`, `de` or `d` with the appropriate parameters can delete an event. +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- Because of technical restrictions in programming, if there are multiple (2 or more) commands that start with the same alphabetical letter, for e.g. `history` and `help`, in that case: +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e We have chosen to prioritize `help` over the `history` command. It is as follows: `history` can be invoked with `history`, `histor` ... all the way to `hi`. However, `help` can be called with `help`, `he` ... `h`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- The same logic applies to the `edit` and `exit` command."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "-\u003e We have chosen to prioritize `exit` over the `edit` command. `exit` can be invoked with `exit` down to `e` while `edit` can be invoked down till `ed` with the appropriate parameters specified."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- The alias(es) of each command go through the same logic as the actual command itself. They are parsed through the `parseCommand()` method in the {repoURL}/src/main/java/seedu/scheduler/logic/parser/SchedulerParser.java[`SchedulerParser.java`] class. +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "**Final notes:** +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- The current implementation may not be the most efficient. We create constants of `public static final String` type and name them as `COMMAND_ALIAS_ONE`, `COMMAND_ALIAS_TWO`, etc... in the affected commands\u0027 respective classes.  +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003e A suggestion would be to create a suitable `CommandAlias` class and/or use data structures like `enums`, `HashMap`, `TreeMap` etc... for the command aliases. +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- Also, this feature may be replaced by another feature in the future. See \u003c\u003cproposed-auto-completion-of-commands, [Proposed]Auto-Completion of Commands\u003e\u003e below for more. +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- An activity diagram (a _swimlane diagram_) showing how an alias of the `history` command would work is shown below: +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "image::HistoryCommandAliasActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Note: The above swimlane diagram is a simplified activity diagram which omits details of interactions with interfaces such as {repoURL}/src/main/java/seedu/scheduler/model/Model.java[`Model.java`] and/or other relevant classes._"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "//end::commandAliasing[]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "// tag::autoComplete[]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d [Proposed] Auto-Completion of Commands"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "How this feature could possibly be implemented would be using the auto-complete feature available in the https://bitbucket.org/controlsfx/controlsfx/[ControlsFX] library."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "// end::autoComplete[]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "We use AsciiDoc for writing documentation."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "We chose AsciiDoc over Markdown because AsciiDoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in web pages."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.scheduler.ui` package."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "e.g. `seedu.scheduler.commons.StringUtilTest`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "e.g. `seedu.scheduler.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "..  Hybrids of unit and integration tests. These tests are checking multiple code units as well as how they are connected together. +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "e.g. `seedu.scheduler.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "When a pull request makes changes to AsciiDoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those AsciiDoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/scheduler/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "A project often depends on third-party libraries. For example, Scheduler depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "A suggested path for new programmers:"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dogfooding, your team realizes that it is troublesome for the user to type the whole command in order to execute a command. Your team devises some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all events in the list."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/scheduler/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/scheduler/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/scheduler/logic/parser/SchedulerParser.java[`SchedulerParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/scheduler/logic/parser/SchedulerParser.java[`schedulerParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the scheduler, but the model API does not support such a functionality at the moment. Your job is to implement an API method so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the scheduler."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/scheduler/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/scheduler/model/Scheduler.java[`Scheduler`] API need to be updated."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/scheduler/model/Scheduler.java[`Scheduler`] and link:{repoURL}/src/main/java/seedu/scheduler/model/event/Event.java[`Event`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/scheduler/model/Scheduler.java[`Scheduler`] allows you to update an event, and link:{repoURL}/src/main/java/seedu/scheduler/model/event/Event.java[`Event`] allows you to update the tags."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/scheduler/model/Scheduler.java[`Scheduler`]. Loop through each event, and remove the `tag` from each event."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/scheduler/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/scheduler/model/ModelManager.java[`ModelManager`] should call `Scheduler#removeTag(Tag)`."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your scheduler application. You realize that one of the users occasionally tries to delete non-existent tags from an event, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in their command but did not realize they had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list because they keep forgetting the index of the last event in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Use different colors for different tags inside event cards. For example, `holidays` tags can be all in brown, and `appointments` tags can be all in yellow."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/scheduler/ui/EventCard.java[the `EventCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using CSS, especially if you have experience with web-based CSS."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** You can modify the existing test methods for `EventCard` to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/scheduler/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/scheduler/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/scheduler/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/scheduler/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/scheduler/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/scheduler/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/scheduler/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/scheduler/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/SchedulerSystemTest.java[`schedulerSystemTest#assertCommandBoxShowsDefaultStyle() and schedulerSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/scheduler/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of events in the scheduler."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/scheduler/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the scheduler is updated."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/scheduler/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of events when the application just started."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/scheduler/ui/StatusBarFooter.java[`StatusBarFooter#handleschedulerChangedEvent(schedulerChangedEvent)`] to update the number of events whenever there are new changes to the scheduler."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of events status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/SchedulerSystemTest.java[`SchedulerSystemTest`] to also verify the new total number of events status bar."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the scheduler to the cloud. However, the current implementation of the application constantly saves the scheduler after the execution of each command, which is not ideal if the user is working on a limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the scheduler storage."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ". Add a new method `backupScheduler(ReadOnlyScheduler)`, so that the scheduler can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/scheduler/storage/SchedulerStorage.java[`SchedulerStorage`] interface."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/scheduler/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/scheduler/storage/XmlSchedulerStorage.java[`XmlSchedulerStorage`] class."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Scenario:* You are a software maintainer for `scheduler`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular event, by providing a flexible `remark` field for each event, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Edits the remark for an event specified in the `INDEX`. +"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* `remark 1 r/Anniversary.` +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Edits the remark for the first event as `Anniversary.`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Removes the remark for the first event"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/scheduler/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/scheduler/logic/parser/SchedulerParser.java[`SchedulerParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/scheduler/logic/parser/SchedulerParserTest.java[`SchedulerParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/scheduler/logic/parser/SchedulerParser.java[`SchedulerParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/scheduler/logic/parser/SchedulerParserTest.java[`SchedulerParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `EventCard`"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/scheduler/ui/EventCard.java[`EventCard`] s to display a remark for each event later."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/EventListCard.fxml[`EventListCard.fxml`]."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/scheduler/ui/EventCard.java[`EventCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/EventCardHandle.java[`EventCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/scheduler/model/event/Event.java[`Event`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/scheduler/model/event/Venue.java[`Venue`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Event` to support a `Remark` field"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/scheduler/model/event/Event.java[`Event`]."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/scheduler/model/event/Event.java[`Event`]."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the event will be created without a remark)."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/scheduler/model/util/SampleSchedulerDataUtil.java/[`SampleSchedulerDataUtil`] to add remarks for the sample data (delete your `scheduler.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedEvent` class"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "We now have `Remark` s for `Event` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/scheduler/storage/XmlAdaptedEvent.java[`XmlAdaptedEvent`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Add a new XML field for `Remark`."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ". Fix `invalidAndValidEventSheduler.xml`, `typicalEventsScheduler.xml`, `validScheduler.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `EventBuilder`"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Since `Event` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/scheduler/testutil/EventBuilder.java[`EventBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/scheduler/model/event/Event.java[`Event`]."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/scheduler/testutil/EventBuilder.java[`EventBuilder`]. This method will create a new `Remark` for the event that it is currently building."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Try and use the method on any sample `Event` in link:{repoURL}/src/test/java/seedu/scheduler/testutil/TypicalEvents.java[`TypicalEvents`]."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `EventCard`"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/scheduler/ui/EventCard.java[`EventCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/scheduler/ui/EventCard.java[`EventCard`]\u0027s constructor to bind the `Remark` field to the `Event`\u0027s remark."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/scheduler/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysEvent(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of an event."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "* has a need to manage a significant number of events"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Value proposition*: manage events faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* * *` |university student |add time and event for an venue |locate my classroom at specific timings(s)"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* * *` |university student |search for an event |see the details for that specific event"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* * *` |university student |create repeated events |schedule repeated events easily"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* * *` |university student |see my academic timetable |know what modules I am taking and plan accordingly"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`* * *` |organized university student |classify events into different categories |identify which event belongs to which category"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* * *` |busy university student |know what task I need to complete by a certain date |plan my schedule in an efficient manner"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* * *` |university student |create a new event |keep track of all my events"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`* * *` |university student |delete an event |remove a canceled event"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* * *` |university student |update the event details |update the event if there is a change in event details"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* * *` |busy university student |type fewer words when I enter a command |save some time"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* *` |forgetful university student |receive email reminders for my events |be reminded of events even if I do not check the scheduler"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`* *` |disorganized university student |notified if I create events that have a time conflict |know if my events have time clashes"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* *` |university student |view a filtered list of my events |prepare for my upcoming events according to the filter criteria"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`* *` |disorganized university student |mark events which I attended or did not attend |keep track of my attended and unattended events"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* *` |university student |see attended events |keep track of events I attended"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`* *` |university student |monitor and track deadlines |keep track of my upcoming deadlines"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |popular university student |know my friends\u0027 contact |can contact them whenever I want"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`* *` |organized university student |send event details to my friends |plan events together with my friends"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |goal oriented university student |view statistics of my attended events |know how many events I attended"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |university student |see all the public holidays |avoid planning certain events on a public holiday"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`*` |university student |customize my profile |keep track of my profile and view it whenever I want"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |university student |obtain details of the teaching staff |clarify my questions with the teaching staff"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |university student |obtain details of a speaker easily |view their credentials"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |university student with private events |encrypt certain events |prevent others from obtaining details of certain events"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`*` |busy university student |get the shortest path from current location to next |reduce my traveling time"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |university student who love to control things remotely |add events using email |schedule my events even when I am not using the application"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`*` |university student who has a bad sense of direction |display the location of an event on a map |locate the venue of my event and not be lost"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |sleep deprived university student |record my estimated sleeping hours |monitor the number of hours I sleep at night"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`*` |unmotivated university student |shown a random cat video |stay motivated to study"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |university student who likes to exercise |sync my fitness trackers to the application |monitor the number of steps I take"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |lazy university student |interact with scheduler using syntax closer to natural language |feel more interactive when using the application"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |university student |sync events with social media |share with my acquaintance about my events"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|`*` |university student who has poor eyesight |add events by voice |reduce reading and typing"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`*` |university student who has poor eyesight |be able to hear events being read out |reduce my reliance on what is being displayed on the screen"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "|`*` |university student who is used to the Google ecosystem |sync my scheduler with my own Google Calendar |be in sync with that calendar"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "(For all use cases below, the *System* is the `Scheduler` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d Use case: Delete event"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "1.  User requests to list events"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "2.  Scheduler shows a list of events"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "3.  User requests to delete a specific event in the list"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "4.  Scheduler deletes the event"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "** 3a1. Scheduler shows an error message."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ".  Should be able to hold up to 1000 events without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "   Expected: Shows the GUI with a set of sample events. The window size may not be optimum."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "   Expected: The most recent window size and location are retained."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d Deleting a event"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ". Deleting an event while all events are listed"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ".. Prerequisites: List all events using the `list` command. Multiple events in the list."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "   Expected: The first event is deleted from the list. Details of the deleted event shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "   Expected: No event is deleted. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Release Plan"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "*He Xinyi*"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.1: Implementation of Pop-up function based on Event start time only +"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.2: Created an input data field to enable customizable pop-up time +"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.3: Full implementation of allowing the pop-up function to update accordingly whenever events are changed"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "*Zhang Yezhong*"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.1 Partial implementation on `GetGCEvents` command +"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.2 Implementation of `GetGCEvents` command +"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.3 Implementation of all relevant commands to sync with Google Calendar in real time +"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.4 Upgraded implementation to synchronous version"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "*Goh Cheng Yu*"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.1: +"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.2: +"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.3: +"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "*Wu Jiacheng*"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.1: Partial implementation of tag book storage +"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.2: Partial implementation of tag functions +"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.3: Full implementation of tag functions +"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Daniel Ng Sze Yao*"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.1: +"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.2: +"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- v1.3: +"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 49,
      "ChengYuuu": 101,
      "YezhongZ": 92,
      "-": 853,
      "HEARTOFAL1ON": 202
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d iScheduler Xs Max - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "By: `CS2103-AY1819S1-F11-1`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "iScheduler Xs Max is for those who *prefer to use a desktop app for scheduling personal events*. More importantly,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "this version is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "the benefits of a Graphical User Interface (GUI). If you can type fast, we can get your event scheduling tasks done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ".  Download the latest `iScheduler Xs Max.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your iScheduler Xs Max."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* **`add`**`add n/Interview at Jane Street` : adds an Event named `Interview at Jane Street` to the Event Scheduler."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* *`list`* : lists all events"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "* **`delete`**`3` : deletes the 3rd event shown in the current event"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Command Format* +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": " -- Some commands have (an) alias(es), which you can also use to execute the command e.g. to add an event to the scheduler, you can type either `add n/Interview at Jane Street` or `a n/Interview at Jane Street`. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": " -- Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/EVENT_NAME`, `EVENT_NAME` is a parameter which can be used as `add n/Interview at Jane Street`. +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": " -- Items in square brackets are optional e.g `n/EVENT_NAME [t/TAG]` can be used as `n/Interview at Jane Street t/serious` or as `n/Interview at Jane Street`. +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": " -- Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/priority.low`, `t/fun t/serious` etc. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": " -- Parameters can be in any order e.g. if the command specifies `n/EVENT_NAME v/VENUE`, `v/VENUE n/EVENT_NAME` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `help` +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `hel` OR `he` OR `h` +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d Adding an event : `add`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Adds an event to the scheduler. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Format: `add event n/EVENT_NAME [s/START_DATETIME] [e/END_DATETIME] [d/DESCRIPTION] [v/VENUE] [rt/REPEAT_TYPE] [ru/REPEAT_UNTIL_DATETIME] [t/TAG]... [re/REMINDER_TIME]… ` +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `ad` OR `a` in place of `add` +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "An event can have any number of tags and reminders(including 0)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "If you want multiple tags and reminders, we need to use `[t/]` and [`re/`] for multiple times"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "****"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `DATETIME` is the natural language of date and time in English."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `REPEAT_TYPE` should be chosen from either daily, weekly or monthly."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* `TAG` should be chosen from the list of tags. Tags can be expressed as an integer(index) or in alphabets."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* `REMINDER_TIME` (in `xxHxxMxxS`) represents the duration before the `START_DATETIME` that you want a pop-up alert."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* Only future reminders will be added. Please refer to \u003c\u003cPop Up Feature\u003e\u003e."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* `add n/Study With Yoko s/tomorrow at 3pm d/Study again and again rt/MONTHLY ru/next friday 3pm t/adhoc re/30M`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* `add n/CS2103 Lecture s/23 September 2018 6pm e/24 September 2018 rt/WEEKLY ru/next monday t/timetable re/1H30M`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Below are the supported formats of date, time and reminder times:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ":sectnums!:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Date and time formats"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Explicit dates"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Formal dates::"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Formal dates are expressed in integer values month, day and year separated by / or -."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Format:::"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `MM-DD-YYYY`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `MM/DD/YYYY`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `YYYY-MM-DD`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `YYYY/MM/DD`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Examples:::"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| *Input*    | *Output*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 10-15-2018 | October 15 2018"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 10/15/2018 | October 15 2018"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 2018-10-15 | October 15 2018"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 2018/10/15 | October 15 2018"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Relaxed dates::"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Relaxed dates are month, day and year expressed in a loose manner such as a combination of English and integers."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Examples:::"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| *Input*    | *Output*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| The 15th of October in the year 2018 | October 15 2018"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| Mon, 15 Oct 2018 | October 15 2018"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| Oct 15, 2018 | October 15 2018"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| Oct 15th | October 15 of the current year"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| October fifteen | October 15 of the current year"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Relative dates"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Relative date are dates relative to the current date."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Examples::"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| *Input*          | *Output*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| next thursday    | The Thursday after command execution date"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| last wednesday   | The Wednesday before command execution date"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| today            | The day of command execution"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| tomorrow         | The day after command execution date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| yesterday        | The day before command execution date"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 3 days from now  | 3 days after command execution date"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| three weeks ago  | 3 weeks before command execution date"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Explicit times"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Explicit times are expressed in integer values hours, minutes and seconds. If meridian is compulsory in 12-hour clock."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Format:::"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `HH`[`MM`][`SS`][`MERIDIAN`]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Example:::"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| *Input*    | *Output*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 10         | 10:00:00am"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 191215     | 17:12:15pm"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 201311 pm  | 8:13:11pm"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 1900       | 7:00:00pm"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 7am        | 7:00:00am"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 10:30 am   | 10:30:00am"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Relative times"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Examples::"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| *Input*             | *Output*"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 10 seconds ago      | 10 seconds before command execution time"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| in 5 minutes        | 5 minutes after command execution time"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 4 minutes from now  | 4 minutes after command execution time"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 3 hours later       | 3 hours after command execution time"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "| 6 seconds from 1030 | 6 seconds after 1030"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Reminder time format"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Reminder times"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Examples::"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "| *Input*        | *Output*"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "| 30m or 30min   | 30 minutes before `START_DATETIME`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "| 3h             | 3 hours before `START_DATETIME`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "| 1h30m30s       | 1 hour 30 minutes 30 seconds before `START_DATETIME`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "| 48h            | 2 days before `START_DATETIME`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d [Partial Implementation] Adding a tag : `addTag` [by v1.4]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "This is the command format for adding tags."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "*Note:* This feature has NOT been fully implemented yet. However, do feel free to play around with it and to report any bugs/problems as well :)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_It will be FULLY implemented by v1.4._"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d Listing all events : `list`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Shows a list of all events in the scheduler. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `list` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `lis` OR `li` OR `l` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d Editing an event : `edit`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Edits existing events in the scheduler. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Format: `edit INDEX [n/EVENT_NAME] [s/START_DATETIME] [e/END_DATETIME] [d/DESCRIPTION] [v/VENUE] [rt/REPEAT_TYPE] [ru/REPEAT_UNTIL_DAETIME] [t/TAG]... [re/REMINDER_TIME]... [-a | -u]` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `edi` OR `ed` in place of `edit` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Only one option can exists at any one time. Either `-a` or `-u`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* Edits the event at the specified `INDEX`. The index refers to the index number shown in the displayed event list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* When editing tags, the existing tags of the event will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* You can remove all the event\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* The logic for editing reminder times is the same as tags"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* Only future reminders will be edited. Please refer to \u003c\u003cPop Up Feature\u003e\u003e."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* Repeating events can be edited together using a valid option."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `REPEAT_TYPE` and `REPEAT_UNTIL_DATETIME` cannot be edited for events without a valid option."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "The supported formats of date, time and reminder times are identical to that of \u003c\u003cAdding an event : `add`, Adding an event\u003e\u003e. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Refer to \u003c\u003cDate and time formats\u003e\u003e and \u003c\u003cReminder time format\u003e\u003e."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "The current version does not auto-refresh the Google Calendar page on the right."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Please right click and select \u0027Reload Page\u0027 to see the effects."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Alternatively, you can select any Event using your keyboard/mouse, the page on the right will be refreshed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ":sectnums!:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d\u003d Options"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "`-a` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Tell the command to select all the repeating events that are associated with the event selected."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "`-u` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Tell the command to select the upcoming events that are associated with the event selected."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `edit 1 n/Study with John d/Study for Mathematics exam` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Edits the event name and description of the 1st event to be `Study with John` and `Study for Mathematics exam` respectively."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `edit 2 n/Play t/ -a` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Edits the repeating event\u0027s name of the 2nd event to be `Play` and clears all existing tags."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `edit 2 re/ -u` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Clear all the upcoming event\u0027s reminder times."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d Locating events by event name: `find`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Finds events whose event names contain any of the given keywords. +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `fin` OR `fi` OR `f` in place of `find` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* The search is case insensitive. e.g `work` will match `Work`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* The order of the keywords does not matter. e.g. `Work Hard` will match `Hard Work`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* Only the event name is searched."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* Only full words will be matched e.g. `Work` will not match `Works`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* Events matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hard Work` will return `Work Smart`, `Play Hard`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `find Study` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Returns `study` and `Study Hard`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `find Study Hard` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Returns any event having event names `Study` or `Hard`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d Deleting an event : `delete`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Deletes the specified event from the scheduler. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Format: `delete INDEX [-a | -u]` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `delet` OR `dele` OR `del` OR `de` or `d` in place of `delete` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "The current version does not auto-refresh the Google Calendar page on the right."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Please right click and select \u0027Reload Page\u0027 to see the effects."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Alternatively, you can select any Event using your keyboard/mouse, the page on the right will be refreshed."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Only one option can exists at any one time. Either `-a` or `-u`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* Deletes the event at the specified `INDEX`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* The index refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* Repeating events can be deleted together using a valid option."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Supported options are identical to those found in \u003c\u003cEditing an event : `edit`, Editing an event\u003e\u003e. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Refer to \u003c\u003cOptions\u003e\u003e."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Deletes the 2nd event in the scheduler."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `find Study` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Deletes the 1st event in the results of the `find` command."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "`delete 3 -a` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Deletes the 3rd event and its repeating events from the scheduler."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "`delete 4 -u` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Deletes the 4th event and its upcoming events from the scheduler."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003d\u003d\u003d Selecting an event : `select`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Selects the event identified by the index number used in the displayed event list. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `select INDEX` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `selec` OR `sele` OR `sel` OR `se` OR `s` in place of `select` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* Selects the event and loads the Google search page the event at the specified `INDEX`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* The index refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Selects the 2nd event in the scheduler."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* `find Study` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Selects the 1st event in the results of the `find` command."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `history` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `histor` OR `histo` OR `hist` OR `his` OR `hi` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Current version only supports the local changes, Google Calendar is NOT undoable."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Restores the scheduler to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `undo` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `und` OR `un` OR `u` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Undoable commands: those commands that modify the scheduler\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Current version only supports the local changes, Google Calendar is NOT redoable."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `redo` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `red` OR `re` OR `r` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "The current version does not sync this command with Google Calendar."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `clear` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `clea` OR `cle` OR `cl` OR `c` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Format: `exit` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Aliases: `exi` OR `ex` OR `e` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Coming in V1.4: Command format can be typed case-insensitive_"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d\u003d Pop Up Feature"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "A window will pop up if you have set reminder for an event. +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Eg: If you set 30min for an event that starts at 11:00, a window will pop up at 11:30 (+-1min) if the app is open. +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Format: it is currently integrated with \u003c\u003cAdding an event : `add`\u003e\u003e and \u003c\u003cEditing an event : `edit`\u003e\u003e command. For the correct format for time, please refer to \u003c\u003cReminder time format\u003e\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "When you use a command that involves many changes of reminder time (add/edit/undo/redo), please give a few seconds for the system to sync before you close the app."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "****"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* If you have not set any reminder for the event, it will display as \"No Reminder\"."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* When you open the app, it will NOT pop up past reminders since the last time you close the app."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* When the reminder pops up, the reminder time displayed for the event will NOT change instantaneously. It will refresh the next time the app is opened."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* When you add/edit pop up times, only the future ones will be added. +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "Eg. you add a reminder that is supposed to pop up an hour ago, it will reflect in the display but will not pop up as past reminders/in the future."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "****"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Scheduler data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d Get Events From Google Calendar : `getGCEvents`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Pull events from your Google Calendar (login required) and merge them into a localised calendar. +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Format: `getGCEvents`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "For now, those events downloaded from Google are not compatible with local commands:edit, delete."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "They will be suppported in v1.4."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "This command will have to access your Google Calendar data, Google authentication is required."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "****"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Step 1: If you have not logged into our application before, a prompt up login window will appear."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Step 2:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- You will be required to log in your Google account, just like when you are using many other Google services."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- After successful authorization, the message +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "`Received verification code. You may now close the window.` +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "will appear."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Step 3:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- The application proceeds automatically after successful authorization. +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- As instructed, you do not have to do anything else so please do feel free to close the browser tab."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Step 4:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- The application then proceeds with the extraction of Google Calendar events, and trying to add them to local database."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "- A success message appears after the completion of addition of events."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "****"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\u003d\u003d\u003d Post Events to Google Calendar : `postGCEvents` `[coming in v1.4]`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Post events from your local scheduler and merge your local events with Google Calendar events (login is required). +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "Format: `postGCEvents`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d Auto-Completion of Commands"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "As you may have already noticed, our GUI supports auto-completion which suggests possible commands when you type certain (or _certain combinations_ of) alphabetical characters."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "_Note: It even works for command aliases!_"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "\u003d\u003d\u003d Case-Insensitive Invoking of Commands `[coming in v1.4]`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Commands can be invoked in case-insensitive format. For example, typing `hElP` can invoke the `help` command. +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "Only applicable to these commands: `add`, `clear`, `delete`, `edit`, `exit`, `find`, `help`, `history`, `list`, `redo`, `select` and `undo`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous iScheduler folder."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* *Add event* `add event n/EVENT_NAME [s/EVENT_START_DATE_TIME] [e/EVENT_END_DATE_TIME] [d/DESCRIPTION] [v/VENUE] [rt/REPEAT_TYPE] [ru/REPEAT_UNTIL_DATETIME] [t/TAG]…` +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "e.g. `add n/Study With Yoko s/tomorrow at 3pm d/Study again and again rt/monthly t/ad-hoc`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* *Edit event* `edit INDEX [n/EVENT_NAME] [s/START_DATETIME] [e/END_DATETIME] [d/DESCRIPTION] [v/VENUE] [rt/REPEAT_TYPE] [ru/REPEAT_UNTIL_DAETIME] [t/TAG] [-a | -u]...` +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "e.g. `edit 1 n/Study with John d/Study for Mathematics exam` +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find event* `add event KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `Find exam`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "* *List event* `list event [t/tag] or [d/date\u003dtoday]` +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `list exam`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add tag* `add tag [TAG_NAME]` +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addtag exam`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete tag* `delete tag [TAG_NAME]` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deletetag exam`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* *List tag* `list all tags stored in scheduler` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `listtag`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "* *Delete event* : `delete INDEX [-a | -u]` +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "e.g. `delete 3 -a`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 46,
      "ChengYuuu": 168,
      "YezhongZ": 62,
      "-": 206,
      "HEARTOFAL1ON": 70
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Runs all tests in the `seedu.scheduler.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "Runs all non-GUI tests in the `seedu.scheduler`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 111
    }
  },
  {
    "path": "docs/team/hexinyiyi.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d He Xinyi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* *Major enhancement*: added *Pop Up function of the scheduler*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 72
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import org.apache.log4j.BasicConfigurator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Version;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.LogicManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.PopUpManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.util.SampleSchedulerDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.SchedulerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.XmlSchedulerStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.Ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.UiManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    protected PopUpManager popUp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Scheduler ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        SchedulerStorage schedulerStorage \u003d new XmlSchedulerStorage(userPrefs.getSchedulerFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        storage \u003d new StorageManager(schedulerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        BasicConfigurator.configure();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUp \u003d initPopUpManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s scheduler and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The data from the sample scheduler will be used instead if {@code storage}\u0027s scheduler is not found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * or an empty scheduler will be used instead if errors occur when reading {@code storage}\u0027s scheduler."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ReadOnlyScheduler initialSchedulerData \u003d initSchedulerData(storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new ModelManager(initialSchedulerData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a {@code ReadOnlyScheduler}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The file {@code SampleSchedulerDataUtil#getSampleScheduler} will be used"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * if there is no scheduler present in storage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * A new Scheduler will be used if error occurs."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private ReadOnlyScheduler initSchedulerData(Storage storage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Optional\u003cReadOnlyScheduler\u003e schedulerOptional;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ReadOnlyScheduler initialSchedulerData;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            schedulerOptional \u003d storage.readScheduler();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            if (!schedulerOptional.isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                logger.info(\"Scheduler data file not found. Will be starting with a sample Scheduler\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            initialSchedulerData \u003d schedulerOptional.orElseGet(SampleSchedulerDataUtil::getSampleScheduler);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            logger.warning(\"Scheduler data file not in the correct format. Will be starting with an empty Scheduler\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            initialSchedulerData \u003d new Scheduler();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            logger.warning(\"Problem while scheduler data from the file. Will be starting with an empty Scheduler\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            initialSchedulerData \u003d new Scheduler();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return initialSchedulerData;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Scheduler\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private PopUpManager initPopUpManager() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUp \u003d PopUpManager.getInstance();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUp.syncPopUpInfo(model.getScheduler());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return popUp;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        logger.info(\"Starting Scheduler \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUp.startRunning();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Scheduler ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        // model.syncWithPopUpManager(PopUpManager.getInstance(), storage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 11,
      "ChengYuuu": 58,
      "YezhongZ": 4,
      "-": 161
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private String appTitle \u003d \"iScheduler Xs Max\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_VALUES \u003d \"Invalid command values! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/events/model/SchedulerChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/** Indicates the Scheduler in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class SchedulerChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public final ReadOnlyScheduler data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public SchedulerChangedEvent(ReadOnlyScheduler data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return \"number of events \" + data.getEventList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 19
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/events/ui/EventPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents a selection change in the Event List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Event newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventPanelSelectionChangedEvent(Event newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Event getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 8,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Indicates a request to jump to the list of events"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/EventFormatUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.util.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.model.Event.Reminders;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.model.EventReminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " * A class for converting the format between Google Event and local Event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "public class EventFormatUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Returns the eventUid in Google Calendar Format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param localEvent A local Event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return eventUid in Google Calendar Format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static String getEventUidInGoogleFormatFromLocalEvent(Event localEvent) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return localEvent.getEventUid()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .toString()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .replaceAll(\"-\", \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Returns the eventSetUid in Google Calendar Format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param localEvent A local Event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return eventSetUid in Google Calendar Format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static String getEventSetUidInGoogleFormatFromLocalEvent(Event localEvent) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return localEvent.getEventSetUid()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .toString()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .replaceAll(\"-\", \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Convert a List Google Event format to a list of Event in local Format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param listOfGoogleEvents A list of Google event."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return A list of local Event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public List\u003cEvent\u003e convertGoogleListToLocalList("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            List\u003ccom.google.api.services.calendar.model.Event\u003e listOfGoogleEvents) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003cEvent\u003e eventsToAddToLocal \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        for (com.google.api.services.calendar.model.Event googleEvent : listOfGoogleEvents) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            Event newEvent \u003d convertGeventToLocalEvent(googleEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            eventsToAddToLocal.add(newEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return eventsToAddToLocal;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Converts a local Event\u0027s starting data and time to Google format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param event a local Event."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return a String in Google format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static String convertStartDateTimeToGoogleFormat(Event event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //local format:2018-10-20 17:00:00"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //target :2018-10-21T22:30:00+08:00"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return event.getStartDateTime()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .getPrettyString()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .substring(0, 19)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .replaceFirst(\" \", \"T\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                + \"+08:00\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Converts a local Event\u0027s ending data and time to Google format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param event a local Event."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return a String in Google format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static String convertEndDateTimeToGoogleFormat(Event event) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return event.getEndDateTime()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .getPrettyString()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .substring(0, 19)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .replaceFirst(\" \", \"T\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                + \"+08:00\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Convert the Google Event format to local Format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param googleEvent The Google event."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return Event   The local Event."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Event convertGeventToLocalEvent("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            com.google.api.services.calendar.model.Event googleEvent) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        DateTime start \u003d googleEvent.getStart().getDateTime();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (start \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //if no time, only date"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            start \u003d googleEvent.getStart().getDate();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newEventname \u003d googleEvent.getSummary(); //Summary\u003d\u003dtitle in GoogleAPI"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //TODO:Simply the string processing code (OOP possible here)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newEventStart \u003d String.valueOf(start); //eg:2018-10-16T22:30:00.000+08:00"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //TODO:Try not to use the migc number 0,10,11,19. Use other ways of string processing"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newEventStartDate \u003d newEventStart.substring(0, 10); //2018-10-16"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newEventStartTime \u003d newEventStart.substring(11, 19); //22:30:00"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        newEventStartTime \u003d newEventStartTime.replaceAll(\":\", \"\"); //223000"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        DateTime end \u003d googleEvent.getEnd().getDateTime();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (end \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //if no time, only date"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            start \u003d googleEvent.getEnd().getDate();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newEventEnd \u003d String.valueOf(end);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newEventEndDate \u003d newEventEnd.substring(0, 10);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newEventEndTime \u003d newEventEnd.substring(11, 19);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        newEventEndTime \u003d newEventEndTime.replaceAll(\":\", \"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newDescription \u003d googleEvent.getDescription() \u003d\u003d null ? \"\" : googleEvent.getDescription();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String newVenue \u003d googleEvent.getLocation() \u003d\u003d null ? \"\" : googleEvent.getLocation();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        EventName eventName \u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        seedu.scheduler.model.event.DateTime startDateTime \u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        seedu.scheduler.model.event.DateTime endDateTime \u003d null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Description description \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Venue venue \u003d null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003cString\u003e recurrence \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        seedu.scheduler.model.event.DateTime"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                repeatUntilDateTime \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        ReminderDurationList reminderDurationList \u003d new ReminderDurationList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            eventName \u003d ParserUtil.parseEventName(newEventname);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            startDateTime \u003d ParserUtil.parseDateTime(newEventStartDate + \" \" + newEventStartTime);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            endDateTime \u003d ParserUtil.parseDateTime(newEventEndDate + \" \" + newEventEndTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            description \u003d ParserUtil.parseDescription(newDescription);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            venue \u003d ParserUtil.parseVenue(newVenue);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            recurrence \u003d googleEvent.getRecurrence();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            repeatUntilDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //RRULE:FREQ\u003dWEEKLY;BYDAY\u003dSU"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String[] recurrenceText \u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        RepeatType repeatType;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (recurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            repeatType \u003d RepeatType.NONE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            switch (recurrence.size()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                recurrenceText \u003d recurrence.get(0).split(\";\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                recurrenceText \u003d recurrence.get(2).split(\";\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //nothing"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            int rrulePosition \u003d recurrenceText[0].indexOf(\"\u003d\") + 1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            String rRule \u003d recurrenceText[0].substring(rrulePosition); //RRULE:FREQ\u003dWEEKLY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            switch (rRule) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            case \"YEARLY\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                repeatType \u003d RepeatType.YEARLY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            case \"MONTHLY\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                repeatType \u003d RepeatType.MONTHLY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            case \"WEEKLY\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                repeatType \u003d RepeatType.WEEKLY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            case \"DAILY\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                repeatType \u003d RepeatType.DAILY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                repeatType \u003d RepeatType.NONE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            switch (recurrenceText.length) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //RRULE:FREQ\u003dWEEKLY;BYDAY\u003dMO,TU,WE,TH"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //ignore in local implementation"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //RRULE:FREQ\u003dWEEKLY;UNTIL\u003d20181108T155959Z;BYDAY\u003dMO,TU,WE,TH"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    //local format:2018-10-20T17:00:00"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    //UNTIL\u003d20181108T155959Z"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    String newRepeatUntil \u003d recurrenceText[1].substring(6, 19);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    StringBuilder newRepeatUntil2 \u003d new StringBuilder(newRepeatUntil);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    newRepeatUntil2.insert(4, \"-\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                            .insert(7, \"-\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                            .insert(13, \":\")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                            .append(\":00\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    repeatUntilDateTime \u003d ParserUtil.parseDateTime(newRepeatUntil2.toString());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //nothing"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Reminders reminder \u003d googleEvent.getReminders();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (reminder.getUseDefault()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            reminderDurationList.add(Duration.ofMinutes(30));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            List\u003cEventReminder\u003e reminderOverrides \u003d reminder.getOverrides();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            for (EventReminder eventReminder : reminderOverrides) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                reminderDurationList.add(Duration.ofMinutes(eventReminder.getMinutes()));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Set\u003cTag\u003e tags \u003d Collections.emptySet();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return new Event(eventName, startDateTime, endDateTime,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                venue, repeatType, repeatUntilDateTime, tags, reminderDurationList);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Calculates the relative index of an existing recurring event instance to the first recurring event instance."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param lastShownList The last shown list of events."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToDelete The recurring event to be deleted."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return The relative index of the event to be deleted to the first recurring event."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static int calculateInstanceIndex(List\u003cEvent\u003e lastShownList, Event eventToDelete) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        int counter \u003d -1;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003cEvent\u003e lastShownListSorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        for (Event event : lastShownList) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            lastShownListSorted.add(event);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Collections.sort(lastShownListSorted, ("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                a, b) -\u003e a.getStartDateTime()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        .compareTo(b.getStartDateTime()));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        for (Event event : lastShownListSorted) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            if (event.getEventSetUid().equals(eventToDelete.getEventSetUid())) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            if (event.getEventUid() \u003d\u003d eventToDelete.getEventUid()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Calculates total number of existing recurring event instance."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param lastShownList The last shown list of events."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToDelete The recurring event to be deleted."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return The relative index of the event to be deleted to the first recurring event."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static int calculateTotalInstanceNumber(List\u003cEvent\u003e lastShownList, Event eventToDelete) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        int counter \u003d -1;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        for (Event event : lastShownList) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            if (event.getEventSetUid().equals(eventToDelete.getEventSetUid())) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YezhongZ": 285
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/web/ConnectToGoogleCalendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "package seedu.scheduler.commons.web;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import static com.google.api.client.util.DateTime.parseRfc3339;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.net.UnknownHostException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.http.javanet.NetHttpTransport;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.json.JsonFactory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.json.jackson2.JacksonFactory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.util.DateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.client.util.store.FileDataStoreFactory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.Calendar;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.CalendarScopes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.model.Event.Reminders;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.model.EventDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.model.EventReminder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.model.Events;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.util.EventFormatUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.logic.commands.GetGoogleCalendarEventsCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.ui.UiManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " * Methods related to the connection with Google Calendar."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "public class ConnectToGoogleCalendar {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Global instance of the scopes required."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final JsonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final List\u003cString\u003e SCOPES \u003d Collections.singletonList(CalendarScopes.CALENDAR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final String CREDENTIALS_FILE_PATH \u003d \"/credentials/credentials.json\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final String CALENDAR_NAME \u003d \"primary\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final String MESSAGE_INTERNET_ERROR \u003d \"Internet connection error. Please check your network.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private boolean googleCalendarEnabled \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public boolean isGoogleCalendarEnabled() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return googleCalendarEnabled;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void setGoogleCalendarEnabled() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.googleCalendarEnabled \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Calendar getCalendar() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        NetHttpTransport httpTransport \u003d getNetHttpTransport();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        // Build Google calender service object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Calendar service \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //re-direct the stdout"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //One of the Google APIs outputs to stdout which causes warning"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            System.setOut(new PrintStream(new OutputStream() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                public void write(int b) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    //no code needed here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            service \u003d new Calendar.Builder(httpTransport, JSON_FACTORY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    getCredentials(httpTransport))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .setApplicationName(\"iScheduler Xs Max\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //re-direct back to the stdout"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            System.setOut(System.out);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return service;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public NetHttpTransport getNetHttpTransport() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        // Build a new authorized API client service."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        NetHttpTransport httpTransport \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return httpTransport;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Creates an authorized Credential object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param httpTransport The network HTTP Transport."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return An authorized Credential object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @throws IOException If the credentials.json file cannot be found."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static Credential getCredentials(final NetHttpTransport httpTransport) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        GoogleClientSecrets clientSecrets \u003d getGoogleClientSecrets();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        // Build flow and trigger user authorization request."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                httpTransport, JSON_FACTORY, clientSecrets,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                SCOPES)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .setDataStoreFactory(new FileDataStoreFactory(new File(\"tokens\")))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .setAccessType(\"offline\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize(\"user\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static GoogleClientSecrets getGoogleClientSecrets() throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        // Load client secrets."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        InputStream in \u003d GetGoogleCalendarEventsCommand.class"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .getResourceAsStream(CREDENTIALS_FILE_PATH);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * To check whether internet is available."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @return true if available, false otherwise."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static boolean netIsAvailable() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            final URL url \u003d new URL(\"http://www.google.com\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            final URLConnection conn \u003d url.openConnection();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            conn.connect();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            conn.getInputStream().close();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Pushes the event(s) to Google Calendar."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void pushToGoogleCal(List\u003cEvent\u003e toAddList) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        logger.info(\"Starting to push events Google Calendar\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Calendar service \u003d getCalendar();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        com.google.api.services.calendar.model.Event gEvent \u003d new com.google.api.services.calendar.model.Event();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        for (Event toAddEvent : toAddList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            gEvent \u003d setCommonAttributes(gEvent, toAddEvent);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            if (toAddEvent.getRepeatType() \u003d\u003d RepeatType.NONE) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                gEvent \u003d gEvent.setId(toAddEvent.getEventUid()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        .toString()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        .replaceAll(\"-\", \"\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } else { //repeated event"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                gEvent \u003d setRepeatAttribute(gEvent, toAddEvent);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                service.events().insert(CALENDAR_NAME, gEvent).execute();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private com.google.api.services.calendar.model.Event setRepeatAttribute("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            com.google.api.services.calendar.model.Event gEvent, Event toAddEvent) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String googleRecurringEventId \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                EventFormatUtil.getEventSetUidInGoogleFormatFromLocalEvent(toAddEvent);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        com.google.api.services.calendar.model.Event gEvent2 \u003d gEvent.setICalUID(googleRecurringEventId);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String eventRepeatType \u003d String.valueOf(toAddEvent.getRepeatType());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        seedu.scheduler.model.event.DateTime eventUntilDt \u003d toAddEvent.getRepeatUntilDateTime();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String eventUntilDate \u003d eventUntilDt.getPrettyString()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //local:2019-01-01 18:51:52"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .replaceAll(\"-\", \"\")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //local:20190101 18:51:52"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .replaceFirst(\" \", \"T\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //local:20190101T18:51:52"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .replaceAll(\":\", \"\")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //local:20190101T185152"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .concat(\"Z\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String commandMessage \u003d \"RRULE:FREQ\u003d\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                + eventRepeatType"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                + \";UNTIL\u003d\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                + eventUntilDate;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Google format:20110701T170000Z"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        gEvent2.setRecurrence(Arrays.asList(commandMessage));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return gEvent;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private com.google.api.services.calendar.model.Event setCommonAttributes("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            com.google.api.services.calendar.model.Event gEvent, Event toAddEvent) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        gEvent.setSummary(String.valueOf(toAddEvent.getEventName()));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        gEvent.setLocation(String.valueOf(toAddEvent.getVenue()));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        gEvent.setDescription(String.valueOf(toAddEvent.getDescription()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String startDateTime \u003d EventFormatUtil.convertStartDateTimeToGoogleFormat(toAddEvent);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        DateTime start \u003d parseRfc3339(startDateTime);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        gEvent.setStart(new EventDateTime().setDateTime(start).setTimeZone(\"Singapore\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String endDateTime \u003d EventFormatUtil.convertEndDateTimeToGoogleFormat(toAddEvent);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        DateTime end \u003d parseRfc3339(endDateTime);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        gEvent.setEnd(new EventDateTime().setDateTime(end).setTimeZone(\"Singapore\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        ReminderDurationList reminderDurationList \u003d toAddEvent.getReminderDurationList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003cEventReminder\u003e reminderOverrides \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Set\u003cDuration\u003e reminderMap \u003d reminderDurationList.get();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Reminders reminder \u003d new Reminders();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        reminder.setUseDefault(false);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        for (Duration key : reminderMap) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            EventReminder eventReminder \u003d new EventReminder();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            eventReminder.setMethod(\"popup\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            eventReminder.setMinutes(Math.toIntExact(key.toMinutes()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            reminderOverrides.add(eventReminder);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        reminder.setOverrides(reminderOverrides);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        gEvent.setReminders(reminder);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return gEvent;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Deletes an existing event in the Google Calendar."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToDelete a local Event."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param instanceIndex the instance index for recurring event."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void deleteOnGoogleCal(Event eventToDelete, int instanceIndex) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Calendar service \u003d getCalendar();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003cString\u003e eventIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String recurringEventId \u003d null;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        boolean repeatedEventsFound \u003d false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events allEventsOnGoogle \u003d null;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        boolean isRepeatEvent;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventToDelete.getRepeatType() \u003d\u003d RepeatType.NONE) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            isRepeatEvent \u003d false;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            isRepeatEvent \u003d true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //For single event"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (!isRepeatEvent) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            eventIds.add(eventToDelete.getEventUid()"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .replaceAll(\"-\", \"\"));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventToDelete.getRepeatType() \u003d\u003d RepeatType.NONE) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                service.events().delete(CALENDAR_NAME, eventIds.get(0)).execute();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //For repeated events"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (isRepeatEvent) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            String eventSetUid \u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    EventFormatUtil.getEventSetUidInGoogleFormatFromLocalEvent(eventToDelete);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                allEventsOnGoogle \u003d getSingleEvents(service);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            assert allEventsOnGoogle !\u003d null;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            for (com.google.api.services.calendar.model.Event event : allEventsOnGoogle.getItems()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                if (Objects.equals(event.getICalUID(), eventSetUid)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    eventIds.add(event.getId());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    repeatedEventsFound \u003d true;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    recurringEventId \u003d event.getRecurringEventId();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Case: delete single instance"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //No such event online"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (!repeatedEventsFound) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.warning(\"There is no such event on Google Calendar!\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    + \"Delete on Google Calendar is NOT done!\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                assert recurringEventId !\u003d null;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                Events instances \u003d service.events().instances(CALENDAR_NAME, recurringEventId).execute();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                com.google.api.services.calendar.model.Event instance \u003d instances.getItems().get(instanceIndex);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                instance.setStatus(\"cancelled\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                service.events().update(CALENDAR_NAME, instance.getId(), instance).execute();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Deletes upcoming repeat events in the Google Calendar."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToDelete a local Event."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param instanceIndex the instance index for recurring event."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param totalInstance"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void deleteUpcomingOnGoogleCal(Event eventToDelete, int instanceIndex, int totalInstance) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Calendar service \u003d getCalendar();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003cString\u003e eventIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String recurringEventId \u003d null;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        boolean repeatedEventsFound \u003d false;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events allEventsOnGoogle \u003d null;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        boolean isRepeatEvent;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventToDelete.getRepeatType() \u003d\u003d RepeatType.NONE) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            isRepeatEvent \u003d false;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            isRepeatEvent \u003d true;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //For single event"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (!isRepeatEvent) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            eventIds.add(eventToDelete.getEventUid()"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .replaceAll(\"-\", \"\"));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventToDelete.getRepeatType() \u003d\u003d RepeatType.NONE) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                service.events().delete(CALENDAR_NAME, eventIds.get(0)).execute();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //For repeated events"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (isRepeatEvent) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            String eventSetUid \u003d"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    EventFormatUtil.getEventSetUidInGoogleFormatFromLocalEvent(eventToDelete);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                allEventsOnGoogle \u003d getSingleEvents(service);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            for (com.google.api.services.calendar.model.Event"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    event : allEventsOnGoogle.getItems()) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                if (Objects.equals(event.getICalUID(), eventSetUid)) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    eventIds.add(event.getId());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    repeatedEventsFound \u003d true;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    recurringEventId \u003d event.getRecurringEventId();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (!repeatedEventsFound) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //No such event online"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.warning(\"There is no such event on Google Calendar!\""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    + \"Delete on Google Calendar is NOT done!\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            assert recurringEventId !\u003d null;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //Case: Delete upcoming"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            Events instances \u003d null;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                instances \u003d service.events().instances(CALENDAR_NAME, recurringEventId).execute();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                assert instances !\u003d null;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                for (int i \u003d instanceIndex; i \u003c\u003d totalInstance; i++) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    com.google.api.services.calendar.model.Event instance \u003d instances.getItems().get(i);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    instance.setStatus(\"cancelled\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    service.events().update(CALENDAR_NAME, instance.getId(), instance).execute();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Deletes all repeat event instances in the Google Calendar."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToDelete a local Event."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param instanceIndex the instance index for recurring event."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void deleteAllOnGoogleCal(Event eventToDelete, int instanceIndex) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Calendar service \u003d getCalendar();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003cString\u003e eventIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String recurringEventId \u003d null;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        boolean repeatedEventsFound \u003d false;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events allEventsOnGoogle \u003d null;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        boolean isRepeatEvent;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventToDelete.getRepeatType() \u003d\u003d RepeatType.NONE) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            isRepeatEvent \u003d false;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            isRepeatEvent \u003d true;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //For single event"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (!isRepeatEvent) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            eventIds.add(eventToDelete.getEventUid()"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .replaceAll(\"-\", \"\"));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventToDelete.getRepeatType() \u003d\u003d RepeatType.NONE) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                service.events().delete(CALENDAR_NAME, eventIds.get(0)).execute();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //For repeated events"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (isRepeatEvent) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            String eventSetUid \u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    EventFormatUtil.getEventSetUidInGoogleFormatFromLocalEvent(eventToDelete);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                allEventsOnGoogle \u003d getSingleEvents(service);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            for (com.google.api.services.calendar.model.Event event : allEventsOnGoogle.getItems()) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                if (Objects.equals(event.getICalUID(), eventSetUid)) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    eventIds.add(event.getId());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    repeatedEventsFound \u003d true;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    recurringEventId \u003d event.getRecurringEventId();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //No such event online"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (!repeatedEventsFound) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.warning(\"There is no such event on Google Calendar!\""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    + \"Delete on Google Calendar is NOT done!\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            assert recurringEventId !\u003d null;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //Case: Delete All"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            for (String eventId : eventIds) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    service.events().delete(CALENDAR_NAME, eventId).execute();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Edits the details of an existing event in the Google Calendar."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToEdit a local Event."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param editedEvent an edited local Event."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void updateSingleGoogleEvent("
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            Event eventToEdit, Event editedEvent, int instanceIndex) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        assert editedEvent !\u003d null;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Calendar service \u003d getCalendar();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Case1: The event is an instance of repeated event"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //get the EventUid"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventToEdit.isRepeatEvent()) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            updateSingleRepeatInstance(eventToEdit, editedEvent, instanceIndex, service);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //Case2: The event is not an instance of Repeated Event"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            updateSingleNonRepeatEvent(eventToEdit, editedEvent, service);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Edits the details of an existing instance of a eventSet in the Google Calendar."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToEdit   a local Event."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param editedEvent   an edited local Event."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param instanceIndex the index of the eventToEdit in the eventSet"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param service       the Google service object"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private void updateSingleRepeatInstance(Event eventToEdit, Event editedEvent,"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                                            int instanceIndex, Calendar service) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String recurringEventId \u003d getRecurringEventId(eventToEdit, service);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (recurringEventId \u003d\u003d null) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Update the repeated event"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events instances \u003d null;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            assert recurringEventId !\u003d null;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            instances \u003d service.events()"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .instances(CALENDAR_NAME, recurringEventId)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .execute();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //Sort the instances according to DateTime"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            List\u003ccom.google.api.services.calendar.model.Event\u003e instanceSort \u003d instances.getItems();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            Collections.sort(instanceSort, ("
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    a, b) -\u003e a.getStart().getDateTime().toString()"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .compareTo(b.getStart().getDateTime().toString()));"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //Get the wanted instance, edit and update"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            com.google.api.services.calendar.model.Event instance \u003d instanceSort.get(instanceIndex);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            instance \u003d setCommonAttributes(instance, editedEvent);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            instance \u003d setRepeatAttribute(instance, editedEvent);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            service.events().update(CALENDAR_NAME, instance.getId(), instance).execute();"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Edits the details of an existing event in the Google Calendar."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToEdit a local Event."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param editedEvent an edited local Event."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param service     google service"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private void updateSingleNonRepeatEvent(Event eventToEdit, Event editedEvent, Calendar service) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String gEventId;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        com.google.api.services.calendar.model.Event gEvent \u003d null;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        com.google.api.services.calendar.model.Event updatedgEvent \u003d null;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        gEventId \u003d EventFormatUtil.getEventUidInGoogleFormatFromLocalEvent(eventToEdit);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //retrieve event using event Uid"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            Events events \u003d getSingleEvents(service);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            for (com.google.api.services.calendar.model.Event tempGEvent : events.getItems()) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                if (Objects.equals(tempGEvent.getId(), gEventId)) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Next action:Edit if found, return error if not found"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (!found) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.warning(\"Event not found! Update failed!\");"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                gEvent \u003d service.events().get(CALENDAR_NAME, gEventId).execute();"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                assert gEvent !\u003d null;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                gEvent \u003d setCommonAttributes(gEvent, editedEvent);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                updatedgEvent \u003d service.events().update(CALENDAR_NAME, gEventId, gEvent).execute();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                assert updatedgEvent !\u003d null;"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                updatedgEvent.getUpdated();"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Edits the details of all existing repeated events in the Google Calendar."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param eventToEdit     a local Event."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param editedEvents    an edited local Event."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * @param rangeStartIndex the effect of update will start from this index"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void updateRangeGoogleEvent("
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            Event eventToEdit, List\u003cEvent\u003e editedEvents, int instanceIndex, int rangeStartIndex) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        assert !editedEvents.isEmpty();"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        assert editedEvents.get(0).isRepeatEvent();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Calendar service \u003d getCalendar();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String recurringEventId \u003d getRecurringEventId(eventToEdit, service);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (recurringEventId \u003d\u003d null) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events instances \u003d null;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (instanceIndex \u003e 0) {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                assert recurringEventId !\u003d null;"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                instances \u003d service.events()"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        .instances(CALENDAR_NAME, recurringEventId)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        .execute();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                List\u003ccom.google.api.services.calendar.model.Event\u003e instanceSort \u003d instances.getItems();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                Collections.sort(instanceSort, ("
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        a, b) -\u003e a.getStart().getDateTime().toString()"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        .compareTo(b.getStart().getDateTime().toString()));"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                int editedEventIndex \u003d 0;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                for (int i \u003d rangeStartIndex; i \u003c instanceSort.size(); i++) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    com.google.api.services.calendar.model.Event instance \u003d instanceSort.get(i);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    instance \u003d setCommonAttributes(instance, editedEvents.get(editedEventIndex));"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    instance \u003d setRepeatAttribute(instance, editedEvents.get(editedEventIndex));"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    service.events().update(CALENDAR_NAME, instance.getId(), instance).execute();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    editedEventIndex++;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //If the Event is the first instance of the EventSet"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Google recommends to change the EventSet as a whole"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (instanceIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                com.google.api.services.calendar.model.Event gEvent \u003d null;"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                gEvent \u003d service.events()"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        .get(CALENDAR_NAME,"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                                Objects.requireNonNull(recurringEventId)).execute();"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                gEvent \u003d setCommonAttributes(gEvent, editedEvents.get(0));"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                gEvent \u003d setRepeatAttribute(gEvent, editedEvents.get(0));"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                service.events()"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        .update(CALENDAR_NAME, recurringEventId, gEvent).execute();"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private String getRecurringEventId(Event eventToEdit, Calendar service) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String recurringEventId \u003d null;"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events allEventsOnGoogle \u003d null;"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String eventSetUid \u003d"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                EventFormatUtil.getEventSetUidInGoogleFormatFromLocalEvent(eventToEdit);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.info(\"Trying to download Google Events from Calendar Service.\");"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            allEventsOnGoogle \u003d getSingleEvents(service);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        logger.info(\"Trying to retrieve GoogleEvents from Events.\");"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        assert allEventsOnGoogle !\u003d null;"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        for (com.google.api.services.calendar.model.Event event : allEventsOnGoogle.getItems()) {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            if (Objects.equals(event.getICalUID(), eventSetUid)) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                recurringEventId \u003d event.getRecurringEventId();"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (recurringEventId \u003d\u003d null) {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.warning(\"RecurringEventId is not found.\""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    + \"No such repeated event on Google Calendar.\");"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return recurringEventId;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Events getEvents(Calendar service) throws UnknownHostException {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //TODO:Currently number is hardcoded, maybe can ask user to imputthis."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //max 2500 by Google"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //default value is 250 if not specified"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        int numberOfEventsToBeDownloaded \u003d 999;"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        // List the next [userinput] events from calendar name specified by CALENDAR_NAME."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        DateTime now \u003d new DateTime(System.currentTimeMillis());"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events events \u003d null;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            events \u003d service.events().list(CALENDAR_NAME)//set the source calendar on google"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .setMaxResults(numberOfEventsToBeDownloaded) //set upper limit for number of events"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .setTimeMin(now)//set the starting time"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .execute();"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (java.net.SocketException e2) {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new CommandResult(MESSAGE_INTERNET_ERROR);"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e2.printStackTrace();"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (IOException e3) {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new CommandResult(MESSAGE_INTERNET_ERROR);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e3.printStackTrace();"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Events getSingleEvents(Calendar service) throws UnknownHostException {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //TODO:Currently number is hardcoded, maybe can ask user to imputthis."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //max 2500 by Google"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //default value is 250 if not specified"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        int numberOfEventsToBeDownloaded \u003d 999;"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        // List the next [userinput] events from calendar name specified by CALENDAR_NAME."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        DateTime now \u003d new DateTime(System.currentTimeMillis());"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events events \u003d null;"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            events \u003d service.events().list(CALENDAR_NAME)//set the source calendar on google"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .setMaxResults(numberOfEventsToBeDownloaded) //set upper limit for number of events"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .setTimeMin(now)//set the starting time"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    //.setOrderBy(\"startTime\")//if not specified, stable order"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    //TODO: further development can be done for repeated event, more logic must be written"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .setSingleEvents(true)//not the repeated ones"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    //TODO: how to use setSynctoken, to prevent adding the same event multiples times"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    .execute();"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (java.net.SocketException e2) {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.warning(MESSAGE_INTERNET_ERROR);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new CommandResult(MESSAGE_INTERNET_ERROR);"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e2.printStackTrace();"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (IOException e3) {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.warning(MESSAGE_INTERNET_ERROR);"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new CommandResult(MESSAGE_INTERNET_ERROR);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            e3.printStackTrace();"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YezhongZ": 735
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 7,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.SchedulerParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final SchedulerParser schedulerParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        schedulerParser \u003d new SchedulerParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Command command \u003d schedulerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 15,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/RepeatEventGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Generates a list of repeated event for the scheduler if events are repeated events."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class RepeatEventGenerator {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static RepeatEventGenerator instance \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private RepeatEventGenerator() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static RepeatEventGenerator getInstance() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            instance \u003d new RepeatEventGenerator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Generate all repeated events from {@code targetEvent} according to its repeat type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code targetEvent} must have a valid event repeat type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns an unmodifiable list of repeated events."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public List\u003cEvent\u003e generateAllRepeatedEvents(Event targetEvent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        switch(targetEvent.getRepeatType()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Collections.unmodifiableList(generateDailyRepeatEvents(targetEvent));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Collections.unmodifiableList(generateWeeklyRepeatEvents(targetEvent));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Collections.unmodifiableList(generateMonthlyRepeatEvents(targetEvent));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        case YEARLY:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Collections.unmodifiableList(generateYearlyRepeatEvents(targetEvent));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return List.of(targetEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Generate all events that are repeated daily from {@code targetEvent}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a list of events that are repeated daily."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public List\u003cEvent\u003e generateDailyRepeatEvents(Event targetEvent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e repeatedEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime repeatStartDateTime \u003d targetEvent.getStartDateTime().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime repeatUntilDateTime \u003d targetEvent.getRepeatUntilDateTime().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Duration durationDiff \u003d Duration.between(targetEvent.getStartDateTime().value,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                targetEvent.getEndDateTime().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        while (repeatStartDateTime.isBefore(repeatUntilDateTime)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            repeatedEventList.add(new Event("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    targetEvent.getEventSetUid(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getEventName(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(repeatStartDateTime),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(repeatStartDateTime.plus(durationDiff)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getDescription(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getVenue(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getRepeatType(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getRepeatUntilDateTime(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getTags(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getReminderDurationList()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            repeatStartDateTime \u003d repeatStartDateTime.plusDays(1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return repeatedEventList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Generate all events that are repeated weekly from {@code targetEvent}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a list of events that are repeated weekly."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public List\u003cEvent\u003e generateWeeklyRepeatEvents(Event targetEvent) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e repeatedEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime repeatStartDateTime \u003d targetEvent.getStartDateTime().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime repeatUntilDateTime \u003d targetEvent.getRepeatUntilDateTime().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Duration durationDiff \u003d Duration.between(targetEvent.getStartDateTime().value,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                targetEvent.getEndDateTime().value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        while (repeatStartDateTime.isBefore(repeatUntilDateTime)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            repeatedEventList.add(new Event("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    targetEvent.getEventSetUid(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getEventName(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(repeatStartDateTime),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(repeatStartDateTime.plus(durationDiff)),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getDescription(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getVenue(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getRepeatType(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getRepeatUntilDateTime(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getTags(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getReminderDurationList()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            repeatStartDateTime \u003d repeatStartDateTime.plusWeeks(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return repeatedEventList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Generate all events that are repeated monthly from {@code targetEvent}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a list of events that are repeated monthly."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public List\u003cEvent\u003e generateMonthlyRepeatEvents(Event targetEvent) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e repeatedEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime repeatStartDateTime \u003d targetEvent.getStartDateTime().value;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime repeatUntilDateTime \u003d targetEvent.getRepeatUntilDateTime().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Duration durationDiff \u003d Duration.between(targetEvent.getStartDateTime().value,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                targetEvent.getEndDateTime().value);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        while (repeatStartDateTime.isBefore(repeatUntilDateTime)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            repeatedEventList.add(new Event("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    targetEvent.getEventSetUid(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getEventName(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(repeatStartDateTime),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(repeatStartDateTime.plus(durationDiff)),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getDescription(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getVenue(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getRepeatType(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getRepeatUntilDateTime(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getTags(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getReminderDurationList()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            repeatStartDateTime \u003d repeatStartDateTime.with((temporal) -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        temporal \u003d temporal.plus(1, ChronoUnit.MONTHS).with(ChronoField.DAY_OF_MONTH,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                targetEvent.getStartDateTime().value.getDayOfMonth());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        temporal \u003d temporal.plus(1, ChronoUnit.MONTHS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                } while (temporal.get(ChronoField.DAY_OF_MONTH)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        !\u003d targetEvent.getStartDateTime().value.getDayOfMonth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                return temporal;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return repeatedEventList;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Generate all events that are repeated yearly from {@code targetEvent}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a list of events that are repeated yearly."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public List\u003cEvent\u003e generateYearlyRepeatEvents(Event targetEvent) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e repeatedEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime repeatStartDateTime \u003d targetEvent.getStartDateTime().value;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime repeatUntilDateTime \u003d targetEvent.getRepeatUntilDateTime().value;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Duration durationDiff \u003d Duration.between(targetEvent.getStartDateTime().value,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                targetEvent.getEndDateTime().value);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        while (repeatStartDateTime.isBefore(repeatUntilDateTime)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            repeatedEventList.add(new Event("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    targetEvent.getEventSetUid(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getEventName(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(repeatStartDateTime),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(repeatStartDateTime.plus(durationDiff)),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getDescription(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getVenue(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getRepeatType(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getRepeatUntilDateTime(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getTags(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    targetEvent.getReminderDurationList()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            repeatStartDateTime \u003d repeatStartDateTime.with((temporal) -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        temporal \u003d temporal.plus(1, ChronoUnit.YEARS).with(ChronoField.DAY_OF_MONTH,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                targetEvent.getStartDateTime().value.getDayOfMonth());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        temporal \u003d temporal.plus(1, ChronoUnit.YEARS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                } while (temporal.get(ChronoField.DAY_OF_MONTH)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        !\u003d targetEvent.getStartDateTime().value.getDayOfMonth());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                return temporal;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return repeatedEventList;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 182,
      "YezhongZ": 4
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_REMINDER_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.web.ConnectToGoogleCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.RepeatEventGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Adds an event to the scheduler."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"ad\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"a\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the scheduler. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + PREFIX_EVENT_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"[\" + PREFIX_START_DATE_TIME + \"DATETIME in natural language] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"[\" + PREFIX_END_DATE_TIME + \"DATETIME in natural language] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + PREFIX_EVENT_NAME + \"Study with me \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + PREFIX_START_DATE_TIME + \"today 5pm \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + PREFIX_END_DATE_TIME + \"tomorrow 3am \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Studying time \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + PREFIX_TAG + \"study \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            + PREFIX_TAG + \"adhoc\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            + PREFIX_EVENT_REMINDER_DURATION + \"1h\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the scheduler\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private final ConnectToGoogleCalendar connectToGoogleCalendar \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new ConnectToGoogleCalendar();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public AddCommand(Event event) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.addEvents(RepeatEventGenerator.getInstance().generateAllRepeatedEvents(toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        connectToGoogleCalendar.pushToGoogleCal(Collections.singletonList(toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 toAdd.getEventName().equals(((AddCommand) other).toAdd.getEventName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 toAdd.getStartDateTime().equals(((AddCommand) other).toAdd.getStartDateTime())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 toAdd.getEndDateTime().equals(((AddCommand) other).toAdd.getEndDateTime())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 toAdd.getDescription().equals(((AddCommand) other).toAdd.getDescription())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 toAdd.getVenue().equals(((AddCommand) other).toAdd.getVenue())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 toAdd.getRepeatType().equals(((AddCommand) other).toAdd.getRepeatType())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 toAdd.getRepeatUntilDateTime().equals(((AddCommand) other).toAdd.getRepeatUntilDateTime())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 toAdd.getTags().equals(((AddCommand) other).toAdd.getTags()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 3,
      "ChengYuuu": 42,
      "YezhongZ": 7,
      "-": 34,
      "HEARTOFAL1ON": 2
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/AddTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds an tag to the scheduler."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tag to the scheduler. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"TAG\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"exam \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added to scheduler: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in the scheduler\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Tag toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddTagCommand to add the specified {@code Tag}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddTagCommand(Tag tag) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "HEARTOFAL1ON": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Clears all events in scheduler."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"clea\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"cle\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"cl\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_FOUR \u003d \"c\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scheduler has been cleared!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.resetData(new Scheduler());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 8,
      "-": 16,
      "HEARTOFAL1ON": 4
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.FLAG_UPCOMING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.util.EventFormatUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.web.ConnectToGoogleCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.Flag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Deletes a event identified using it\u0027s displayed index from the scheduler."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"delet\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"dele\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"del\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_FOUR \u003d \"de\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_FIVE \u003d \"d\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"Compulsory Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"Optional Flags (Only one at a time):\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"-u: delete all upcoming events\\n\" + \"-a: delete all similar repeating events\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 -a\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private final ConnectToGoogleCalendar connectToGoogleCalendar \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new ConnectToGoogleCalendar();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Flag[] flags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public DeleteCommand(Index targetIndex, Flag... flags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.flags \u003d flags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        int instanceIndex \u003d EventFormatUtil.calculateInstanceIndex(lastShownList, eventToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        int totalInstance \u003d EventFormatUtil.calculateTotalInstanceNumber(lastShownList, eventToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (flags.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            connectToGoogleCalendar.deleteOnGoogleCal(eventToDelete, instanceIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            if (flags[0].equals(FLAG_UPCOMING)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                connectToGoogleCalendar.deleteUpcomingOnGoogleCal(eventToDelete, instanceIndex, totalInstance);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                model.deleteUpcomingEvents(eventToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            } else { //will catch FLAG_ALL"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                connectToGoogleCalendar.deleteAllOnGoogleCal(eventToDelete, instanceIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                model.deleteRepeatingEvents(eventToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete.getEventName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 34,
      "YezhongZ": 9,
      "-": 35,
      "HEARTOFAL1ON": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.FLAG_UPCOMING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.util.EventFormatUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.web.ConnectToGoogleCalendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.RepeatEventGenerator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.Flag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Edits the details of an existing event in the scheduler."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"edi\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"ed\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"[\" + PREFIX_EVENT_NAME + \"NAME] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"[\" + PREFIX_EVENT_NAME + \"EMAIL] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"[\" + PREFIX_EVENT_NAME + \"ADDRESS] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + PREFIX_EVENT_NAME + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private final ConnectToGoogleCalendar connectToGoogleCalendar \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new ConnectToGoogleCalendar();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Flag[] flags;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param index               of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditCommand(Index index, EditEventDescriptor editEventDescriptor, Flag... flags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.flags \u003d flags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.info(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Set up event to be edited and edited event according to user input"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        logger.info(\"Creating event to be edited.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToEdit;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Calculate parameters for updating events in Google Calender"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        logger.info(\"Calculating parameters for Google calender edit commands.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        int instanceIndex \u003d EventFormatUtil.calculateInstanceIndex(lastShownList, eventToEdit);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Update by cases"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Case1: edit single event"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        logger.info(\"The EditCommand will be executed by cases.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (flags.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.info(\"Single event will be edited.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            connectToGoogleCalendar.updateSingleGoogleEvent("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    eventToEdit, editedEvent, instanceIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            model.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //edit upcoming or all events in a EventSet"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            logger.info(\"The upcoming events in a EventSet to be edited.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Predicate\u003cEvent\u003e firstInstancePredicate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Event firstEventToEdit;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            List\u003cEvent\u003e editedEvents \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            int effectRangeStartingIndex;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            if (flags[0].equals(FLAG_UPCOMING)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //Case2: edit upcoming events"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                editedEvents \u003d createEditedEvents(eventToEdit, eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                effectRangeStartingIndex \u003d instanceIndex;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                connectToGoogleCalendar.updateRangeGoogleEvent("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        eventToEdit, editedEvents, instanceIndex, effectRangeStartingIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                model.updateUpcomingEvents(eventToEdit, editedEvents);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                //Case3: edit all events"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                logger.info(\"All the events in a EventSet to be edited.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                firstInstancePredicate \u003d getFirstInstancePredicate("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                firstEventToEdit \u003d model.getFirstInstanceOfEvent(firstInstancePredicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                editedEvents \u003d createEditedEvents(eventToEdit, firstEventToEdit,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        editEventDescriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                effectRangeStartingIndex \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                connectToGoogleCalendar.updateRangeGoogleEvent("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        eventToEdit, editedEvents, instanceIndex, effectRangeStartingIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                model.updateRepeatingEvents(eventToEdit, editedEvents);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        logger.info(\"Update Done. Commit to Scheduler.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, eventToEdit.getEventName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit} edited with {@code"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * editEventDescriptor}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        UUID eventUid \u003d editEventDescriptor.getEventUid().orElse(eventToEdit.getEventUid());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        UUID eventUuid \u003d editEventDescriptor.getEventSetUid().orElse(eventToEdit.getEventSetUid());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventName updatedEventName \u003d editEventDescriptor.getEventName().orElse(eventToEdit.getEventName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime updatedStartDateTime \u003d editEventDescriptor.getStartDateTime().orElse(eventToEdit.getStartDateTime());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime updatedEndDateTime \u003d editEventDescriptor.getEndDateTime().orElse(eventToEdit.getEndDateTime());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Venue updatedVenue \u003d editEventDescriptor.getVenue().orElse(eventToEdit.getVenue());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        RepeatType updatedRepeatType \u003d editEventDescriptor.getRepeatType().orElse(eventToEdit.getRepeatType());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime updatedRepeatUntilDateTime \u003d editEventDescriptor.getRepeatUntilDateTime()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .orElse(eventToEdit.getRepeatUntilDateTime());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEventDescriptor.getTags().orElse(eventToEdit.getTags());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ReminderDurationList updatedReminderDurationList \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                editEventDescriptor.getReminderDurationList().orElse(eventToEdit.getReminderDurationList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return new Event(eventUid, eventUuid, updatedEventName, updatedStartDateTime, updatedEndDateTime,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                updatedDescription, updatedVenue, updatedRepeatType, updatedRepeatUntilDateTime, updatedTags,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                updatedReminderDurationList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Creates and returns a {@code List\u003cEvent\u003e} with repeated events generated with details from {@code"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * editEventDescriptor}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static List\u003cEvent\u003e createEditedEvents(Event eventToEdit, Event firstEventToEdit,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                                  EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assert firstEventToEdit !\u003d null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        UUID eventUid \u003d editEventDescriptor.getEventUid().orElse(eventToEdit.getEventUid());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        UUID eventUuid \u003d editEventDescriptor.getEventSetUid().orElse(eventToEdit.getEventSetUid());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventName updatedEventName \u003d editEventDescriptor.getEventName().orElse(eventToEdit.getEventName());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime updatedStartDateTime \u003d new DateTime(firstEventToEdit.getStartDateTime().value"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .plus(Duration.between(eventToEdit.getStartDateTime().value,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        editEventDescriptor.getStartDateTime().orElse(eventToEdit.getStartDateTime()).value)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime updatedEndDateTime \u003d new DateTime(firstEventToEdit.getEndDateTime().value"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .plus(Duration.between(eventToEdit.getEndDateTime().value,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        editEventDescriptor.getEndDateTime().orElse(eventToEdit.getEndDateTime()).value)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Venue updatedVenue \u003d editEventDescriptor.getVenue().orElse(eventToEdit.getVenue());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        RepeatType updatedRepeatType \u003d editEventDescriptor.getRepeatType().orElse(eventToEdit.getRepeatType());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime updatedRepeatUntilDateTime \u003d editEventDescriptor.getRepeatUntilDateTime()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .orElse(eventToEdit.getRepeatUntilDateTime());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEventDescriptor.getTags().orElse(eventToEdit.getTags());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ReminderDurationList updatedReminderDurationList \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                editEventDescriptor.getReminderDurationList().orElse(eventToEdit.getReminderDurationList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event updatedEvent \u003d new Event(eventUid, eventUuid, updatedEventName, updatedStartDateTime, updatedEndDateTime,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                updatedDescription, updatedVenue, updatedRepeatType, updatedRepeatUntilDateTime, updatedTags,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                updatedReminderDurationList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return RepeatEventGenerator.getInstance().generateAllRepeatedEvents(updatedEvent);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Creates a predicate which is use to get the first instance of {@code eventToEdit}. The criteria for first"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * instance of {@code eventToEdit} is found in the edited repeat type from {@code editEventDescriptor}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static Predicate\u003cEvent\u003e getFirstInstancePredicate(Event eventToEdit,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                                              EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!editEventDescriptor.getRepeatType().isPresent()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return event -\u003e event.getEventSetUid().equals(eventToEdit.getEventSetUid());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        RepeatType updatedRepeatType \u003d editEventDescriptor.getRepeatType().get();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime updatedStartDateTime \u003d editEventDescriptor.getStartDateTime().orElse(eventToEdit.getStartDateTime());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        switch (updatedRepeatType) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return event -\u003e event.getEventSetUid().equals(eventToEdit.getEventSetUid())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 event.getStartDateTime().value.getDayOfWeek() \u003d\u003d updatedStartDateTime.value.getDayOfWeek();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return event -\u003e event.getEventSetUid().equals(eventToEdit.getEventSetUid())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 event.getStartDateTime().value.getDayOfMonth() \u003d\u003d updatedStartDateTime.value.getDayOfMonth();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        case YEARLY:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return event -\u003e event.getEventSetUid().equals(eventToEdit.getEventSetUid())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 event.getStartDateTime().value.getDayOfYear() \u003d\u003d updatedStartDateTime.value.getDayOfYear();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return event -\u003e event.getEventSetUid().equals(eventToEdit.getEventSetUid());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the corresponding field value"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * of the event."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        private UUID eventUid;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        private UUID eventSetUid;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private EventName eventName;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private DateTime startDateTime;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private DateTime endDateTime;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private Venue venue;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private RepeatType repeatType;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private DateTime repeatUntilDateTime;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        private ReminderDurationList reminderDurationList;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        public EditEventDescriptor() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            setEventUid(toCopy.eventUid);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            setEventSetUid(toCopy.eventSetUid);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            setEventName(toCopy.eventName);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            setStartDateTime(toCopy.startDateTime);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            setEndDateTime(toCopy.endDateTime);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            setVenue(toCopy.venue);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            setRepeatType(toCopy.repeatType);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            setRepeatUntilDateTime(toCopy.repeatUntilDateTime);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            setReminderDurationList(toCopy.reminderDurationList);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(eventName, startDateTime, endDateTime, description,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    venue, repeatType, repeatUntilDateTime, tags, reminderDurationList);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        public void setEventUid(UUID eventUid) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            this.eventUid \u003d eventUid;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        public Optional\u003cUUID\u003e getEventUid() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return Optional.ofNullable(eventUid);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        public void setEventSetUid(UUID eventSetUid) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            this.eventSetUid \u003d eventSetUid;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        public Optional\u003cUUID\u003e getEventSetUid() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return Optional.ofNullable(eventSetUid);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void setEventName(EventName eventName) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Optional\u003cEventName\u003e getEventName() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.ofNullable(eventName);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void setStartDateTime(DateTime startDateTime) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Optional\u003cDateTime\u003e getStartDateTime() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.ofNullable(startDateTime);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void setEndDateTime(DateTime endDateTime) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Optional\u003cDateTime\u003e getEndDateTime() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.ofNullable(endDateTime);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void setVenue(Venue venue) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Optional\u003cVenue\u003e getVenue() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void setRepeatType(RepeatType repeatType) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.repeatType \u003d repeatType;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Optional\u003cRepeatType\u003e getRepeatType() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.ofNullable(repeatType);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void setRepeatUntilDateTime(DateTime repeatUntilDateTime) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.repeatUntilDateTime \u003d repeatUntilDateTime;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Optional\u003cDateTime\u003e getRepeatUntilDateTime() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.ofNullable(repeatUntilDateTime);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        public void setReminderDurationList(ReminderDurationList reminderDurationList) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            this.reminderDurationList \u003d reminderDurationList;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        public Optional\u003cReminderDurationList\u003e getReminderDurationList() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            return Optional.ofNullable(reminderDurationList);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if modification is"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "         * attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return getEventName().equals(e.getEventName())"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 getStartDateTime().equals(e.getStartDateTime())"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 getEndDateTime().equals(e.getEndDateTime())"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 getVenue().equals(e.getVenue())"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 getRepeatType().equals(e.getRepeatType())"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    \u0026\u0026 getRepeatUntilDateTime().equals(e.getRepeatUntilDateTime())"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    \u0026\u0026 getReminderDurationList().equals(e.getReminderDurationList());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 24,
      "ChengYuuu": 192,
      "YezhongZ": 79,
      "-": 119,
      "HEARTOFAL1ON": 2
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"exi\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"ex\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Scheduler as requested ...\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 6,
      "-": 17,
      "HEARTOFAL1ON": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Finds and lists all events in scheduler whose event name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"fin\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"fi\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events whose event names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" study play work\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final EventNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public FindCommand(EventNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, model.getFilteredEventList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 12,
      "-": 31,
      "HEARTOFAL1ON": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/GetGoogleCalendarEventsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.net.UnknownHostException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import com.google.api.services.calendar.model.Events;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.util.EventFormatUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.commons.web.ConnectToGoogleCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.logic.RepeatEventGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " * Get events from google calendar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "public class GetGoogleCalendarEventsCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"getGCEvents\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Get google calendar events.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            + \"download the events from primary google calendar.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            + \"Parameters: NONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final String MESSAGE_GGEVENTS_SUCCESS \u003d \"Events in google calendar downloaded.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final String MESSAGE_NO_EVENTS \u003d \"No upcoming events found in Google Calender.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final String MESSAGE_INTERNET_ERROR \u003d \"Internet connection error. Please check your network.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private final ConnectToGoogleCalendar connectToGoogleCalendar \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new ConnectToGoogleCalendar();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private final EventFormatUtil eventFormatUtil \u003d new EventFormatUtil();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (!connectToGoogleCalendar.netIsAvailable()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return new CommandResult(MESSAGE_INTERNET_ERROR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Get the Google Calendar service object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Calendar service \u003d connectToGoogleCalendar.getCalendar();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Get events from a specified calendar"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Events events \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003cEvent\u003e eventsToadd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            events \u003d connectToGoogleCalendar.getEvents(service);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return new CommandResult(MESSAGE_INTERNET_ERROR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //Extract the listOfGoogleEvents from the events object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        List\u003ccom.google.api.services.calendar.model.Event\u003e listOfGoogleEvents \u003d events.getItems();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (listOfGoogleEvents.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return new CommandResult(MESSAGE_NO_EVENTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            //Upcoming events"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            eventsToadd \u003d eventFormatUtil.convertGoogleListToLocalList(listOfGoogleEvents);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        connectToGoogleCalendar.setGoogleCalendarEnabled();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        for (Event event : eventsToadd) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            model.addEvents(RepeatEventGenerator.getInstance().generateAllRepeatedEvents(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            model.commitScheduler();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return new CommandResult(MESSAGE_GGEVENTS_SUCCESS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "YezhongZ": 65
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"hel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"he\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"h\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 5,
      "-": 20,
      "HEARTOFAL1ON": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"histor\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"histo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"hist\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_FOUR \u003d \"his\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_FIVE \u003d \"hi\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 30,
      "HEARTOFAL1ON": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Lists all events in the scheduler to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"lis\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"li\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"l\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 7,
      "-": 16,
      "HEARTOFAL1ON": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Reverts the {@code model}\u0027s scheduler to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"red\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"re\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"r\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!model.canRedoScheduler()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.redoScheduler();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 9,
      "-": 22,
      "HEARTOFAL1ON": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Selects an event identified using it\u0027s displayed index from the scheduler."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"selec\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"sele\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"sel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_FOUR \u003d \"se\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_FIVE \u003d \"s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + \": Selects the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_SELECT_EVENT_SUCCESS \u003d \"Selected Event: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e filteredEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredEventList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_EVENT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 16,
      "-": 41,
      "HEARTOFAL1ON": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Reverts the {@code model}\u0027s scheduler to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_ONE \u003d \"und\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_TWO \u003d \"un\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static final String COMMAND_ALIAS_THREE \u003d \"u\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!model.canUndoScheduler()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.undoScheduler();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 9,
      "-": 22,
      "HEARTOFAL1ON": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_VALUES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_REMINDER_DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_REPEAT_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_REPEAT_UNTIL_DATE_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_START_DATE_TIME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        PREFIX_END_DATE_TIME, PREFIX_DESCRIPTION, PREFIX_VENUE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        PREFIX_REPEAT_TYPE, PREFIX_REPEAT_UNTIL_DATE_TIME, PREFIX_TAG, PREFIX_EVENT_REMINDER_DURATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime startDateTime \u003d argMultimap.getValue(PREFIX_START_DATE_TIME).isPresent()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ? ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE_TIME).get())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                : new DateTime(LocalDateTime.now().truncatedTo(ChronoUnit.HOURS).plusHours(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime endDateTime \u003d argMultimap.getValue(PREFIX_END_DATE_TIME).isPresent()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ? ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE_TIME).get())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                : new DateTime(startDateTime.value.plusHours(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Description description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ? ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                : new Description(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Venue venue \u003d argMultimap.getValue(PREFIX_VENUE).isPresent()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ? ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                : new Venue(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        RepeatType repeatType \u003d argMultimap.getValue(PREFIX_REPEAT_TYPE).isPresent()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ? ParserUtil.parseRepeatType(argMultimap.getValue(PREFIX_REPEAT_TYPE).get())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                : RepeatType.NONE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime repeatUntilDateTime \u003d argMultimap.getValue(PREFIX_REPEAT_UNTIL_DATE_TIME).isPresent()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ? ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_REPEAT_UNTIL_DATE_TIME).get())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                : endDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Set\u003cTag\u003e tags \u003d argMultimap.getValue(PREFIX_TAG).isPresent()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ? ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                : Collections.emptySet();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ReminderDurationList reminderDurationList \u003d ParserUtil.parseReminderDurations("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                argMultimap.getAllValues(PREFIX_EVENT_REMINDER_DURATION));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!Event.isValidEventDateTime(startDateTime, endDateTime)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_VALUES, Event.MESSAGE_DATETIME_CONSTRAINTS));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event event \u003d new Event(UUID.randomUUID(), eventName, startDateTime, endDateTime, description,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                venue, repeatType, repeatUntilDateTime, tags, reminderDurationList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new AddCommand(event);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 6,
      "ChengYuuu": 58,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Map\u003cIdentity, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void put(Identity prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Optional\u003cString\u003e getValue(Identity prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public List\u003cString\u003e getAllValues(Identity prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public List\u003cFlag\u003e getFlags() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return argMultimap.keySet().stream().filter(key -\u003e key instanceof Flag).map(key -\u003e (Flag) key)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 11,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue \u003cflag\u003eflag ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July -a -u}  where prefixes are {@code t/ k/ m/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " *     and flags are {@code -a -u}.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes and flags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * to their respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue \u003cflag\u003e value ...}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes and flags to their arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cIdentityPosition\u003e prefixPositions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cIdentityPosition\u003e flagPositions \u003d findAllFlagPositions(argsString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return extractArguments(argsString, prefixPositions, flagPositions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static List\u003cIdentityPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Finds all zero-based flag positions in the given arguments string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cflag\u003evalue \u003cflag\u003evalue ...}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @return           List of zero-based flag positions in the given arguments string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static List\u003cIdentityPosition\u003e findAllFlagPositions(String argsString) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cIdentityPosition\u003e flagPositions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Pattern flagsPattern \u003d Pattern.compile(\"-{1,2}[a-z]+\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Matcher matcher \u003d flagsPattern.matcher(argsString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            flagPositions.add(new IdentityPosition(new Flag(matcher.group(0)), matcher.start(0)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return flagPositions;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static List\u003cIdentityPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cIdentityPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            IdentityPosition extendedPrefix \u003d new IdentityPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cIdentityPosition\u003e prefixPositions,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                                     List\u003cIdentityPosition\u003e flagPositions) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Concat flag and prefixes and sort by start position"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cIdentityPosition\u003e identityPositions \u003d Stream.concat(prefixPositions.stream(), flagPositions.stream())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .sorted((identity1, identity2) -\u003e identity1.getStartPosition() - identity2.getStartPosition())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Insert a IdentityPosition to represent the preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        IdentityPosition preambleMarker \u003d new IdentityPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        identityPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Add a dummy IdentityPosition to represent the end of the string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        IdentityPosition endPositionMarker \u003d new IdentityPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        identityPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Map prefixes and flags to their argument values (if any)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (int i \u003d 0; i \u003c identityPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Identity argPrefix \u003d identityPositions.get(i).getIdentity();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, identityPositions.get(i),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    identityPositions.get(i + 1));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentIdentityPosition}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The end position of the value is determined by {@code nextIdentityPosition}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                        IdentityPosition currentIdentityPosition,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                               IdentityPosition nextIdentityPosition) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Identity prefix \u003d currentIdentityPosition.getIdentity();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        int valueStartPos \u003d currentIdentityPosition.getStartPosition() + prefix.getIdentity().length();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextIdentityPosition.getStartPosition());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Represents a identity\u0027s position in an arguments string."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static class IdentityPosition {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private final Identity identity;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        IdentityPosition(Identity identity, int startPosition) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.identity \u003d identity;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private int getStartPosition() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private Identity getIdentity() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return identity;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 66,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Prefix PREFIX_START_DATE_TIME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Prefix PREFIX_END_DATE_TIME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Prefix PREFIX_REPEAT_TYPE \u003d new Prefix(\"rt/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Prefix PREFIX_REPEAT_UNTIL_DATE_TIME \u003d new Prefix(\"ru/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final Prefix PREFIX_EVENT_REMINDER_DURATION \u003d new Prefix(\"re/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /* Flag definitions */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Flag FLAG_ALL \u003d new Flag(\"-a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Flag FLAG_UPCOMING \u003d new Flag(\"-u\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final List\u003cFlag\u003e LIST_OF_ALL_FLAG \u003d List.of(FLAG_ALL, FLAG_UPCOMING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 1,
      "ChengYuuu": 16,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import com.google.common.collect.Iterables;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Set\u003cFlag\u003e flags \u003d ParserUtil.parseFlags(argMultimap.getFlags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            if (flags.size() \u003e 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return new DeleteCommand(index, Iterables.toArray(flags, Flag.class));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 22,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_REMINDER_DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_REPEAT_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_REPEAT_UNTIL_DATE_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import com.google.common.collect.Iterables;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_START_DATE_TIME, PREFIX_END_DATE_TIME,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_VENUE, PREFIX_REPEAT_TYPE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        PREFIX_REPEAT_UNTIL_DATE_TIME, PREFIX_TAG, PREFIX_EVENT_REMINDER_DURATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Set\u003cFlag\u003e flags \u003d ParserUtil.parseFlags(argMultimap.getFlags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (flags.size() \u003e 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (flags.size() \u003d\u003d 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 (argMultimap.getValue(PREFIX_REPEAT_TYPE).isPresent()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                || argMultimap.getValue(PREFIX_REPEAT_UNTIL_DATE_TIME).isPresent())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_SINGLE_EVENT_FAIL));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            editEventDescriptor.setEventName(ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            editEventDescriptor.setStartDateTime("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE_TIME).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            editEventDescriptor.setEndDateTime("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE_TIME).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            editEventDescriptor.setDescription("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            editEventDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REPEAT_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            editEventDescriptor.setRepeatType("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    ParserUtil.parseRepeatType(argMultimap.getValue(PREFIX_REPEAT_TYPE).get()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REPEAT_UNTIL_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            editEventDescriptor.setRepeatUntilDateTime("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_REPEAT_UNTIL_DATE_TIME).get()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_EVENT_REMINDER_DURATION).isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            editEventDescriptor.setReminderDurationList("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    ParserUtil.parseReminderDurations(argMultimap.getAllValues(PREFIX_EVENT_REMINDER_DURATION)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEventDescriptor::setTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new EditCommand(index, editEventDescriptor, Iterables.toArray(flags, Flag.class));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 6,
      "ChengYuuu": 62,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new FindCommand(new EventNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/Flag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A flag that indicates additional options in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * E.g. \u0027-a\u0027 in \u0027delete 1 -a\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class Flag extends Identity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        super(flag);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return getIdentity();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!(obj instanceof Flag)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Flag otherFlag \u003d (Flag) obj;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return otherFlag.getFlag().equals(getFlag());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 33
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/Identity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * An abstract class that indicates option in argument strings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "abstract class Identity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final String identity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Identity(String identity) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.identity \u003d identity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String getIdentity() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this.identity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return identity \u003d\u003d null ? 0 : identity.hashCode();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public abstract boolean equals(Object obj);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 25
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.LIST_OF_ALL_FLAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Parser NATTY_PARSER \u003d new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_FAILED_DATE_TIME_PARSE \u003d \"Natural language date time parsing failed\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String MESSAGE_FAILED_DURATION_PARSE \u003d \"Reminder Time is not valid. Please enter xxHxxMxxS\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_FAILED_REPEAT_TYPE_PARSE \u003d \"Repeat type is not valid\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_FAILED_FLAG_PARSE \u003d \"Input flag is not valid\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Gets the integer value of {@code argsString} and parses it into an {@code Index} and returns it."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static Index parseIndex(String argsString) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String trimmedIndex \u003d argsString.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Parses {@code List\u003cFlag\u003e flags} into a {@code Set\u003cFlag\u003e}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static Set\u003cFlag\u003e parseFlags(List\u003cFlag\u003e flags) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(flags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final Set\u003cFlag\u003e flagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (Flag flag : flags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            if (!LIST_OF_ALL_FLAG.contains(flag)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                throw new ParseException(MESSAGE_FAILED_FLAG_PARSE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            flagSet.add(flag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return flagSet;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Parses a {@code String eventName} into a {@code EventName}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws ParseException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static EventName parseEventName(String eventName) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String trimmedEventName \u003d eventName.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!EventName.isValidEventName(eventName)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new ParseException(EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new EventName(trimmedEventName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static Description parseDescription(String description) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Parses a {@code String venue} into a {@code Venue}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static Venue parseVenue(String venue) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String trimmedVenue \u003d venue.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new Venue(trimmedVenue);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Parses a {@code String eventName} into a {@code EventName}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws ParseException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static DateTime parseDateTime(String unformattedDateTime) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(unformattedDateTime);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cDateGroup\u003e groups \u003d NATTY_PARSER.parse(unformattedDateTime.trim());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (groups.size() !\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FAILED_DATE_TIME_PARSE, unformattedDateTime));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cDate\u003e dates \u003d groups.get(0).getDates();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (dates.size() !\u003d 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FAILED_DATE_TIME_PARSE, unformattedDateTime));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        LocalDateTime formattedDateTime \u003d dates.get(0).toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new DateTime(formattedDateTime);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Parses a {@code String repeatType} into a {@code RepeatType}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws ParseException if the given {@code repeatType} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static RepeatType parseRepeatType(String repeatType) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(repeatType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String trimmedRepeatType \u003d repeatType.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (trimmedRepeatType.isEmpty() || trimmedRepeatType.equalsIgnoreCase(RepeatType.NONE.name())) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return RepeatType.NONE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } else if (trimmedRepeatType.equalsIgnoreCase(RepeatType.DAILY.name())) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return RepeatType.DAILY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } else if (trimmedRepeatType.equalsIgnoreCase(RepeatType.WEEKLY.name())) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return RepeatType.WEEKLY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } else if (trimmedRepeatType.equalsIgnoreCase(RepeatType.MONTHLY.name())) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return RepeatType.MONTHLY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } else if (trimmedRepeatType.equalsIgnoreCase(RepeatType.YEARLY.name())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return RepeatType.YEARLY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FAILED_REPEAT_TYPE_PARSE, repeatType));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param reminderDuration a string representing a duration"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return a duration object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static Duration parseReminderDuration(String reminderDuration) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        requireNonNull(reminderDuration);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        String parseDuration \u003d reminderDuration;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        parseDuration.replace(\" \", \"\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        parseDuration \u003d \"PT\".concat(parseDuration.replace(\"d\", \"D\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        parseDuration \u003d parseDuration.replace(\"h\", \"H\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        parseDuration \u003d parseDuration.replace(\"min\", \"m\").toUpperCase();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        parseDuration \u003d parseDuration.replace(\"sec\", \"s\").toUpperCase();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            Duration duration \u003d Duration.parse(parseDuration);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            return duration;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FAILED_DURATION_PARSE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e reminderTimes} into a {@code Set\u003cDateTime\u003e}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static ReminderDurationList parseReminderDurations(Collection\u003cString\u003e reminderDurations)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        requireNonNull(reminderDurations);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ReminderDurationList reminderDurationList \u003d new ReminderDurationList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (String reminderDuration : reminderDurations) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            if (reminderDuration.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                return reminderDurationList;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            reminderDurationList.add(parseReminderDuration(reminderDuration));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return reminderDurationList;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 46,
      "ChengYuuu": 120,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class Prefix extends Identity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        super(prefix);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return getIdentity();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/SchedulerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.logic.commands.GetGoogleCalendarEventsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class SchedulerParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case AddCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case AddCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case EditCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case EditCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS_FOUR:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS_FIVE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS_FOUR:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS_FIVE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS_FOUR:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case FindCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case FindCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case FindCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        case GetGoogleCalendarEventsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            return new GetGoogleCalendarEventsCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ListCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ListCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ListCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS_FOUR:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS_FIVE:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS_ONE:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS_TWO:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS_THREE:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 18,
      "YezhongZ": 4,
      "-": 74,
      "HEARTOFAL1ON": 41
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Scheduler methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void resetData(ReadOnlyScheduler newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /** Returns the Scheduler */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    ReadOnlyScheduler getScheduler();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the scheduler."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The event must exist in the scheduler."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Deletes the given event and its repeats."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The event must exist in the scheduler."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void deleteRepeatingEvents(Event target);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Deletes the given event and its upcoming events."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The event must exist in the scheduler."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void deleteUpcomingEvents(Event target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Adds all the given events."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void addEvents(List\u003cEvent\u003e events);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code target} must exist in the scheduler."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void updateEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the given event {@code target} and its repeat events with {@code editedEvents}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code target} must exist in the scheduler."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void updateRepeatingEvents(Event target, List\u003cEvent\u003e editedEvents);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the given event {@code target} and its upcoming events with {@code editedEvents}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code target} must exist in the scheduler."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void updateUpcomingEvents(Event target, List\u003cEvent\u003e editedEvents);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered event list */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /** Returns the first event out of all similar repeating events in the event list according to predicate*/"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    Event getFirstInstanceOfEvent(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if the model has previous scheduler states to restore."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    boolean canUndoScheduler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if the model has undone scheduler states to restore."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    boolean canRedoScheduler();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Restores the model\u0027s scheduler to its previous state."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void undoScheduler();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Restores the model\u0027s scheduler to its previously undone state."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void redoScheduler();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Saves the current scheduler state for undo/redo."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void commitScheduler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Sync the ReminderDurationList with popUpManager"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    void syncWithPopUpManager(PopUpManager popUpManager, Storage storage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a tag with the same identity as {@code tag} exists in the scheduler."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    //boolean hasTag(Tag tag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds all the given tags."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //void addTags(List\u003cTag\u003e tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Removes the given {@code tag} from all {@code Event}s. */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current tag book state for undo/redo."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //void commitTagRecord();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 6,
      "ChengYuuu": 67,
      "-": 58,
      "HEARTOFAL1ON": 2
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.EventPopUpInfo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents the in-memory model of the scheduler data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final VersionedScheduler versionedScheduler;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private PopUpManager popUpManager \u003d PopUpManager.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Initializes a ModelManager with the given scheduler and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ModelManager(ReadOnlyScheduler scheduler, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(scheduler, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        logger.fine(\"Initializing with scheduler: \" + scheduler"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler \u003d new VersionedScheduler(scheduler);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedScheduler.getEventList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this(new Scheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Scheduler methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void resetData(ReadOnlyScheduler newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ReadOnlyScheduler getScheduler() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return versionedScheduler;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /** Raises an event to indicate the model has changed due to scheduler change */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void indicateSchedulerChanged() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        raise(new SchedulerChangedEvent(versionedScheduler));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Event getFirstInstanceOfEvent(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return versionedScheduler.getFirstInstanceOfEvent(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return versionedScheduler.hasEvent(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.removeEvent(target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.delete(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void deleteRepeatingEvents(Event target) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        versionedScheduler.removeEvents(target, event -\u003e event.getEventSetUid().equals(target.getEventSetUid()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.deleteAll(target);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void deleteUpcomingEvents(Event target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.removeEvents(target, event -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                event.getEventSetUid().equals(target.getEventSetUid())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 event.getStartDateTime().compareTo(target.getStartDateTime()) \u003e 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.deleteUpcoming(target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void addEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.addEvents(events);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.add(events);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.updateEvent(target, editedEvent);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.edit(target, editedEvent);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void updateRepeatingEvents(Event target, List\u003cEvent\u003e editedEvents) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(target, editedEvents);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        versionedScheduler.updateEvents(target, editedEvents,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            event -\u003e event.getEventSetUid().equals(target.getEventSetUid()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.editAll(target, editedEvents);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void updateUpcomingEvents(Event target, List\u003cEvent\u003e editedEvents) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(target, editedEvents);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.updateEvents(target, editedEvents, event -\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                event.getEventSetUid().equals(target.getEventSetUid())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 event.getStartDateTime().compareTo(target.getStartDateTime()) \u003e\u003d 0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.editUpcoming(target, editedEvents);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.removeTag(tag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void syncWithPopUpManager(PopUpManager popUpManager, Storage storage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        HashMap durationsLeft \u003d new HashMap\u003cUUID, HashSet\u003cDuration\u003e\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ArrayList\u003cEventPopUpInfo\u003e popUpArray \u003d popUpManager.getArray();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (EventPopUpInfo eventPopUpInfo : popUpArray) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            UUID key \u003d eventPopUpInfo.getEventUid();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            Set\u003cDuration\u003e set \u003d (Set\u003cDuration\u003e) durationsLeft.get(key);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            if (set \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                Set\u003cDuration\u003e newSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                newSet.add(eventPopUpInfo.getDuration());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                durationsLeft.put(key, newSet);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                set.add(eventPopUpInfo.getDuration());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                durationsLeft.put(key, set);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ObservableList\u003cEvent\u003e eventList \u003d versionedScheduler.getEventList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            UUID eventUid \u003d event.getEventUid();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            HashSet\u003cDuration\u003e durationSet \u003d (HashSet\u003cDuration\u003e) durationsLeft.get(eventUid);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            ReminderDurationList reminderDurationList;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            if (durationSet \u003d\u003d null \u0026\u0026 !event.getReminderDurationList().isEmpty()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                reminderDurationList \u003d new ReminderDurationList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            } else if (durationSet !\u003d null \u0026\u0026 !durationSet.equals(event.getReminderDurationList())) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                reminderDurationList \u003d new ReminderDurationList(durationSet);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            Event editedEvent \u003d new Event(event.getEventUid(), event.getEventSetUid(), event.getEventName(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    event.getStartDateTime(), event.getEndDateTime(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    event.getDescription(), event.getVenue(), event.getRepeatType(), event.getRepeatUntilDateTime(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    event.getTags(), reminderDurationList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            versionedScheduler.updateEvent(event, editedEvent);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            storage.handleSchedulerChangedEvent(new SchedulerChangedEvent(versionedScheduler));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code versionedScheduler}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEvents);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean canUndoScheduler() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return versionedScheduler.canUndo();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean canRedoScheduler() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return versionedScheduler.canRedo();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void undoScheduler() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.undo();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.reInitialise(versionedScheduler);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void redoScheduler() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.redo();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpManager.reInitialise(versionedScheduler);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void commitScheduler() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.commit();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return versionedScheduler.equals(other.versionedScheduler)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 55,
      "ChengYuuu": 101,
      "YezhongZ": 12,
      "-": 82,
      "HEARTOFAL1ON": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/PopUpManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventPopUpInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.PopUp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " * Extract PopUp info and run in the background"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "public class PopUpManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PopUpManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private static PopUpManager instance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private PriorityQueue\u003cEventPopUpInfo\u003e popUpQueue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Boolean flag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    // private static ArrayList\u003cEventPopUpInfo\u003e pastPopUps;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private PopUpManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpQueue \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        flag \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        //pastPopUps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static PopUpManager getInstance() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            instance \u003d new PopUpManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Get an ArrayList of the popUpQueue"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public ArrayList\u003cEventPopUpInfo\u003e getArray() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return new ArrayList(popUpQueue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Initialise the popUpQueue when the app is open"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param readOnlyScheduler"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void syncPopUpInfo(ReadOnlyScheduler readOnlyScheduler) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ObservableList\u003cEvent\u003e eventList \u003d readOnlyScheduler.getEventList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpQueue.addAll(generateFuturePopUpInfoListFromEvents(eventList));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Undo, Redo"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * This method will be called when undo and redo is called"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * The popUpQueue will be cleaned up and reInitialise, ONLY future reminders will be added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param readOnlyScheduler"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void reInitialise(ReadOnlyScheduler readOnlyScheduler) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpQueue.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        syncPopUpInfo(readOnlyScheduler);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Add Single Event"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * EventPopUpInfo to the popUpQueue given an Event"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void add(Event event) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpQueue.addAll(generateFuturePopUpInfoListFromEvent(event));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Add Recurring Event\u0027s EventPopUpInfo"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Add single EventPopUpInfo to the popUpQueue given a list of Event"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param events"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void add(Collection\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpQueue.addAll(generateFuturePopUpInfoListFromEvents(events));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Edit Single Event\u0027s EventPopUpInfo"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Every time an Event is updated, add all future EventPopUpInfo to the queue and ignore the passed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param editedEvent"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void edit(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (!target.getReminderDurationList().equals(editedEvent.getReminderDurationList())) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            delete(target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            add(editedEvent);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Edit All Recurring Event\u0027s EventPopUpInfo"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Every time an Event is updated, add all future EventPopUpInfo to the queue and ignore the passed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param editedEvents"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void editAll(Event target, List\u003cEvent\u003e editedEvents) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Event firstEvent \u003d editedEvents.get(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (!target.getReminderDurationList().equals(firstEvent.getReminderDurationList())) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            deleteAll(target);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            add(editedEvents);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Edit Upcoming Recurring Event\u0027s EventPopUpInfo"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Every time an Event is updated, add all future EventPopUpInfo to the queue and ignore the passed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param editedEvents"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void editUpcoming(Event target, List\u003cEvent\u003e editedEvents) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Event firstEvent \u003d editedEvents.get(0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (!target.getReminderDurationList().equals(firstEvent.getReminderDurationList())) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            deleteUpcoming(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            add(editedEvents);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Delete Single Event\u0027s EventPopUpInfo"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Delete all eventPopUpInfo in the popUpQueue that shares the same Uid as the deleted event"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void delete(Event target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        PriorityQueue\u003cEventPopUpInfo\u003e newQueue \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (EventPopUpInfo eventPopUpInfo : popUpQueue) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            if (!eventPopUpInfo.getEventUid().equals(target.getEventUid())) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                newQueue.add(eventPopUpInfo);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpQueue \u003d newQueue;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Delete All Recurring Event\u0027s EventPopUpInfo"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Delete all eventPopUpInfo in the popUpQueue that shares the same Uid as the deleted event"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void deleteAll(Event target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        PriorityQueue\u003cEventPopUpInfo\u003e newQueue \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (EventPopUpInfo eventPopUpInfo : popUpQueue) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            if (!isRecurringEvent(eventPopUpInfo, target)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                newQueue.add(eventPopUpInfo);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpQueue \u003d newQueue;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Delete upcoming EventPopUpInfo"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Delete all eventPopUpInfo in the popUpQueue that shares the same Uid as the deleted event"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void deleteUpcoming(Event target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        PriorityQueue\u003cEventPopUpInfo\u003e newQueue \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (EventPopUpInfo eventPopUpInfo : popUpQueue) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            if (!isUpcomingEvent(eventPopUpInfo, target)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                newQueue.add(eventPopUpInfo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        popUpQueue \u003d newQueue;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Check if eventPopUpInfo belongs to an upcoming event compared to target"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Boolean isUpcomingEvent(EventPopUpInfo event, Event target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return (event.getEventSetUid().equals(target.getEventSetUid())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        \u0026\u0026 event.getStartDateTime().compareTo(target.getStartDateTime()) \u003e 0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Check if eventPopUpInfo belongs to an event that is a recurring event of target"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Boolean isRecurringEvent(EventPopUpInfo event, Event target) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return event.getEventSetUid().equals(target.getEventSetUid());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Generate a list of EventPopUpInfo objects of different Durations given an Event"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private ArrayList\u003cEventPopUpInfo\u003e generateAllPopUpInfoListFromEvent(Event event) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ArrayList\u003cEventPopUpInfo\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        UUID uid \u003d event.getEventUid();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        UUID uuid \u003d event.getEventSetUid();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        EventName eventName \u003d event.getEventName();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        DateTime startDateTime \u003d event.getStartDateTime();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        DateTime endDateTime \u003d event.getEndDateTime();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Description description \u003d event.getDescription();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Venue venue \u003d event.getVenue();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ReminderDurationList reminderDurationList \u003d event.getReminderDurationList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (Duration duration : reminderDurationList.get()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            result.add(new EventPopUpInfo(uid, uuid, eventName, startDateTime, endDateTime, description, venue,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    duration));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Generate a list of EventPopUpInfo objects of different Durations given a list of Events"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param events"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private ArrayList\u003cEventPopUpInfo\u003e generateAllPopUpInfoListFromEvents(Collection\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ArrayList\u003cEventPopUpInfo\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            result.addAll(generateAllPopUpInfoListFromEvent(event));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Generate a list of EventPopUpInfo objects with PopUpTime in the FUTURE from 1 event"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private ArrayList\u003cEventPopUpInfo\u003e generateFuturePopUpInfoListFromEvent(Event event) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ArrayList\u003cEventPopUpInfo\u003e rawList \u003d generateAllPopUpInfoListFromEvent(event);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ArrayList\u003cEventPopUpInfo\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (EventPopUpInfo eventPopUpInfo : rawList) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            DateTime now \u003d getNow();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            if (!eventPopUpInfo.getPopUpDateTime().isPast(now)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                result.add(eventPopUpInfo);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Generate a list of EventPopUpInfo objects with PopUpTime in the FUTURE from a list of events"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param events"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private ArrayList\u003cEventPopUpInfo\u003e generateFuturePopUpInfoListFromEvents(Collection\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ArrayList\u003cEventPopUpInfo\u003e rawList \u003d generateAllPopUpInfoListFromEvents(events);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ArrayList\u003cEventPopUpInfo\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (EventPopUpInfo eventPopUpInfo : rawList) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            DateTime now \u003d getNow();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            if (!eventPopUpInfo.getPopUpDateTime().isPast(now)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                result.add(eventPopUpInfo);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Util function that returns now in DateTime format"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private DateTime getNow() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        DateTime currentDateTime \u003d new DateTime(now);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return currentDateTime;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Main"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * checking for PopUp in the background"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void startRunning() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Task\u003cVoid\u003e task \u003d new Task\u003cVoid\u003e() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            public Void call() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                while (true) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    DateTime currentDateTime \u003d getNow();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    // logger.info(\"Checking current event popUp info queue...\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    // check the event queue date time"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    if (!flag) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        if (!popUpQueue.isEmpty()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            DateTime frontEventDateTime \u003d popUpQueue.peek().getPopUpDateTime();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            //logger.info(frontEventDateTime.toString());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            while (frontEventDateTime.isPast(currentDateTime)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                EventPopUpInfo currentPopUp \u003d popUpQueue.peek();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                displayPopUp(\"Past Reminder\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                        currentPopUp.getPastPopUpDisplay());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                // pastPopUps.add(currentPopUp);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                popUpQueue.remove();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                if (!popUpQueue.isEmpty()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                    frontEventDateTime \u003d popUpQueue.peek().getPopUpDateTime();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            flag \u003d true;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    if (!popUpQueue.isEmpty()) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        //logger.info(\"Checking for incoming events\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        DateTime frontEventDateTime \u003d popUpQueue.peek().getPopUpDateTime();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        //logger.info(frontEventDateTime.toString());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        while (frontEventDateTime.isClose(currentDateTime)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            EventPopUpInfo currentPopUp \u003d popUpQueue.peek();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            displayPopUp(currentPopUp.getEventName().toString(), currentPopUp.getPopUpDisplay());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            // pastPopUps.add(currentPopUp);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            popUpQueue.remove();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            if (!popUpQueue.isEmpty()) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                frontEventDateTime \u003d popUpQueue.peek().getPopUpDateTime();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    // Sleep for 5 seconds after each loop of checking, to give the app some buffer time"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        TimeUnit.SECONDS.sleep(5);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Thread backgroundThread \u003d new Thread(task);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        backgroundThread.start();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Display PopUp message"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private void displayPopUp (String title, String description) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                PopUp popUp \u003d new PopUp();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                popUp.display(title, description);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 351,
      "ChengYuuu": 6,
      "YezhongZ": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/ReadOnlyScheduler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Unmodifiable view of an scheduler"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public interface ReadOnlyScheduler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns an unmodifiable view of the event list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns an immutable event according to the predicate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    Event getFirstInstanceOfEvent(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 23
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/Scheduler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Wraps all data at the scheduler level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Duplicates are allowed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class Scheduler implements ReadOnlyScheduler {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final EventList events;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Scheduler() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Creates an Scheduler using the Events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Scheduler(ReadOnlyScheduler toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Resets the existing data of this {@code Scheduler} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void resetData(ReadOnlyScheduler newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if a event with the same data as {@code event} exists in the scheduler."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Adds an event to the scheduler."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Adds a list of event to the scheduler."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void addEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.events.addEvents(events);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code target} must exist in the scheduler."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void updateEvent(Event targetEvent, Event editedEvent) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events.setEvent(targetEvent, editedEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code target} must exist in the scheduler."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void updateEvents(Event targetEvent, List\u003cEvent\u003e editedEvents, Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(editedEvents);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events.setEvents(targetEvent, editedEvents, predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Removes {@code key} from this {@code Scheduler}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code key} must exist in the scheduler."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Removes {@code key} and its repeating events from this {@code Scheduler}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code key} must exist in the scheduler."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void removeEvents(Event key, Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events.remove(key, predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Removes {@code tag} from {@code event} in this {@code Scheduler}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void removeTagFromEvent(Tag tag, Event event) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(event.getTags());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!newTags.remove(tag)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event newEvent \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                new Event(event.getEventSetUid(), event.getEventName(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        event.getStartDateTime(), event.getEndDateTime(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        event.getDescription(), event.getVenue(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        event.getRepeatType(), event.getRepeatUntilDateTime(), newTags,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        event.getReminderDurationList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        updateEvent(event, newEvent);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Removes {@code tag} from all events in this {@code Scheduler}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events.forEach(event -\u003e removeTagFromEvent(tag, event));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Event getFirstInstanceOfEvent(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return events.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .filter(predicate).findFirst().orElse(null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                || (other instanceof Scheduler // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 events.equals(((Scheduler) other).events));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 2,
      "ChengYuuu": 169,
      "YezhongZ": 2
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Path schedulerFilePath \u003d Paths.get(\"data\", \"scheduler.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return schedulerFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setSchedulerFilePath(Path schedulerFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.schedulerFilePath \u003d schedulerFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 Objects.equals(schedulerFilePath, o.schedulerFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return Objects.hash(guiSettings, schedulerFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        sb.append(\"\\nLocal scheduler data file location : \" + schedulerFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 10,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/VersionedScheduler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * {@code Scheduler} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class VersionedScheduler extends Scheduler {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final List\u003cReadOnlyScheduler\u003e schedulerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public VersionedScheduler(ReadOnlyScheduler initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        schedulerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        schedulerStateList.add(new Scheduler(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Saves a copy of the current {@code Scheduler} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        schedulerStateList.add(new Scheduler(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        schedulerStateList.subList(currentStatePointer + 1, schedulerStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Restores the scheduler to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        resetData(schedulerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Restores the scheduler to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        resetData(schedulerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if {@code undo()} has scheduler states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if {@code redo()} has scheduler states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return currentStatePointer \u003c schedulerStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!(other instanceof VersionedScheduler)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler otherVersionedScheduler \u003d (VersionedScheduler) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return super.equals(otherVersionedScheduler)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 schedulerStateList.equals(otherVersionedScheduler.schedulerStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedScheduler.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            super(\"Current state pointer at start of schedulerState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            super(\"Current state pointer at end of schedulerState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 109
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/DateTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents an Event\u0027s date and time in the scheduler."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Guarantees: immutable; is valid"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "     * @param formattedDateTime A local date time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public DateTime(LocalDateTime formattedDateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        requireNonNull(formattedDateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        value \u003d formattedDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 value.equals(((DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int compareTo(DateTime otherDateTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value.compareTo(otherDateTime.value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Used for PopUp to check if the current time is close to the next event in the pop up queue"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param currentDateTime"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return True if the time difference is within 1 minute"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public boolean isClose(DateTime currentDateTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        LocalDateTime currentLocalDateTime \u003d currentDateTime.getLocalDateTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        long minutes \u003d currentLocalDateTime.until(value, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return (minutes \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Used for PopUp to check if the event has already passed when the app is open"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param currentDateTime"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return True if the event has already past"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public boolean isPast(DateTime currentDateTime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        LocalDateTime currentLocalDateTime \u003d currentDateTime.getLocalDateTime();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        long minutes \u003d value.until(currentLocalDateTime, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return (minutes \u003e\u003d 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Constructs a string of {@code DateTime} in a more human readable format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @return a human readable date time string"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String getPrettyString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTimeFormatter prettyStringFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value.format(prettyStringFormatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 28,
      "ChengYuuu": 47,
      "HEARTOFAL1ON": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents an Event\u0027s description in the scheduler."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param description A valid event description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 40
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " * Represents an Event in the scheduler."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_DATETIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            \"Event\u0027s start date and time should be before event\u0027s end date and time\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private final UUID eventUid; //distinct for recurring events"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private final UUID eventSetUid; //same for recurring events"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Venue venue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final RepeatType repeatType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final DateTime repeatUntilDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private ReminderDurationList reminderDurationList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Original Constructor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Every field must be present and not null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Event(UUID eventUid, UUID eventSetUid, EventName eventName, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                 Description description, Venue venue,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 RepeatType repeatType, DateTime repeatUntilDateTime, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 ReminderDurationList reminderDurationList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        requireAllNonNull(eventUid, eventSetUid, eventName, startDateTime, endDateTime, description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                venue, repeatType, tags, repeatUntilDateTime, reminderDurationList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.eventUid \u003d eventUid;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.eventSetUid \u003d eventSetUid;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.repeatType \u003d repeatType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.repeatUntilDateTime \u003d repeatUntilDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.reminderDurationList \u003d reminderDurationList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Does not take in eventUid. Will generate a random eventUid"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Used every time a new event is created"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Event(UUID eventSetUid, EventName eventName, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 Description description, Venue venue,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 RepeatType repeatType, DateTime repeatUntilDateTime, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 ReminderDurationList reminderDurationList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this(UUID.randomUUID(), eventSetUid, eventName, startDateTime, endDateTime, description,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                venue, repeatType, repeatUntilDateTime, tags, reminderDurationList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Does not take in reminderDurationList, which is set to an Empty ReminderDurationList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Event(UUID eventUid, UUID eventSetUid, EventName eventName, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 Description description, Venue venue,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 RepeatType repeatType, DateTime repeatUntilDateTime, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this(eventUid, eventSetUid, eventName, startDateTime, endDateTime, description,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                venue, repeatType, repeatUntilDateTime, tags, new ReminderDurationList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Does not take in reminderDurationList and eventUid"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Event(UUID eventSetUid, EventName eventName, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 Description description, Venue venue,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                 RepeatType repeatType, DateTime repeatUntilDateTime, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this(UUID.randomUUID(), eventSetUid, eventName, startDateTime, endDateTime, description,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                venue, repeatType, repeatUntilDateTime, tags, new ReminderDurationList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Does not take in reminderDurationList and eventUid and eventSetUid"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public Event(EventName eventName, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                 Description description, Venue venue,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                 RepeatType repeatType, DateTime repeatUntilDateTime, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                 ReminderDurationList reminderDurationList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this(UUID.randomUUID(), UUID.randomUUID(), eventName, startDateTime, endDateTime,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                description, venue, repeatType, repeatUntilDateTime,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                tags, reminderDurationList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public UUID getEventUid() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return eventUid;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public UUID getEventSetUid() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return eventSetUid;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventName getEventName() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public DateTime getStartDateTime() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public RepeatType getRepeatType() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return repeatType;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public DateTime getRepeatUntilDateTime() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return repeatUntilDateTime;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public ReminderDurationList getReminderDurationList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return reminderDurationList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Returns true if the Event is an instance of RepeatEvent (EventSet)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Returns false otherwise."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public boolean isRepeatEvent() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return this.repeatType !\u003d RepeatType.NONE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if end datetime is after start datetime"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static boolean isValidEventDateTime(DateTime startDateTime, DateTime endDateTime) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return startDateTime.compareTo(endDateTime) \u003c\u003d 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Returns true if both event have the same eventSetUid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Identifies recurring events as the same event"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                \u0026\u0026 otherEvent.getEventSetUid().equals(getEventSetUid());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return otherEvent.getEventSetUid().equals(getEventSetUid())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 otherEvent.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 otherEvent.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 otherEvent.getRepeatType().equals(getRepeatType())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 otherEvent.getRepeatUntilDateTime().equals(getRepeatUntilDateTime())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 otherEvent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing our own"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return Objects.hash(eventName, startDateTime, endDateTime, description,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                venue, repeatType, repeatUntilDateTime, tags, reminderDurationList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        builder.append(getEventName())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(\" startDateTime: \")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(getStartDateTime())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(\" endDateTime: \")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(getEndDateTime())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(\" description: \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(\" venue: \")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(getVenue())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(\" repeat type: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(getRepeatType())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(\" repeat until: \")"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(getRepeatUntilDateTime())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                .append(\" Tags: \").append(getRepeatUntilDateTime())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                .append(\" reminders: \")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                .append(getReminderDurationList().toString());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 40,
      "ChengYuuu": 148,
      "YezhongZ": 50
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/EventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A list of events that does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if the list contains the same event as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Adds a list of events to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void addEvents(List\u003cEvent\u003e listToAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(listToAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (listToAdd.size() \u003e 100) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            // doSomething...[TODO]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        internalList.addAll(listToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Removes the events from the list according to predicate."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void remove(Event toRemove, Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(toRemove, predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        internalList.removeIf(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the events from the filtered list after applying {@code predicate} with editedEvents"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvents(Event target, List\u003cEvent\u003e editedEvents, Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(target, editedEvents);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e filteredList \u003d internalList.stream().filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (filteredList.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        while (i \u003c filteredList.size() \u0026\u0026 i \u003c editedEvents.size()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            internalList.set(internalList.indexOf(filteredList.get(i)), editedEvents.get(i++));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        internalList.addAll(editedEvents.subList(i, editedEvents.size()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        while (i \u003c filteredList.size()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            internalList.remove(filteredList.get(i++));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvents(EventList replacement) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                || (other instanceof EventList // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 internalList.equals(((EventList) other).internalList));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 148
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/EventName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents an Event\u0027s name in the scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MESSAGE_EVENT_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            \"Event names should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * The first character of the event name must not be a empty,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String EVENT_NAME_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Constructs a {@code EventName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param name A valid event name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        checkArgument(isValidEventName(name), MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "    public static boolean isValidEventName(String testEventName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        return testEventName.matches(EVENT_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 value.equals(((EventName) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 57,
      "HEARTOFAL1ON": 2
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/EventNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code EventName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventNameContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getEventName().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                || (other instanceof EventNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 keywords.equals(((EventNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 31
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/EventPopUpInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " * Create EventPopUpInfo that store the info to insert into the popUpQueue"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "public class EventPopUpInfo implements Comparable\u003cEventPopUpInfo\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private UUID eventUid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private UUID eventSetUid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private DateTime startDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private DateTime endDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private DateTime popUpDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public EventPopUpInfo(UUID eventUid, UUID eventSetUid,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                          EventName eventName, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                          Description description, Venue venue, Duration duration) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        requireAllNonNull(eventUid, eventSetUid,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                eventName, startDateTime, endDateTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                description, venue, duration);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.eventUid \u003d eventUid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.eventSetUid \u003d eventSetUid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.popUpDateTime \u003d calculatePopUpTime(this.duration, this.startDateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * calculate PopUpTime \u003d startTime - duration"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param duration"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param startDateTime"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static DateTime calculatePopUpTime(Duration duration, DateTime startDateTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Long secondsToMinus \u003d duration.getSeconds() * -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        LocalDateTime popUpTime \u003d startDateTime.getLocalDateTime().plusSeconds(secondsToMinus);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return new DateTime(popUpTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public UUID getEventUid() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return eventUid;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public UUID getEventSetUid() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return eventSetUid;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public EventName getEventName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public DateTime getStartDateTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public DateTime getPopUpDateTime () {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return popUpDateTime;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * get Display for events that are past"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public String getPastPopUpDisplay() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        result \u003d result + \"Event Name: \" + eventName.toString() + \"\\n\" + startDateTime.getPrettyString() + \" - \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                + endDateTime.getPrettyString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * get Display for events"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public String getPopUpDisplay() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        result \u003d result + \"Venue: \" + venue.toString() + \"\\n\" + startDateTime.getPrettyString()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                + \" - \" + endDateTime.getPrettyString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public int compareTo(EventPopUpInfo other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return this.popUpDateTime.compareTo(other.popUpDateTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return ((this \u003d\u003d other) || ("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                other instanceof EventPopUpInfo"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        \u0026\u0026 this.eventUid.equals(((EventPopUpInfo) other).getEventUid())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        \u0026\u0026 this.duration.equals(((EventPopUpInfo) other).getDuration())));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 109,
      "ChengYuuu": 1,
      "YezhongZ": 14
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/ReminderDurationList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_REMINDER_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " * Represents a list of duration object for reminder times"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "public class ReminderDurationList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String EMPTY_VALUE \u003d \"NONE\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String NO_REMINDER_DISPLAY \u003d \"No Reminder\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String REMINDER_DISPLAY_SUFFIX \u003d \" before the start time\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Set\u003cDuration\u003e values \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Default constructor for ReminderDurationList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public ReminderDurationList(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Constructs a {@code ReminderDurationList} with inputs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param reminderDurations a list of duration objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public ReminderDurationList(Collection\u003cDuration\u003e reminderDurations) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        requireNonNull(reminderDurations);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        values \u003d new HashSet\u003c\u003e(reminderDurations);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Read a string stored in data file and convert to ReminderDurationList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param durationList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public ReminderDurationList(String durationList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (!durationList.equals(ReminderDurationList.EMPTY_VALUE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            List\u003cString\u003e durations \u003d Arrays.asList(durationList.split(\",\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            for (String durationValue: durations) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                values.add(Duration.parse(durationValue.trim()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public Set\u003cDuration\u003e get() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return values;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Check if ReminderDurationList is empty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return if ReminderDurationList is empty"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public Boolean isEmpty() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return values.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return the current number of reminder times"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return values.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * add input duration object to the set"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param duration"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void add(Duration duration) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        values.add(duration);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Get string input for the event"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return string input"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public String getPrettyString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (values.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            return PREFIX_EVENT_REMINDER_DURATION.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (Duration duration: values) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            output +\u003d PREFIX_EVENT_REMINDER_DURATION + duration.toString().replace(\"PT\", \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Get string display in event panel for the event"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return string input"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public String getDisplayString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (values.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            return NO_REMINDER_DISPLAY;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        String output \u003d toString().replace(\"PT\", \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        output +\u003d REMINDER_DISPLAY_SUFFIX;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (values.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            output \u003d EMPTY_VALUE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            for (Duration duration: values) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                output +\u003d duration.toString() + \", \";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            output \u003d output.substring(0, output.length() - 2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return ((this \u003d\u003d other) || ("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                other instanceof ReminderDurationList"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        \u0026\u0026 values.equals(((ReminderDurationList) other).get())));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return values.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 142
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/ReminderTimeList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static java.lang.Boolean.FALSE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " * Represents a HashMap of reminder time, hasPoppedUp in the scheduler."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " * Guarantees: uniqueness"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "public class ReminderTimeList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Map\u003cDateTime, Boolean\u003e values \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Default constructor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public ReminderTimeList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param formattedDateTimes A local date time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public ReminderTimeList(List\u003cDateTime\u003e formattedDateTimes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        requireNonNull(formattedDateTimes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (DateTime formmattedDateTime: formattedDateTimes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            values.put(formmattedDateTime, FALSE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @return the current number of reminder times"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return values.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public Map\u003cDateTime, Boolean\u003e get () {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return values;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (DateTime reminderTime: values.keySet()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            output +\u003d reminderTime.toString() + \": \" + values.get(reminderTime).toString() + \", \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (values.size() \u003e 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            output \u003d output.substring(0, output.length() - 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return values.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 68
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/RepeatType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents a Event\u0027s recurring type in scheduler."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public enum RepeatType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    DAILY,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    WEEKLY,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    MONTHLY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    YEARLY"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 12
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/Venue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents an Event\u0027s venue in the scheduler."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Constructs a {@code Venue}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param venue A valid event venue."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Venue(String venue) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        value \u003d venue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                || (other instanceof Venue // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 value.equals(((Venue) other).value)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 40
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 6
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/event/exceptions/EventOverflowException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Signals that the operation will result in the scheduler having an overflow of events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventOverflowException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventOverflowException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        super(\"Operation would result in scheduler having too many events\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents a Tag in the scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/tag/TagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of events that does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains the same event as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(TagList replacement) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TagList // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((TagList) other).internalList));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/util/SampleSchedulerDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.RepeatEventGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Contains utility methods for populating {@code Scheduler} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class SampleSchedulerDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final ArrayList\u003cUUID\u003e CONSTANT_EVENTUID \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a621\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a622\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a623\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a624\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a625\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a626\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a627\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final ArrayList\u003cUUID\u003e CONSTANT_EVENTSETUID \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a628\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a629\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a630\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a631\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a632\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a633\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a634\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new Event(CONSTANT_EVENTUID.get(0),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    CONSTANT_EVENTSETUID.get(0),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new EventName(\"Discussion with Jack\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 1, 14, 0)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 1, 17, 0)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Description(\"Talk about personal problems\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Venue(\"Jack\u0027s House\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    RepeatType.NONE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 1, 17, 0)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getTagSet(\"Talk\", \"Personal\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    getReminderDurationList(0, 2)),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new Event(CONSTANT_EVENTUID.get(1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    CONSTANT_EVENTSETUID.get(1),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new EventName(\"Interview with John\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 2, 13, 0)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 2, 15, 0)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Description(\"Interview for position as a software engineer\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Venue(\"Jane Street\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    RepeatType.NONE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 2, 15, 0)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getTagSet(\"Interview\", \"Work\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    getReminderDurationList(1)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new Event(CONSTANT_EVENTUID.get(2),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    CONSTANT_EVENTSETUID.get(2),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new EventName(\"Study with Jane\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 3, 10, 0)),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 3, 11, 0)),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Description(\"Study for MA2101\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Venue(\"NUS\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    RepeatType.DAILY,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 6, 11, 0)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getTagSet(\"Study\", \"School\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    getReminderDurationList(0, 1, 3)),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new Event(CONSTANT_EVENTUID.get(3),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    CONSTANT_EVENTSETUID.get(3),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new EventName(\"Study with Jill\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 3, 11, 0)),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 3, 12, 0)),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Description(\"Study for CS2103\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Venue(\"NUS\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    RepeatType.DAILY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 6, 12, 0)),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getTagSet(\"Study\", \"School\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    getReminderDurationList()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new Event(CONSTANT_EVENTUID.get(4),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    CONSTANT_EVENTSETUID.get(4),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new EventName(\"Jim\u0027s Birthday\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 12, 31, 0, 0)),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 12, 31, 1, 0)),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Description(\"Celebrate Jim\u0027s Birthday\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Venue(\"Jim\u0027s House\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    RepeatType.YEARLY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2020, 12, 31, 1, 0)),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getTagSet(\"Celebration\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getReminderDurationList(1, 2)),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new Event(CONSTANT_EVENTUID.get(5),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    CONSTANT_EVENTSETUID.get(5),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new EventName(\"Leap Day Celebration\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2016, 2, 29, 0, 0)),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2016, 2, 29, 1, 0)),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Description(\"Celebrate a day that happens one in 4 years\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Venue(\"Marina Bay Sands\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    RepeatType.YEARLY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2020, 2, 29, 1, 0)),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getTagSet(\"Celebration\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getReminderDurationList(0)),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            new Event(CONSTANT_EVENTUID.get(6),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    CONSTANT_EVENTSETUID.get(6),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new EventName(\"Startup Lecture\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 28, 8, 0)),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 1, 28, 10, 0)),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Description(\"Lecture about entrepreneurship\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new Venue(\"iCube\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    RepeatType.MONTHLY,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    new DateTime(LocalDateTime.of(2018, 3, 28, 10, 0)),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    getTagSet(\"Timetable\", \"Study\", \"School\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    getReminderDurationList(0, 1, 2, 3)),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static ReadOnlyScheduler getSampleScheduler() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler sampleScheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            sampleScheduler.addEvents(RepeatEventGenerator.getInstance().generateAllRepeatedEvents(sampleEvent));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return sampleScheduler;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Returns a reminderDurationList given index between 0 to 3"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static ReminderDurationList getReminderDurationList(Integer... index) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ReminderDurationList list \u003d new ReminderDurationList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ArrayList\u003cDuration\u003e durations \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                Duration.parse(\"PT15M\"),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                Duration.parse(\"PT30M\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                Duration.parse(\"PT1H30M\"),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                Duration.parse(\"PT1H\")));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        for (Integer i: index) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            list.add(durations.get(i));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 33,
      "ChengYuuu": 111,
      "YezhongZ": 16
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/DateTimeAdapter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javax.xml.bind.annotation.adapters.XmlAdapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A XmlAdapter that helps to map {@code DateTime} to JAXB format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class DateTimeAdapter extends XmlAdapter\u003cString, DateTime\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public DateTime unmarshal(String v) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new DateTime(LocalDateTime.parse(v));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String marshal(DateTime v) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return v.value.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 22
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/ReminderDurationListAdapter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javax.xml.bind.annotation.adapters.XmlAdapter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " * JAXB-friendly adapted version of the {@code ReminderDurationList}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "public class ReminderDurationListAdapter extends XmlAdapter\u003cString, ReminderDurationList\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public String marshal(ReminderDurationList v) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return v.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public ReminderDurationList unmarshal(String v) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ReminderDurationList reminderDurationList \u003d new ReminderDurationList(v);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return reminderDurationList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 22
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/SchedulerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents a storage for {@link seedu.scheduler.model.Scheduler}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public interface SchedulerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the file path of the scheduler data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    Path getSchedulerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns Scheduler data as a {@link seedu.scheduler.model.ReadOnlyScheduler}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see #getSchedulerFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Saves the given {@link ReadOnlyScheduler} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param scheduler cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see #saveScheduler(ReadOnlyScheduler)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 45
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public interface Storage extends SchedulerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Scheduler methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    Path getSchedulerFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Saves the current version of the Scheduler to the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Creates the scheduler data file if it is missing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    void handleSchedulerChangedEvent(SchedulerChangedEvent schedulerChangedEvent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 24,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Manages storage of Scheduler data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private SchedulerStorage schedulerStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public StorageManager(SchedulerStorage schedulerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.schedulerStorage \u003d schedulerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Scheduler methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return schedulerStorage.getSchedulerFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return readScheduler(schedulerStorage.getSchedulerFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        logger.fine(\"Attempting to read data from scheduler storage file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return schedulerStorage.readScheduler(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        saveScheduler(scheduler, schedulerStorage.getSchedulerFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        logger.fine(\"Attempting to write to scheduler data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        schedulerStorage.saveScheduler(scheduler, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void handleSchedulerChangedEvent(SchedulerChangedEvent event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            saveScheduler(event.data);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 52,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Represents a storage for {@link seedu.scheduler.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Saves the given {@link seedu.scheduler.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/XmlAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * JAXB-friendly version of Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class XmlAdaptedEvent {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private UUID eventUid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private UUID eventSetUid;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlJavaTypeAdapter(DateTimeAdapter.class)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private DateTime startDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlJavaTypeAdapter(DateTimeAdapter.class)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private DateTime endDateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private RepeatType repeatType;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlJavaTypeAdapter(DateTimeAdapter.class)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private DateTime repeatUntilDateTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @XmlJavaTypeAdapter(ReminderDurationListAdapter.class)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private ReminderDurationList reminderDurationList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Constructs an XmlAdaptedEvent."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public XmlAdaptedEvent() {}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Constructs an {@code XmlAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public XmlAdaptedEvent(UUID eventUid, UUID eventSetUid,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                           String eventName, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                           String description, String venue, RepeatType repeatType,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                           DateTime repeatUntilDateTime, List\u003cXmlAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                           ReminderDurationList reminderDurationList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.eventUid \u003d eventUid;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.eventSetUid \u003d eventSetUid;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.repeatType \u003d repeatType;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.repeatUntilDateTime \u003d repeatUntilDateTime;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.reminderDurationList \u003d reminderDurationList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Converts a given Event into this class for JAXB use."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedEvent"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public XmlAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        eventUid \u003d source.getEventUid();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        eventSetUid \u003d source.getEventSetUid();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventName \u003d source.getEventName().value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        startDateTime \u003d source.getStartDateTime();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        endDateTime \u003d source.getEndDateTime();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        venue \u003d source.getVenue().value;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        repeatType \u003d source.getRepeatType();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        repeatUntilDateTime \u003d source.getRepeatUntilDateTime();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        reminderDurationList \u003d source.getReminderDurationList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final List\u003cTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            eventTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventUid \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, UUID.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        final UUID modelUid \u003d eventUid;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        if (eventSetUid \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, UUID.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        final UUID modelUuid \u003d eventSetUid;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!EventName.isValidEventName(eventName)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final EventName modelName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final DateTime modelStartDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final DateTime modelEndDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final Venue modelVenue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (repeatType \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, RepeatType.class.getSimpleName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final RepeatType modelRepeatType \u003d repeatType;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (repeatUntilDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final DateTime modelRepeatUntilDateTime \u003d repeatUntilDateTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eventTags);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        if (reminderDurationList \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ReminderDurationList.class.getSimpleName()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        final ReminderDurationList modelReminderDurationList \u003d reminderDurationList;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return new Event(modelUid, modelUuid, modelName, modelStartDateTime, modelEndDateTime, modelDescription,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                modelVenue, modelRepeatType, modelRepeatUntilDateTime, modelTags, modelReminderDurationList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!(other instanceof XmlAdaptedEvent)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return Objects.equals(eventUid, otherEvent.eventUid)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                \u0026\u0026 Objects.equals(eventSetUid, otherEvent.eventSetUid)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 Objects.equals(eventName, otherEvent.eventName)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 Objects.equals(startDateTime, otherEvent.startDateTime)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 Objects.equals(endDateTime, otherEvent.endDateTime)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherEvent.description)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 Objects.equals(repeatType, otherEvent.repeatType)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 Objects.equals(repeatUntilDateTime, otherEvent.repeatUntilDateTime)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                \u0026\u0026 tagged.equals(otherEvent.tagged)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                \u0026\u0026 reminderDurationList.equals(otherEvent.reminderDurationList);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 32,
      "ChengYuuu": 173,
      "YezhongZ": 14
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Stores scheduler and scheduler book data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Saves the given scheduler data to the specified file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void saveSchedulerDataToFile(Path file, XmlSerializableScheduler scheduler)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            XmlUtil.saveDataToFile(file, scheduler);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns scheduler in the file or an empty scheduler"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static XmlSerializableScheduler loadSchedulerDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 28,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/XmlSchedulerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A class to access Scheduler data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class XmlSchedulerStorage implements SchedulerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlSchedulerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public XmlSchedulerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return readScheduler(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Similar to {@link #readScheduler()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            logger.info(\"Scheduler file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlSerializableScheduler xmlScheduler \u003d XmlFileStorage.loadSchedulerDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return Optional.of(xmlScheduler.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        saveScheduler(scheduler, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Similar to {@link #saveScheduler(ReadOnlyScheduler)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(scheduler);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlFileStorage.saveSchedulerDataToFile(filePath, new XmlSerializableScheduler(scheduler));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 80
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/XmlSerializableScheduler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * An Immutable Scheduler that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "@XmlRootElement(name \u003d \"scheduler\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class XmlSerializableScheduler {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private List\u003cXmlAdaptedEvent\u003e events;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Creates an empty XmlSerializableScheduler."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public XmlSerializableScheduler() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public XmlSerializableScheduler(ReadOnlyScheduler src) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Converts this scheduler into the model\u0027s {@code Scheduler} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Scheduler toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (XmlAdaptedEvent e : events) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Event event \u003d e.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            scheduler.addEvent(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return scheduler;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!(other instanceof XmlSerializableScheduler)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return events.equals(((XmlSerializableScheduler) other).events);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 66
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.EventPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final String CALENDER_PAGE_URL \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            \"https://calendar.google.com/calendar/b/2/r/month\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        runDelayAction(this::loadCalendarPage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Run an action later."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private void runDelayAction(Runnable runnable) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        new java.util.Timer().schedule("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                new java.util.TimerTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        runnable.run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                },"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                999999000"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void loadCalendarPage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        loadPage(CALENDER_PAGE_URL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private void loadEventPage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        loadPage(CALENDER_PAGE_URL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void reloadPage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().reload());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void handleEventPanelSelectionChangedEvent(EventPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        loadEventPage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        reloadPage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 5,
      "YezhongZ": 30,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import org.controlsfx.control.textfield.TextFields;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.ListElementPointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.GetGoogleCalendarEventsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        TextFields.bindAutoCompletion("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                commandTextField, AddCommand.COMMAND_WORD, AddCommand.COMMAND_ALIAS_ONE, AddCommand.COMMAND_ALIAS_TWO,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                AddTagCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD, ClearCommand.COMMAND_ALIAS_ONE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                ClearCommand.COMMAND_ALIAS_TWO, ClearCommand.COMMAND_ALIAS_THREE, ClearCommand.COMMAND_ALIAS_FOUR,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                DeleteCommand.COMMAND_WORD, DeleteCommand.COMMAND_ALIAS_ONE, DeleteCommand.COMMAND_ALIAS_TWO,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS_THREE, DeleteCommand.COMMAND_ALIAS_FOUR, DeleteCommand.COMMAND_ALIAS_FIVE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                EditCommand.COMMAND_WORD, EditCommand.COMMAND_ALIAS_ONE, EditCommand.COMMAND_ALIAS_TWO,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                ExitCommand.COMMAND_WORD, ExitCommand.COMMAND_ALIAS_ONE, ExitCommand.COMMAND_ALIAS_TWO,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                ExitCommand.COMMAND_ALIAS_TWO, ExitCommand.COMMAND_ALIAS_THREE, FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                FindCommand.COMMAND_ALIAS_ONE, FindCommand.COMMAND_ALIAS_TWO, FindCommand.COMMAND_ALIAS_THREE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                GetGoogleCalendarEventsCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD, HelpCommand.COMMAND_ALIAS_ONE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                HelpCommand.COMMAND_ALIAS_TWO, HelpCommand.COMMAND_ALIAS_THREE, HistoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                HistoryCommand.COMMAND_ALIAS_ONE, HistoryCommand.COMMAND_ALIAS_TWO, HistoryCommand.COMMAND_ALIAS_THREE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                HistoryCommand.COMMAND_ALIAS_FOUR, HistoryCommand.COMMAND_ALIAS_FIVE, ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                ListCommand.COMMAND_ALIAS_ONE, ListCommand.COMMAND_ALIAS_TWO, ListCommand.COMMAND_ALIAS_THREE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                RedoCommand.COMMAND_WORD, RedoCommand.COMMAND_ALIAS_ONE, RedoCommand.COMMAND_ALIAS_TWO,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                RedoCommand.COMMAND_ALIAS_THREE, SelectCommand.COMMAND_WORD, SelectCommand.COMMAND_ALIAS_ONE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                SelectCommand.COMMAND_ALIAS_TWO, SelectCommand.COMMAND_ALIAS_THREE, SelectCommand.COMMAND_ALIAS_FOUR,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                SelectCommand.COMMAND_ALIAS_FIVE, UndoCommand.COMMAND_WORD, UndoCommand.COMMAND_ALIAS_ONE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "                UndoCommand.COMMAND_ALIAS_TWO, UndoCommand.COMMAND_ALIAS_THREE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 8,
      "-": 143,
      "HEARTOFAL1ON": 37
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/EventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Label eventName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Label startDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private Label reminderDurationList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventName.setText(event.getEventName().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        startDateTime.setText(event.getStartDateTime().getPrettyString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        endDateTime.setText(event.getEndDateTime().getPrettyString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        endDateTime.setText(event.getEndDateTime().getPrettyString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        venue.setText(event.getVenue().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        reminderDurationList.setText(event.getReminderDurationList().getDisplayString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        event.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 3,
      "ChengYuuu": 21,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/EventListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.EventPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        setConnections(eventList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void setConnections(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        raise(new EventPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Scrolls to the {@code EventCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            eventListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            eventListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 27,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private StackPane eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getSchedulerFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventListPanel getEventListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return eventListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 15,
      "-": 188
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/PopUp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " * PopUp window for alert"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "public class PopUp {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Display the Popup window"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static void display(String title, String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Stage window \u003d new Stage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        // the popup window needs to be taken care of first"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        window.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        window.setTitle(title);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        window.setMinWidth((250));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        label.setText(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Button closeButton \u003d new Button(\"Close the window\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        closeButton.setOnAction(e -\u003e window.close());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        layout.setPadding(new Insets(10, 20, 20, 20));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        layout.getChildren().addAll(label, closeButton);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Scene scene \u003d new Scene(layout);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        window.showAndWait();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 43,
      "ChengYuuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void handleSchedulerChangedEvent(SchedulerChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 9,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 102
    }
  },
  {
    "path": "src/main/resources/credentials/credentials.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "{\"installed\":{\"client_id\":\"274009419713-hhmt53qrqt5bff2v7r2rq4nkb7ragipf.apps.googleusercontent.com\",\"project_id\":\"my-test-project-1536551030041\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://www.googleapis.com/oauth2/v3/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_secret\":\"z44XCwL35vvesaiiaMJL1RRM\",\"redirect_uris\":[\"urn:ietf:wg:oauth:2.0:oob\",\"http://localhost\"]}}"
      }
    ],
    "authorContributionMap": {
      "YezhongZ": 1
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003cLabel fx:id\u003d\"eventName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDateTime\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDateTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "      \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"reminderDurationList\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reminderDurationList\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 9,
      "ChengYuuu": 3,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "  \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "          \u003cVBox fx:id\u003d\"eventList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t \u003ctitle\u003eHome Page\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cfont size\u003d\"8\" color\u003d\"white\"\u003eDear fellow CS2103 classmate:\u003c/font\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cfont size\u003d\"6\" color\u003d\"white\"\u003eThis app could potentially mess up your personal Google Calendar. \u003c/font\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cp\u003e\u003cfont size\u003d\"6\" color\u003d\"white\"\u003eHere is the Test Google Account for this app. \u003c/font\u003e\u003c/p\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cfont size\u003d\"6\" color\u003d\"white\"\u003eGmail:          CS21031819F111Tester@gmail.com \u003c/font\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cp\u003e\u003cfont size\u003d\"6\" color\u003d\"white\"\u003ePassword:    CS2103Test \u003c/font\u003e\u003c/p\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cfont size\u003d\"6\" color\u003d\"white\"\u003ePlease take note of the above infomation. \u003c/font\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cfont size\u003d\"6\" color\u003d\"white\"\u003eThe Google Calendar Sign-in page will appear here after 45 seconds. \u003c/font\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "\t\u003cfont size\u003d\"8\" color\u003d\"white\"\u003eThank you and hope you enjoy our app.\u003c/font\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "YezhongZ": 10,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "  \"schedulerFilePath\" : \"scheduler.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "  \"schedulerFilePath\" : \"scheduler.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSchedulerStorageTest/invalidAndValidEventScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c!-- Valid Event --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003eff1b7186-5f40-47e0-ac19-32e15c61f30e\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eCS2103 Tutorial\u003c/eventName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eF11 Tutorial slot\u003c/description\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cpriority\u003eLOW\u003c/priority\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eSchool of Computing\u003c/venue\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-09-21 11:00:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT15M, PT1H30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c!-- Event with invalid eventName field --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003ee87178aa-90bc-4250-9cc2-30d83c86d722\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003e study with blank space \u003c/eventName\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-10-11T00:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-10-11T01:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cpriority\u003eNONE\u003c/priority\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003e\u003c/venue\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-10-11 01:00:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT15M, PT1H30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 2,
      "ChengYuuu": 25,
      "YezhongZ": 2
    }
  },
  {
    "path": "src/test/data/XmlSchedulerStorageTest/invalidEventScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c!-- Event with invalid eventName field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003eff1b7186-5f40-47e0-ac19-32e15c61f30e\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003e study with blank space \u003c/eventName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eF11 Tutorial slot\u003c/description\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cpriority\u003eLOW\u003c/priority\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eSchool of Computing\u003c/venue\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-09-21 11:00:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT15M, PT1H30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 1,
      "ChengYuuu": 14,
      "YezhongZ": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableSchedulerTest/invalidEventScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c!-- Event with invalid eventName field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a621\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003eff1b7186-5f40-47e0-ac19-32e15c61f30e\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003e study with blank space \u003c/eventName\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eF11 Tutorial slot\u003c/description\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cpriority\u003eLOW\u003c/priority\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eSchool of Computing\u003c/venue\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-09-21 11:00:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT15M, PT1H30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 1,
      "ChengYuuu": 14,
      "YezhongZ": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableSchedulerTest/typicalEventsScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c!-- Scheduler save file which contains the same Event values as in TypicalEvents#getTypicalScheduler() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a621\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a632\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eDiscussion with Jack\u003c/eventName\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-01T14:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-01T17:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eTalk about personal problems\u003c/description\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eJack\u0027s House\u003c/venue\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-01T17:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT15M, PT1H30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eTalk\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003ePersonal\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a622\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a633\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eInterview with John\u003c/eventName\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-02T13:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-02T15:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eInterview for position as a software engineer\u003c/description\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eJane Street\u003c/venue\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-02T15:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eWork\u003c/tagged\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eInterview\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a623\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a634\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStudy with Jane\u003c/eventName\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-03T10:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-03T11:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eStudy for MA2101\u003c/description\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eDAILY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-06T11:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a623\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a634\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStudy with Jane\u003c/eventName\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-04T10:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-04T11:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eStudy for MA2101\u003c/description\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eDAILY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-06T11:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a623\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a634\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStudy with Jane\u003c/eventName\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-05T10:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-05T11:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eStudy for MA2101\u003c/description\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eDAILY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-06T11:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a623\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a634\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStudy with Jane\u003c/eventName\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-06T10:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-06T11:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eStudy for MA2101\u003c/description\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eDAILY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-06T11:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a624\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a635\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStudy with Jill\u003c/eventName\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-03T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-03T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eStudy for CS2103\u003c/description\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eDAILY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-06T12:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a624\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a635\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStudy with Jill\u003c/eventName\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-04T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-04T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eStudy for CS2103\u003c/description\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eDAILY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-06T12:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a624\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a635\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStudy with Jill\u003c/eventName\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-05T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-05T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eStudy for CS2103\u003c/description\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eDAILY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-06T12:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a624\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a635\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStudy with Jill\u003c/eventName\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-06T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-06T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eStudy for CS2103\u003c/description\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eNUS\u003c/venue\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eDAILY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-01-06T12:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a627\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a638\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eJim\u0027s Birthday\u003c/eventName\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-12-31T00:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-12-31T01:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eCelebrate Jim\u0027s Birthday\u003c/description\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eJim\u0027s House\u003c/venue\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eYEARLY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2020-12-31T01:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT30M, PT1H30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eCelebration\u003c/tagged\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a627\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a638\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eJim\u0027s Birthday\u003c/eventName\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2019-12-31T00:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2019-12-31T01:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eCelebrate Jim\u0027s Birthday\u003c/description\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eJim\u0027s House\u003c/venue\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eYEARLY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2020-12-31T01:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT30M, PT1H30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eCelebration\u003c/tagged\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a627\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a638\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eJim\u0027s Birthday\u003c/eventName\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2020-12-31T00:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2020-12-31T01:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eCelebrate Jim\u0027s Birthday\u003c/description\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eJim\u0027s House\u003c/venue\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eYEARLY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2020-12-31T01:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT30M, PT1H30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eCelebration\u003c/tagged\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a626\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a637\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eLeap Day Celebration\u003c/eventName\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2016-02-29T00:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2016-02-29T01:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eCelebrate a day that happens one in 4 years\u003c/description\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eMarina Bay Sands\u003c/venue\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eYEARLY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2020-02-29T01:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eCelebration\u003c/tagged\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a626\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a637\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eLeap Day Celebration\u003c/eventName\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2020-02-29T00:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2020-02-29T01:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eCelebrate a day that happens one in 4 years\u003c/description\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eMarina Bay Sands\u003c/venue\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eYEARLY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2020-02-29T01:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eCelebration\u003c/tagged\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a625\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a636\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStartup Lecture\u003c/eventName\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-01-28T08:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-01-28T10:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eLecture about entrepreneurship\u003c/description\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eiCube\u003c/venue\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eMONTHLY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-03-28T10:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eTimetable\u003c/tagged\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a625\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a636\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStartup Lecture\u003c/eventName\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-02-28T08:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-02-28T10:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eLecture about entrepreneurship\u003c/description\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eiCube\u003c/venue\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eMONTHLY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-03-28T10:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eTimetable\u003c/tagged\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a625\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e066db0fd-0bd2-423f-aef4-fd1f8d30a636\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eStartup Lecture\u003c/eventName\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-03-28T08:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-03-28T10:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eLecture about entrepreneurship\u003c/description\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eiCube\u003c/venue\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eMONTHLY\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-03-28T10:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eTimetable\u003c/tagged\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eStudy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 6,
      "ChengYuuu": 212,
      "YezhongZ": 36
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidEventField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c!-- Event with an invalid eventName field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cevent\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    \u003ceventUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd4\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    \u003ceventSetUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd3\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003ceventName\u003e start blank space\u003c/eventName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cdescription\u003eF11 Tutorial slot\u003c/description\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cvenue\u003eSchool of Computing\u003c/venue\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003crepeatUntilDateTime\u003e2018-09-21T12:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003ctagged\u003eplay\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    \u003creminderDurationList\u003ePT15M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/event\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 1,
      "ChengYuuu": 12,
      "YezhongZ": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingEventField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c!-- Event with missing eventName field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cevent\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    \u003ceventUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd4\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    \u003ceventSetUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd3\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cdescription\u003eF11 Tutorial slot\u003c/description\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cvenue\u003eSchool of Computing\u003c/venue\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003crepeatUntilDateTime\u003e2018-09-21T12:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003ctagged\u003eplay\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    \u003creminderDurationList\u003ePT15M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/event\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 1,
      "ChengYuuu": 11,
      "YezhongZ": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd3\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eCS2103 Tutorial\u003c/eventName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eF11 Tutorial slot\u003c/description\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cpriority\u003eLOW\u003c/priority\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eSchool of Computing\u003c/venue\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-09-21T11:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 14,
      "YezhongZ": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validEvent.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cevent\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    \u003ceventUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd4\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    \u003ceventUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd4\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    \u003ceventSetUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd3\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003ceventName\u003eCS2103 Tutorial\u003c/eventName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cdescription\u003eF11 Tutorial slot\u003c/description\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cvenue\u003eSchool of Computing\u003c/venue\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003crepeatUntilDateTime\u003e2018-09-21T12:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003ctagged\u003eplay\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    \u003creminderDurationList\u003ePT15M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/event\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 1,
      "ChengYuuu": 11,
      "YezhongZ": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd4\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd3\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003eCS2103 Tutorial\u003c/eventName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003eF11 Tutorial slot\u003c/description\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cpriority\u003eLOW\u003c/priority\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003eSchool of Computing\u003c/venue\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-09-21T11:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT15M, PT30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd5\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003e1bae658a-c457-4b83-8319-d45f8e61028d\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003ez\u003c/eventName\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-10-11T02:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-10-11T03:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cpriority\u003eNONE\u003c/priority\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003e\u003c/venue\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-10-11T03:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003ePT30M\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventUid\u003eaef6b77e-20a7-4de4-8402-343fbd475fd6\u003c/eventUid\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        \u003ceventSetUid\u003eef44088d-c7f7-49e0-974f-fd3acb9f8e87\u003c/eventSetUid\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003ceventName\u003ezz\u003c/eventName\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cstartDateTime\u003e2018-10-11T15:00\u003c/startDateTime\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cendDateTime\u003e2018-10-11T16:00\u003c/endDateTime\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cdescription\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cpriority\u003eNONE\u003c/priority\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003cvenue\u003e\u003c/venue\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatType\u003eNONE\u003c/repeatType\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        \u003crepeatUntilDateTime\u003e2018-10-11T16:00\u003c/repeatUntilDateTime\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        \u003creminderDurationList\u003eNONE\u003c/reminderDurationList\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 3,
      "ChengYuuu": 33,
      "YezhongZ": 6
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/EventCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Provides a handle to a event card in the event list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String EVENT_NAME_FIELD_ID \u003d \"#eventName\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String START_DATETIME_FIELD_ID \u003d \"#startDateTime\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String END_DATETIME_FIELD_ID \u003d \"#endDateTime\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VENUE_FIELD_ID \u003d \"#venue\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Label eventNameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Label startDateTimeLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Label endDateTimeLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Label venueLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventNameLabel \u003d getChildNode(EVENT_NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        startDateTimeLabel \u003d getChildNode(START_DATETIME_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        endDateTimeLabel \u003d getChildNode(END_DATETIME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        venueLabel \u003d getChildNode(VENUE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return eventNameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String getStartDateTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return startDateTimeLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String getEndDateTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return endDateTimeLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return venueLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if this handle contains {@code event}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean equals(Event event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return getEventName().equals(event.getEventName().value)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 getStartDateTime().equals(event.getStartDateTime().getPrettyString())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 getEndDateTime().equals(event.getEndDateTime().getPrettyString())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 getVenue().equals(event.getVenue().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(event.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 87
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/EventListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Provides a handle for {@code EventListPanel} containing the list of {@code EventCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventListPanelHandle extends NodeHandle\u003cListView\u003cEvent\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String EVENT_LIST_VIEW_ID \u003d \"#eventListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Optional\u003cEvent\u003e lastRememberedSelectedEventCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventListPanelHandle(ListView\u003cEvent\u003e eventListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        super(eventListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a handle to the selected {@code EventCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e selectedEventList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (selectedEventList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"Event list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .map(EventCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedEventList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Navigates the listview to display {@code event}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void navigateToCard(Event event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (!getRootNode().getItems().contains(event)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new IllegalArgumentException(\"Event does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            getRootNode().scrollTo(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Selects the {@code EventCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the event card handle of a event associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventCardHandle getEventCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .map(EventCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .filter(handle -\u003e handle.equals(getEvent(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Event getEvent(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Remembers the selected {@code EventCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void rememberSelectedEventCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            lastRememberedSelectedEventCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            lastRememberedSelectedEventCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns true if the selected {@code EventCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code rememberSelectedEventCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public boolean isSelectedEventCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return lastRememberedSelectedEventCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return !lastRememberedSelectedEventCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    || !lastRememberedSelectedEventCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final EventListPanelHandle eventListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventListPanel \u003d new EventListPanelHandle(getChildNode(EventListPanelHandle.EVENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventListPanelHandle getEventListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return eventListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.XmlSerializableScheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    protected Supplier\u003cReadOnlyScheduler\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyScheduler\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            createDataFileWithData(new XmlSerializableScheduler(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userPrefs.setSchedulerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a defensive copy of the scheduler data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Scheduler readStorageScheduler() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return new Scheduler(storage.readScheduler().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"Data is not in the Scheduler format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return storage.getSchedulerFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model copy \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredEventList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 25,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : iScheduler Xs Max\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final Index fifthEventIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(fifthEventIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(fifthEventIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(fifthEventIndex.equals(fifthEventIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(fifthEventIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(fifthEventIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(fifthEventIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 8,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.model.util.SampleSchedulerDataUtil.getReminderDurationList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.XmlAdaptedEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.XmlSerializableScheduler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.SchedulerBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validScheduler.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path MISSING_EVENT_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingEventField.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path INVALID_EVENT_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventField.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path VALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"validEvent.xml\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempScheduler.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \" start blank space\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final UUID VALID_EVENTUID \u003d UUID.fromString(\"aef6b77e-20a7-4de4-8402-343fbd475fd4\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final UUID VALID_EVENTSETUID \u003d UUID.fromString(\"aef6b77e-20a7-4de4-8402-343fbd475fd3\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d \"CS2103 Tutorial\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private static final DateTime VALID_START_DATETIME \u003d new DateTime(LocalDateTime.of(2018, 9,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            21, 11, 0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private static final DateTime VALID_END_DATETIME \u003d new DateTime(LocalDateTime.of(2018, 9,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            21, 12, 0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"F11 Tutorial slot\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_VENUE \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final RepeatType VALID_REPEAT_TYPE \u003d RepeatType.NONE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private static final DateTime VALID_REPEAT_UNTIL_DATETIME \u003d new DateTime(LocalDateTime.of(2018, 9,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            21, 12, 0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"play\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private static final ReminderDurationList VALID_REMINDER_DURATION_LIST \u003d getReminderDurationList(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlUtil.getDataFromFile(null, Scheduler.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, Scheduler.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, Scheduler.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableScheduler.class).toModelType();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(3, dataFromFile.getEventList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void xmlAdaptedEventFromFile_fileWithMissingEventField_validResult() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlAdaptedEvent actualEvent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                MISSING_EVENT_FIELD_FILE, XmlAdaptedEventWithRootElement.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent expectedEvent \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                null, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                VALID_REPEAT_TYPE, VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEvent, actualEvent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void xmlAdaptedEventFromFile_fileWithInvalidEventField_validResult() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlAdaptedEvent actualEvent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                INVALID_EVENT_FIELD_FILE, XmlAdaptedEventWithRootElement.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent expectedEvent \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID, INVALID_EVENT_NAME,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_START_DATETIME, VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEvent, actualEvent);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void xmlAdaptedEventFromFile_fileWithValidEvent_validResult() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlAdaptedEvent actualEvent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                VALID_EVENT_FILE, XmlAdaptedEventWithRootElement.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent expectedEvent \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID, VALID_EVENT_NAME,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_START_DATETIME, VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEvent, actualEvent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlUtil.saveDataToFile(null, new Scheduler());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new Scheduler());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlSerializableScheduler dataToWrite \u003d new XmlSerializableScheduler(new Scheduler());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlSerializableScheduler dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        SchedulerBuilder builder \u003d new SchedulerBuilder(new Scheduler());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        dataToWrite \u003d new XmlSerializableScheduler("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                builder.withEvent(new EventBuilder().build()).build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedEvent}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @XmlRootElement(name \u003d \"event\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static class XmlAdaptedEventWithRootElement extends XmlAdaptedEvent {}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 13,
      "ChengYuuu": 54,
      "YezhongZ": 8,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        logic.getFilteredEventList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     *      - {@code expectedModel}\u0027s scheduler book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 16,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.addEvents(List.of(validEvent));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(new AddCommand(validEvent), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validEvent), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventInList \u003d model.getScheduler().getEventList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(new AddCommand(eventInList), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 24,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.PopUpManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validEvent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(List.of(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event study \u003d new EventBuilder().withEventName(\"study\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event play \u003d new EventBuilder().withEventName(\"play\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        AddCommand addStudyCommand \u003d new AddCommand(study);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        AddCommand addPlayCommand \u003d new AddCommand(play);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same object -\u003e equals"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(addStudyCommand, addStudyCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same values -\u003e equals"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        AddCommand addStudyCommandCopy \u003d new AddCommand(study);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(addStudyCommand, addStudyCommandCopy);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different types -\u003e not equals"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(1, addStudyCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // null -\u003e not equals"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(null, addStudyCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different event -\u003e not equals"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(addStudyCommand, addPlayCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void resetData(ReadOnlyScheduler newData) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public ReadOnlyScheduler getScheduler() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void deleteRepeatingEvents(Event target) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void deleteUpcomingEvents(Event target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void addEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void updateRepeatingEvents(Event target, List\u003cEvent\u003e editedEvents) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void updateUpcomingEvents(Event target, List\u003cEvent\u003e editedEvents) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Event getFirstInstanceOfEvent(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public boolean canUndoScheduler() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public boolean canRedoScheduler() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void undoScheduler() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void redoScheduler() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void commitScheduler() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HEARTOFAL1ON"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        public void syncWithPopUpManager(PopUpManager popUpManager, Storage storage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * A Model stub that contains a single event."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * A Model stub that always accepts the event being added."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void addEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            requireNonNull(events);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            eventsAdded.addAll(events);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void commitScheduler() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public ReadOnlyScheduler getScheduler() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return new Scheduler();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 7,
      "ChengYuuu": 111,
      "YezhongZ": 4,
      "-": 117,
      "HEARTOFAL1ON": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_emptyScheduler_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_nonEmptyScheduler_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.resetData(new Scheduler());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 15,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.FLAG_ALL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_REMINDER_DURATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_REPEAT_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_REPEAT_UNTIL_DATE_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.util.SampleSchedulerDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final UUID VALID_EVENT_UID_MA2101 \u003d UUID.fromString(\"1bae658a-c457-4b83-8319-d45f8e61027d\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final UUID VALID_EVENT_UID_MA3220 \u003d UUID.fromString(\"aef6b77e-20a7-4de4-8402-343fbd475fd4\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final UUID VALID_EVENT_UUID_MA2101 \u003d UUID.fromString(\"1bae658a-c457-4b83-8319-d45f8e61028d\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final UUID VALID_EVENT_UUID_MA3220 \u003d UUID.fromString(\"aef6b77e-20a7-4de4-8402-343fbd475fd3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_EVENT_NAME_MA2101 \u003d \"MA2101\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_EVENT_NAME_MA3220 \u003d \"MA3220\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final LocalDateTime VALID_START_DATETIME_MA2101 \u003d LocalDateTime.of(2018, 1,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            1, 1, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final LocalDateTime VALID_START_DATETIME_MA3220 \u003d LocalDateTime.of(2019, 2,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            2, 2, 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final LocalDateTime VALID_END_DATETIME_MA2101 \u003d LocalDateTime.of(2018, 1,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            1, 1, 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final LocalDateTime VALID_END_DATETIME_MA3220 \u003d LocalDateTime.of(2019, 2,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            2, 2, 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_DESCRIPTION_MA2101 \u003d \"MA2101\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_DESCRIPTION_MA3220 \u003d \"MA3220\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_VENUE_MA2101 \u003d \"S17\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_VENUE_MA3220 \u003d \"LT20\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final RepeatType VALID_REPEAT_TYPE_MA2101 \u003d RepeatType.YEARLY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final RepeatType VALID_REPEAT_TYPE_MA3220 \u003d RepeatType.NONE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final LocalDateTime VALID_REPEAT_UNTIL_DATETIME_MA2101 \u003d LocalDateTime.of(2019, 1,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            1, 1, 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final LocalDateTime VALID_REPEAT_UNTIL_DATETIME_MA3220 \u003d LocalDateTime.of(2019, 2,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            2, 2, 3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_TAG_SCHOOL \u003d \"school\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_TAG_PLAY \u003d \"play\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating an event"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String VALID_DURATION_1H \u003d \"1H\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String VALID_DURATION_30M \u003d \"30M\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final ReminderDurationList VALID_DURATION_LIST_1H \u003d SampleSchedulerDataUtil.getReminderDurationList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final ReminderDurationList VALID_DURATION_LIST_30M \u003d SampleSchedulerDataUtil.getReminderDurationList("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String EVENT_NAME_DESC_MA2101 \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME_MA2101;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String EVENT_NAME_DESC_MA3220 \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME_MA3220;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String START_DATETIME_DESC_MA2101 \u003d \" \" + PREFIX_START_DATE_TIME + VALID_START_DATETIME_MA2101;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String START_DATETIME_DESC_MA3220 \u003d \" \" + PREFIX_START_DATE_TIME + VALID_START_DATETIME_MA3220;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String END_DATETIME_DESC_MA2101 \u003d \" \" + PREFIX_END_DATE_TIME + VALID_END_DATETIME_MA2101;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String END_DATETIME_DESC_MA3220 \u003d \" \" + PREFIX_END_DATE_TIME + VALID_END_DATETIME_MA3220;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String DESCRIPTION_DESC_MA2101 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MA2101;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String DESCRIPTION_DESC_MA3220 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MA3220;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VENUE_DESC_MA2101 \u003d \" \" + PREFIX_VENUE + VALID_VENUE_MA2101;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VENUE_DESC_MA3220 \u003d \" \" + PREFIX_VENUE + VALID_VENUE_MA3220;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String REPEAT_TYPE_DESC_MA2101 \u003d \" \" + PREFIX_REPEAT_TYPE + VALID_REPEAT_TYPE_MA2101;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String REPEAT_TYPE_DESC_MA3220 \u003d \" \" + PREFIX_REPEAT_TYPE + VALID_REPEAT_TYPE_MA3220;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String REPEAT_UNTIL_DATETIME_DESC_MA2101 \u003d \" \" + PREFIX_REPEAT_UNTIL_DATE_TIME"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + VALID_REPEAT_UNTIL_DATETIME_MA2101;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String REPEAT_UNTIL_DATETIME_DESC_MA3220 \u003d \" \" + PREFIX_REPEAT_UNTIL_DATE_TIME"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            + VALID_REPEAT_UNTIL_DATETIME_MA3220;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String TAG_DESC_SCHOOL \u003d \" \" + PREFIX_TAG + VALID_TAG_SCHOOL;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String TAG_DESC_PLAY \u003d \" \" + PREFIX_TAG + VALID_TAG_PLAY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String REMINDER_DURATION_LIST_1H \u003d \" \" + PREFIX_EVENT_REMINDER_DURATION + VALID_DURATION_1H;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public static final String REMINDER_DURATION_LIST_30M \u003d \" \" + PREFIX_EVENT_REMINDER_DURATION + VALID_DURATION_30M;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // empty string not allowed in event names"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_EVENT_NAME + \"  \";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String VALID_FLAG_ALL \u003d \" \" + FLAG_ALL;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final EditCommand.EditEventDescriptor DESC_MA2101;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final EditCommand.EditEventDescriptor DESC_MA3220;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DESC_MA2101 \u003d new EditEventDescriptorBuilder().withEventName(VALID_EVENT_NAME_MA2101)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withStartDateTime(VALID_START_DATETIME_MA2101).withEndDateTime(VALID_END_DATETIME_MA2101)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_MA2101).withVenue(VALID_VENUE_MA2101)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withRepeatType(VALID_REPEAT_TYPE_MA2101).withRepeatUntilDateTime(VALID_REPEAT_UNTIL_DATETIME_MA2101)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                .withTags(VALID_TAG_PLAY).withReminderDurationList(VALID_DURATION_LIST_1H).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DESC_MA3220 \u003d new EditEventDescriptorBuilder().withEventName(VALID_EVENT_NAME_MA3220)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withStartDateTime(VALID_START_DATETIME_MA3220).withEndDateTime(VALID_END_DATETIME_MA3220)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_MA3220).withVenue(VALID_VENUE_MA3220)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withRepeatType(VALID_REPEAT_TYPE_MA3220).withRepeatUntilDateTime(VALID_REPEAT_UNTIL_DATETIME_MA3220)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                .withTags(VALID_TAG_SCHOOL).withReminderDurationList(VALID_DURATION_LIST_1H).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * - the scheduler book and the filtered event list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler expectedScheduler \u003d new Scheduler(actualModel.getScheduler());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEventList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            assertEquals(expectedScheduler, actualModel.getScheduler());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredEventList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code model}\u0027s scheduler."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void showEventAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final String[] splitEventName \u003d event.getEventName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateFilteredEventList(new EventNameContainsKeywordsPredicate(Arrays.asList(splitEventName[0])));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(1, model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Deletes the first event in {@code model}\u0027s filtered list from {@code model}\u0027s scheduler."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void deleteFirstEvent(Model model) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event firstEvent \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.deleteEvent(firstEvent);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 27,
      "ChengYuuu": 84,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.FLAG_ALL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.FLAG_UPCOMING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                eventToDelete.getEventName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                eventToDelete.getEventName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showNoEvent(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of scheduler list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getScheduler().getEventList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_allRepeatingEvents_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EVENT, FLAG_ALL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                eventToDelete.getEventName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.deleteRepeatingEvents(eventToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_upcomingEvents_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EVENT, FLAG_UPCOMING);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                eventToDelete.getEventName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.deleteUpcomingEvents(eventToDelete);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // delete -\u003e first event deleted"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // undo -\u003e reverts scheduler back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // redo -\u003e same first event deleted again"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // execution failed -\u003e scheduler book state not added into model"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // single scheduler state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 1. Deletes a {@code Event} from a filtered list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted event in the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the event object regardless of indexing."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEventDeleted() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // delete -\u003e deletes second event in unfiltered event list / first event in filtered event list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // undo -\u003e reverts scheduler back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(eventToDelete, model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // redo -\u003e deletes same second event in unfiltered event list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no event."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void showNoEvent(Model model) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateFilteredEventList(e -\u003e false);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(model.getFilteredEventList().isEmpty());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 108,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESC_MA2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESC_MA3220;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MA2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EVENT, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                model.getFilteredEventList().get(0).getEventName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateEvent(model.getFilteredEventList().get(0), editedEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Event firstEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        EventBuilder eventInList \u003d new EventBuilder(firstEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedEvent \u003d eventInList.withEventName(VALID_EVENT_NAME_MA2101)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withEventName(VALID_EVENT_NAME_MA2101)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EVENT, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EVENT_SUCCESS, firstEvent.getEventName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        expectedModel.updateEvent(firstEvent, editedEvent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EVENT, new EditEventDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent.getEventName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventInFilteredList \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(eventInFilteredList).withEventName(VALID_EVENT_NAME_MA2101).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EditEventDescriptorBuilder().withEventName(VALID_EVENT_NAME_MA2101).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                eventInFilteredList.getEventName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateEvent(model.getFilteredEventList().get(0), editedEvent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_MA2101).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * but smaller than size of scheduler"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_invalidEventIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of scheduler list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getScheduler().getEventList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EditEventDescriptorBuilder().withEventName(VALID_EVENT_NAME_MA2101).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToEdit \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EVENT, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // edit -\u003e first event edited"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // undo -\u003e reverts scheduler back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // redo -\u003e same first event edited again"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_MA2101).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // execution failed -\u003e scheduler book state not added into model"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // single scheduler state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 1. Edits a {@code Event} from a filtered list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited event in the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the event object regardless of indexing."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEventEdited() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EVENT, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToEdit \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Event secondEditedEvent \u003d new EventBuilder(editedEvent).withEventUid(eventToEdit.getEventUid())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .withEventSetUid(eventToEdit.getEventSetUid()).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateEvent(eventToEdit, secondEditedEvent);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // edit -\u003e edits second event in unfiltered event list / first event in filtered event list"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // undo -\u003e reverts scheduler back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()), eventToEdit);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // redo -\u003e edits same second event in unfiltered event list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EVENT, DESC_MA2101);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor copyDescriptor \u003d new EditEventDescriptor(DESC_MA2101);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EVENT, copyDescriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EVENT, DESC_MA2101)));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EVENT, DESC_MA3220)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 105,
      "YezhongZ": 7,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/EditEventDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESC_MA2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESC_MA3220;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MA3220;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_END_DATETIME_MA3220;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MA3220;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_TYPE_MA3220;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_UNTIL_DATETIME_MA3220;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_START_DATETIME_MA3220;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_SCHOOL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_VENUE_MA3220;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EditEventDescriptorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptorWithSameValues \u003d new EditEventDescriptor(DESC_MA2101);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(DESC_MA2101.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(DESC_MA2101.equals(DESC_MA2101));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(DESC_MA3220));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different event name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor editedMA2101 \u003d new EditEventDescriptorBuilder(DESC_MA2101)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_MA3220).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(editedMA2101));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different start date time -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedMA2101 \u003d new EditEventDescriptorBuilder(DESC_MA2101)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withStartDateTime(VALID_START_DATETIME_MA3220).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(editedMA2101));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different end date time -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedMA2101 \u003d new EditEventDescriptorBuilder(DESC_MA2101).withEndDateTime(VALID_END_DATETIME_MA3220).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(editedMA2101));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedMA2101 \u003d new EditEventDescriptorBuilder(DESC_MA2101).withDescription(VALID_DESCRIPTION_MA3220).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(editedMA2101));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedMA2101 \u003d new EditEventDescriptorBuilder(DESC_MA2101).withVenue(VALID_VENUE_MA3220).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(editedMA2101));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different repeat type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedMA2101 \u003d new EditEventDescriptorBuilder(DESC_MA2101).withRepeatType(VALID_REPEAT_TYPE_MA3220).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(editedMA2101));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different repeat until date time -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedMA2101 \u003d new EditEventDescriptorBuilder(DESC_MA2101)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withRepeatUntilDateTime(VALID_REPEAT_UNTIL_DATETIME_MA3220).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(editedMA2101));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedMA2101 \u003d new EditEventDescriptorBuilder(DESC_MA2101).withTags(VALID_TAG_SCHOOL).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DESC_MA2101.equals(editedMA2101));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 49,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 7,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_EVENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JANE_DAY_FOUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JANE_DAY_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JANE_DAY_THREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JANE_DAY_TWO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JILL_DAY_FOUR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JILL_DAY_ONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JILL_DAY_THREE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JILL_DAY_TWO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_zeroKeywords_noEventFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EVENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEventList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void execute_multipleKeywords_multipleEventsFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EVENTS_LISTED_OVERVIEW, 8);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Study\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(Arrays.asList(STUDY_WITH_JANE_DAY_ONE, STUDY_WITH_JANE_DAY_TWO, STUDY_WITH_JANE_DAY_THREE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                STUDY_WITH_JANE_DAY_FOUR, STUDY_WITH_JILL_DAY_ONE, STUDY_WITH_JILL_DAY_TWO,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                STUDY_WITH_JILL_DAY_THREE, STUDY_WITH_JILL_DAY_FOUR),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                model.getFilteredEventList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private EventNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new EventNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 39,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/GetGoogleCalendarEventsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for GetGoogleEventsCommandCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "public class GetGoogleCalendarEventsCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void executeGgEvents_valid_success() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //TODO:Implement the test logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        GetGoogleCalendarEventsCommand getGoogleCalendarEventsCommand \u003d new GetGoogleCalendarEventsCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        String expectedMessage \u003d String.format(GetGoogleCalendarEventsCommand.MESSAGE_GGEVENTS_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        expectedModel.getFilteredEventList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YezhongZ": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 8,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 12,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.deleteFirstEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteFirstEvent(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteFirstEvent(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.undoScheduler();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.undoScheduler();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteFirstEvent(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteFirstEvent(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 21,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_THIRD_EVENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index lastEventIndex \u003d Index.fromOneBased(model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_EVENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertExecutionSuccess(lastEventIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(expectedModel, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventAtIndex(expectedModel, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of scheduler list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getScheduler().getEventList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_EVENT_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 38,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.deleteFirstEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteFirstEvent(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteFirstEvent(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteFirstEvent(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteFirstEvent(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 17,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MA2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MA3220;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.END_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.END_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EVENT_NAME_DESC_MA2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EVENT_NAME_DESC_MA3220;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_TYPE_DESC_MA2101;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_TYPE_DESC_MA3220;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_UNTIL_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_UNTIL_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.START_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.START_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_PLAY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_SCHOOL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MA2101;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_PLAY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_SCHOOL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VENUE_DESC_MA2101;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VENUE_DESC_MA3220;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.MA2101_JANUARY_1_2018_YEARLY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.MA3220_JANUARY_1_2019_SINGLE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event expectedEvent \u003d new EventBuilder(MA2101_JANUARY_1_2018_YEARLY).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // multiple names - last event name accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA3220 + EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // multiple start date time - last start date time accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA3220 + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // multiple end date time - last end date time accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // multiple description - last description accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + DESCRIPTION_DESC_MA3220 + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // multiple venue - last venue accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA3220 + VENUE_DESC_MA2101"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // multiple repeat type - last repeat type accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA3220"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // multiple repeat until date time - last repeat until date time accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA2101"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_UNTIL_DATETIME_DESC_MA3220 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event expectedEventMultipleTags \u003d new EventBuilder(MA2101_JANUARY_1_2018_YEARLY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withTags(VALID_TAG_SCHOOL, VALID_TAG_PLAY).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA2101"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_PLAY + TAG_DESC_SCHOOL,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEventMultipleTags));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event expectedEvent \u003d new EventBuilder(MA3220_JANUARY_1_2019_SINGLE).withVenue(\"\").build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MA3220 + START_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + END_DATETIME_DESC_MA3220 + DESCRIPTION_DESC_MA3220"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_TYPE_DESC_MA3220 + REPEAT_UNTIL_DATETIME_DESC_MA3220 + TAG_DESC_PLAY,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new AddCommand(expectedEvent));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // missing event name prefix"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_NAME_MA2101 + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_PLAY,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // invalid event name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + TAG_DESC_PLAY + TAG_DESC_SCHOOL, EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_SCHOOL, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_SCHOOL, EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_NAME_DESC_MA2101"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA2101"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + REPEAT_UNTIL_DATETIME_DESC_MA2101 + TAG_DESC_SCHOOL + TAG_DESC_PLAY,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 117,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"-^u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String argsString \u003d \"SomePreambleString p/pSlash value\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, hatQ);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 p/pSlash value\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, hatQ);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, hatQ);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, hatQ);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String argsString \u003d \"SomePreambleString p/ pSlash Value ^Q ^Q p/ pSlash another pSlash value\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, hatQ);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash Value\", \"pSlash another pSlash value\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined^Qjoined ^Q not joined^Qjoined\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, hatQ);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined^Qjoined\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 15,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, \"1 -a\", new DeleteCommand(INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, \"1 -u\", new DeleteCommand(INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parse_invalidFlags_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1 -q\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1 -q -z\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parse_multipleFlags_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1 -a -u\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 22,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MA2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MA3220;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.END_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.END_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EVENT_NAME_DESC_MA2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REMINDER_DURATION_LIST_1H;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_TYPE_DESC_MA2101;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_UNTIL_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.START_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.START_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_PLAY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_SCHOOL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MA2101;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MA3220;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DURATION_LIST_1H;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_END_DATETIME_MA2101;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_END_DATETIME_MA3220;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MA2101;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_TYPE_MA2101;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_UNTIL_DATETIME_MA2101;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_START_DATETIME_MA2101;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_START_DATETIME_MA3220;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_PLAY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_SCHOOL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_VENUE_MA2101;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_VENUE_MA3220;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VENUE_DESC_MA2101;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VENUE_DESC_MA3220;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_THIRD_EVENT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_NAME_MA2101, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"-5\" + EVENT_NAME_DESC_MA2101 + VALID_FLAG_ALL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"0\" + EVENT_NAME_DESC_MA2101 + VALID_FLAG_ALL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // invalid event name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC + VALID_FLAG_ALL,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC + VALID_FLAG_ALL, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // invalid event name followed by valid description"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC + DESCRIPTION_DESC_MA2101 + VALID_FLAG_ALL,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // valid event name followed by invalid event name. The test case for invalid event name followed"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // by valid event name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + EVENT_NAME_DESC_MA2101 + INVALID_EVENT_NAME_DESC + VALID_FLAG_ALL,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Event} being edited,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_SCHOOL + TAG_DESC_PLAY + TAG_EMPTY + VALID_FLAG_ALL,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_SCHOOL + TAG_EMPTY + TAG_DESC_PLAY + VALID_FLAG_ALL,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_SCHOOL + TAG_DESC_PLAY + VALID_FLAG_ALL,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + INVALID_TAG_DESC + VALID_FLAG_ALL, EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EVENT_NAME_DESC_MA2101 + START_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + END_DATETIME_DESC_MA2101 + DESCRIPTION_DESC_MA2101"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA2101 + REPEAT_UNTIL_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + TAG_DESC_PLAY + TAG_DESC_SCHOOL + REMINDER_DURATION_LIST_1H + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withEventName(VALID_EVENT_NAME_MA2101)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withStartDateTime(VALID_START_DATETIME_MA2101).withEndDateTime(VALID_END_DATETIME_MA2101)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_MA2101)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withVenue(VALID_VENUE_MA2101).withRepeatType(VALID_REPEAT_TYPE_MA2101)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withRepeatUntilDateTime(VALID_REPEAT_UNTIL_DATETIME_MA2101)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                .withTags(VALID_TAG_PLAY, VALID_TAG_SCHOOL).withReminderDurationList(VALID_DURATION_LIST_1H).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_MA3220 + VENUE_DESC_MA3220 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_MA3220)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withVenue(VALID_VENUE_MA3220).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EVENT;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EVENT_NAME_DESC_MA2101 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_MA2101).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // start date time"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_DATETIME_DESC_MA2101 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptorBuilder().withStartDateTime(VALID_START_DATETIME_MA2101).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // end date time"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + END_DATETIME_DESC_MA2101 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptorBuilder().withEndDateTime(VALID_END_DATETIME_MA2101).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_MA2101 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_MA2101).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // venue"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VENUE_DESC_MA2101 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptorBuilder().withVenue(VALID_VENUE_MA2101).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // repeat type"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REPEAT_TYPE_DESC_MA2101 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptorBuilder().withRepeatType(VALID_REPEAT_TYPE_MA2101).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // repeat until date time"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REPEAT_UNTIL_DATETIME_DESC_MA2101 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptorBuilder()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withRepeatUntilDateTime(VALID_REPEAT_UNTIL_DATETIME_MA2101).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_SCHOOL + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptorBuilder().withTags(VALID_TAG_SCHOOL).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + DESCRIPTION_DESC_MA2101 + START_DATETIME_DESC_MA2101 + END_DATETIME_DESC_MA2101 + TAG_DESC_PLAY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + DESCRIPTION_DESC_MA2101 + START_DATETIME_DESC_MA3220 + END_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + DESCRIPTION_DESC_MA3220 + TAG_DESC_SCHOOL + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withStartDateTime(VALID_START_DATETIME_MA3220).withEndDateTime(VALID_END_DATETIME_MA3220)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_MA3220).withTags(VALID_TAG_PLAY, VALID_TAG_SCHOOL).build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_EVENT_NAME_DESC + EVENT_NAME_DESC_MA2101"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_MA2101).build();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_EVENT_NAME_DESC + EVENT_NAME_DESC_MA2101"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + DESCRIPTION_DESC_MA2101 + VENUE_DESC_MA2101 + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptorBuilder().withEventName(VALID_EVENT_NAME_MA2101)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_MA2101).withVenue(VALID_VENUE_MA2101).build();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EVENT;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY + VALID_FLAG_ALL;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 3,
      "ChengYuuu": 142,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new FindCommand(new EventNameContainsKeywordsPredicate(Arrays.asList(\"Study\", \"Play\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, \"Study Play\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, \" \\n Study \\n \\t Play  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 9,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \" study study\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d \"Study with me\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_VENUE \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_REPEAT_TYPE \u003d \"daily\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(INDEX_FIRST_EVENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(INDEX_FIRST_EVENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseEventName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventName(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventName(INVALID_EVENT_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseEventName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventName expectedEventName \u003d new EventName(VALID_EVENT_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEventName, ParserUtil.parseEventName(VALID_EVENT_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseEventName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String eventNameWithWhitespace \u003d VALID_EVENT_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventName expectedEventName \u003d new EventName(VALID_EVENT_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEventName, ParserUtil.parseEventName(eventNameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseDateTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(\"z\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseVenue_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVenue((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseVenue_validValueWithoutWhitespace_returnsVenue() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Venue expectedVenue \u003d new Venue(VALID_VENUE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseVenue(VALID_VENUE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseVenue_validValueWithWhitespace_returnsTrimmedVenue() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String venueWithWhitespace \u003d WHITESPACE + VALID_VENUE + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Venue expectedVenue \u003d new Venue(VALID_VENUE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseVenue(venueWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseRepeatType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRepeatType((String) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseRepeatType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseRepeatType(\"z\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseRepeatType_validValueWithoutWhitespace_returnsRepeatType() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        RepeatType expectedRepeatType \u003d RepeatType.DAILY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedRepeatType, ParserUtil.parseRepeatType(VALID_REPEAT_TYPE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void parseRepeatType_validValueWithWhitespace_returnsTrimmedRepeatType() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String repeatTypeWithWhitespace \u003d WHITESPACE + VALID_REPEAT_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        RepeatType expectedRepeatType \u003d RepeatType.DAILY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedRepeatType, ParserUtil.parseRepeatType(repeatTypeWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // [TODO] add more test for various parsing methods"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 83,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/SchedulerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "import seedu.scheduler.logic.commands.GetGoogleCalendarEventsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class SchedulerParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final SchedulerParser parser \u003d new SchedulerParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(EventUtil.getAddCommand(event));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(new AddCommand(event), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(event).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + INDEX_FIRST_EVENT.getOneBased() + \" \" + EventUtil.getEditEventDescriptorDetails(descriptor) + \" -a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EVENT, descriptor), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(new FindCommand(new EventNameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public void parseCommand_getGcEvents() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                GetGoogleCalendarEventsCommand.COMMAND_WORD) instanceof GetGoogleCalendarEventsCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 37,
      "YezhongZ": 4,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 7,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.AD_HOC_WORK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.DISCUSSION_WITH_JACK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.INTERVIEW_WITH_JOHN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.SchedulerBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        modelManager.hasEvent(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void hasEvent_eventNotInScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(modelManager.hasEvent(DISCUSSION_WITH_JACK));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void hasEvent_eventInScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        modelManager.addEvents(List.of(DISCUSSION_WITH_JACK));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(modelManager.hasEvent(DISCUSSION_WITH_JACK));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        modelManager.getFilteredEventList().remove(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler scheduler \u003d new SchedulerBuilder().withEvent(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEvent(INTERVIEW_WITH_JOHN).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler differentScheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        modelManager \u003d new ModelManager(scheduler, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(scheduler, userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different scheduler -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentScheduler, userPrefs)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String[] keywords \u003d AD_HOC_WORK.getEventName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        modelManager.updateFilteredEventList(new EventNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(scheduler, userPrefs)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        modelManager.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        differentUserPrefs.setSchedulerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(scheduler, differentUserPrefs)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 30,
      "YezhongZ": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/SchedulerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.AD_HOC_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.DISCUSSION_WITH_JACK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.INTERVIEW_WITH_JOHN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.SchedulerBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class SchedulerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Scheduler scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final Scheduler schedulerWithDiscussionAndInterview \u003d new SchedulerBuilder().withEvent(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEvent(INTERVIEW_WITH_JOHN).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(Collections.emptyList(), scheduler.getEventList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        scheduler.resetData(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void resetData_withValidReadOnlyScheduler_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler newData \u003d getTypicalScheduler();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        scheduler.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(newData, scheduler);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        scheduler.hasEvent(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void hasEvent_eventNotInScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(scheduler.hasEvent(AD_HOC_WORK));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void hasEvent_eventInScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        scheduler.addEvent(AD_HOC_WORK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(scheduler.hasEvent(AD_HOC_WORK));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void getEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        scheduler.getEventList().remove(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void removeTagNonExistentTagSchedulerUnchanged() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        schedulerWithDiscussionAndInterview.removeTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler expectedScheduler \u003d new SchedulerBuilder().withEvent(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEvent(INTERVIEW_WITH_JOHN).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedScheduler, schedulerWithDiscussionAndInterview);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void removeTagTagUsedByMultipleEventsTagRemoved() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        schedulerWithDiscussionAndInterview.removeTag(new Tag(\"Work\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event discussionWithoutWorkTag \u003d new EventBuilder(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withTags(\"Talk\", \"Personal\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event interviewWithoutWorkTag \u003d new EventBuilder(INTERVIEW_WITH_JOHN).withTags(\"Interview\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler expectedScheduler \u003d new SchedulerBuilder().withEvent(discussionWithoutWorkTag)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEvent(interviewWithoutWorkTag).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedScheduler, schedulerWithDiscussionAndInterview);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * A stub ReadOnlyScheduler whose events list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static class SchedulerStub implements ReadOnlyScheduler {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        SchedulerStub(Collection\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            this.events.setAll(events);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public Event getFirstInstanceOfEvent(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            return events.filtered(predicate).get(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 117
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/VersionedSchedulerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.AD_HOC_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.DISCUSSION_WITH_JACK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.INTERVIEW_WITH_JOHN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.SchedulerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class VersionedSchedulerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final ReadOnlyScheduler schedulerWithDiscussion \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            new SchedulerBuilder().withEvent(DISCUSSION_WITH_JACK).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final ReadOnlyScheduler schedulerWithInterview \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            new SchedulerBuilder().withEvent(INTERVIEW_WITH_JOHN).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final ReadOnlyScheduler schedulerWithAdHocWork \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            new SchedulerBuilder().withEvent(AD_HOC_WORK).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final ReadOnlyScheduler emptyScheduler \u003d new SchedulerBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList(emptyScheduler);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSchedulerListStatus(versionedScheduler,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.singletonList(emptyScheduler),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void commit_multipleSchedulerPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.commit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSchedulerListStatus(versionedScheduler,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Arrays.asList(emptyScheduler, schedulerWithDiscussion, schedulerWithInterview),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                schedulerWithInterview,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void commit_multipleSchedulerPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSchedulerListStatus(versionedScheduler,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.singletonList(emptyScheduler),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void canUndo_multipleSchedulerPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(versionedScheduler.canUndo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void canUndo_multipleSchedulerPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(versionedScheduler.canUndo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void canUndo_singleScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList(emptyScheduler);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.canUndo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void canUndo_multipleSchedulerPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.canUndo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void canRedo_multipleSchedulerPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(versionedScheduler.canRedo());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void canRedo_multipleSchedulerPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(versionedScheduler.canRedo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void canRedo_singleScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList(emptyScheduler);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.canRedo());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void canRedo_multipleSchedulerPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.canRedo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void undo_multipleSchedulerPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.undo();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSchedulerListStatus(versionedScheduler,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.singletonList(emptyScheduler),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                schedulerWithDiscussion,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.singletonList(schedulerWithInterview));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void undo_multipleSchedulerPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSchedulerListStatus(versionedScheduler,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Arrays.asList(schedulerWithDiscussion, schedulerWithInterview));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void undo_singleScheduler_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList(emptyScheduler);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertThrows(VersionedScheduler.NoUndoableStateException.class, versionedScheduler::undo);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void undo_multipleSchedulerPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertThrows(VersionedScheduler.NoUndoableStateException.class, versionedScheduler::undo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void redo_multipleSchedulerPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.redo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSchedulerListStatus(versionedScheduler,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Arrays.asList(emptyScheduler, schedulerWithDiscussion),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                schedulerWithInterview,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void redo_multipleSchedulerPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        versionedScheduler.redo();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSchedulerListStatus(versionedScheduler,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.singletonList(emptyScheduler),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                schedulerWithDiscussion,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Collections.singletonList(schedulerWithInterview));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void redo_singleScheduler_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList(emptyScheduler);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertThrows(VersionedScheduler.NoRedoableStateException.class, versionedScheduler::redo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void redo_multipleSchedulerPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                emptyScheduler, schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertThrows(VersionedScheduler.NoRedoableStateException.class, versionedScheduler::redo);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                prepareSchedulerList(schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler copy \u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                prepareSchedulerList(schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(versionedScheduler.equals(copy));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(versionedScheduler.equals(versionedScheduler));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.equals(null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.equals(1));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler differentSchedulerList \u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                prepareSchedulerList(schedulerWithDiscussion, schedulerWithAdHocWork);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.equals(differentSchedulerList));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler differentCurrentStatePointer \u003d prepareSchedulerList("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                schedulerWithDiscussion, schedulerWithInterview);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedScheduler, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Asserts that {@code versionedScheduler} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * states before {@code versionedScheduler#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * and states after {@code versionedScheduler#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void assertSchedulerListStatus(VersionedScheduler versionedScheduler,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                           List\u003cReadOnlyScheduler\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                           ReadOnlyScheduler expectedCurrentState,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                                           List\u003cReadOnlyScheduler\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(new Scheduler(versionedScheduler), expectedCurrentState);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        while (versionedScheduler.canUndo()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            versionedScheduler.undo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (ReadOnlyScheduler expectedScheduler : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            assertEquals(expectedScheduler, new Scheduler(versionedScheduler));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            versionedScheduler.redo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (ReadOnlyScheduler expectedScheduler : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            versionedScheduler.redo();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            assertEquals(expectedScheduler, new Scheduler(versionedScheduler));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(versionedScheduler.canRedo());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedScheduler.undo());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Creates and returns a {@code VersionedScheduler} with the {@code schedulerStates} added into it, and the"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code VersionedScheduler#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private VersionedScheduler prepareSchedulerList(ReadOnlyScheduler... schedulerStates) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(schedulerStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        VersionedScheduler versionedScheduler \u003d new VersionedScheduler(schedulerStates[0]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (int i \u003d 1; i \u003c schedulerStates.length; i++) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            versionedScheduler.resetData(schedulerStates[i]);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            versionedScheduler.commit();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return versionedScheduler;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Shifts the {@code VersionedScheduler#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedScheduler versionedScheduler, int count) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            versionedScheduler.undo();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 305
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/event/DateTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 13
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/event/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 13
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/event/EventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.DISCUSSION_WITH_JACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.INTERVIEW_WITH_JOHN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private final EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.contains(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(eventList.contains(DISCUSSION_WITH_JACK));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.add(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(eventList.contains(DISCUSSION_WITH_JACK));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.add(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvent_nullTargetEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvent(null, DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvent_nullEditedEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvent(DISCUSSION_WITH_JACK, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvent(DISCUSSION_WITH_JACK, DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvent_editedEventIsSameEvent_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.add(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvent(DISCUSSION_WITH_JACK, DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventList expectedEventList \u003d new EventList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedEventList.add(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEventList, eventList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvent_editedEventHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.add(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvent(DISCUSSION_WITH_JACK, INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventList expectedEventList \u003d new EventList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedEventList.add(INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEventList, eventList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.remove(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void remove_eventDoesNotExist_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.remove(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void remove_existingEvent_removesEvent() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.add(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.remove(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventList expectedEventList \u003d new EventList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEventList, eventList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvents_nullEventList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvents((EventList) null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvents_eventList_replacesOwnListWithProvidedEventList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.add(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventList expectedEventList \u003d new EventList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedEventList.add(INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvents(expectedEventList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEventList, eventList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvents((List\u003cEvent\u003e) null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.add(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e otherEventList \u003d Collections.singletonList(INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.setEvents(otherEventList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventList expectedEventList \u003d new EventList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedEventList.add(INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEventList, eventList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 139
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/event/EventNameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventNameContainsKeywordsPredicate(Collections.singletonList(\"Play\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withEventName(\"Play Work\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Play\", \"Work\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withEventName(\"Play Work\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Play\", \"Work\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withEventName(\"Play Study\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"plAy\", \"stUDy\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withEventName(\"Play Study\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventNameContainsKeywordsPredicate predicate \u003d new EventNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().withEventName(\"Play\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Study\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().withEventName(\"Play Work\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // Keywords match description and venue, but does not match event name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Again\", \"School\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().withEventName(\"Study\").withDescription(\"Again\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withVenue(\"School\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 79
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/event/EventNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void constructor_invalidEventName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String invalidEventName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidEventName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void isValidEventName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // null scheduler"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventName.isValidEventName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(EventName.isValidEventName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(EventName.isValidEventName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"CS2103 Lecture\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"223\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 37
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/event/EventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MA2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_END_DATETIME_MA2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MA2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_EVENT_UUID_MA2101;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_TYPE_MA2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_UNTIL_DATETIME_MA2101;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_START_DATETIME_MA2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_VENUE_MA2101;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.DISCUSSION_WITH_JACK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.INTERVIEW_WITH_JOHN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void unmodifiableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        event.getTags().remove(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void isValidEventDateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime startDateTime \u003d new DateTime(LocalDateTime.of(2018, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime firstValidEndDateTime \u003d new DateTime(LocalDateTime.of(2018, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime secondValidEndDateTime \u003d new DateTime(LocalDateTime.of(2018, 1, 1, 1, 2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        DateTime invalidEndDateTime \u003d new DateTime(LocalDateTime.of(2018, 1, 1, 1, 0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(Event.isValidEventDateTime(startDateTime, firstValidEndDateTime));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(Event.isValidEventDateTime(startDateTime, secondValidEndDateTime));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(Event.isValidEventDateTime(startDateTime, invalidEndDateTime));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(DISCUSSION_WITH_JACK.isSameEvent(DISCUSSION_WITH_JACK));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DISCUSSION_WITH_JACK.isSameEvent(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different uuid -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedDiscussionWithJackeEvent \u003d new EventBuilder(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .withEventSetUid(UUID.randomUUID()).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(DISCUSSION_WITH_JACK.isSameEvent(editedDiscussionWithJackeEvent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event discussionWithJackSingleCopy \u003d new EventBuilder(DISCUSSION_WITH_JACK).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(DISCUSSION_WITH_JACK, discussionWithJackSingleCopy);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(DISCUSSION_WITH_JACK, DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(null, DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(5, DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different uuid -\u003e return false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event editedDiscussionWithJackEvent \u003d new EventBuilder(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .withEventSetUid(VALID_EVENT_UUID_MA2101).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, editedDiscussionWithJackEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different eventName -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedDiscussionWithJackEvent \u003d new EventBuilder(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_MA2101).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, editedDiscussionWithJackEvent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different startDateTime -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedDiscussionWithJackEvent \u003d new EventBuilder(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withStartDateTime(VALID_START_DATETIME_MA2101).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, editedDiscussionWithJackEvent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different endDateTime -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedDiscussionWithJackEvent \u003d new EventBuilder(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEndDateTime(VALID_END_DATETIME_MA2101).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, editedDiscussionWithJackEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedDiscussionWithJackEvent \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventBuilder(DISCUSSION_WITH_JACK).withDescription(VALID_DESCRIPTION_MA2101).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, editedDiscussionWithJackEvent);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedDiscussionWithJackEvent \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventBuilder(DISCUSSION_WITH_JACK).withVenue(VALID_VENUE_MA2101).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, editedDiscussionWithJackEvent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different repeat type -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedDiscussionWithJackEvent \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                new EventBuilder(DISCUSSION_WITH_JACK).withRepeatType(VALID_REPEAT_TYPE_MA2101).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, editedDiscussionWithJackEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different repeatUntilDateTime -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        editedDiscussionWithJackEvent \u003d new EventBuilder(DISCUSSION_WITH_JACK)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withEndDateTime(VALID_REPEAT_UNTIL_DATETIME_MA2101).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(DISCUSSION_WITH_JACK, editedDiscussionWithJackEvent);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 119,
      "YezhongZ": 2
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/event/RepeatEventGeneratorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.JIM_BIRTHDAY_YEARLY_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.JIM_BIRTHDAY_YEAR_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.LEAP_DAY_CELEBRATION_YEARLY_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.LEAP_DAY_CELEBRATION_YEAR_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STARTUP_LECTURE_MONTHLY_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STARTUP_LECTURE_MONTH_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JANE_DAILY_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JANE_DAY_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.RepeatEventGenerator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class RepeatEventGeneratorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private RepeatEventGenerator repeatEventGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        initialiseRepeatEventGenerator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void generateAllRepeatedEvents() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // daily event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(STUDY_WITH_JANE_DAILY_LIST,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                repeatEventGenerator.generateAllRepeatedEvents(STUDY_WITH_JANE_DAY_ONE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // monthly event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(STARTUP_LECTURE_MONTHLY_LIST,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                repeatEventGenerator.generateAllRepeatedEvents(STARTUP_LECTURE_MONTH_ONE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // yearly event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(LEAP_DAY_CELEBRATION_YEARLY_LIST,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                repeatEventGenerator.generateAllRepeatedEvents(LEAP_DAY_CELEBRATION_YEAR_ONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(JIM_BIRTHDAY_YEARLY_LIST,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                repeatEventGenerator.generateAllRepeatedEvents(JIM_BIRTHDAY_YEAR_ONE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void generateDailyRepeatEvents() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // standard day of a year"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(STUDY_WITH_JANE_DAILY_LIST,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                repeatEventGenerator.generateDailyRepeatEvents(STUDY_WITH_JANE_DAY_ONE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void generateMonthlyRepeatEvents() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(STARTUP_LECTURE_MONTHLY_LIST,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                repeatEventGenerator.generateMonthlyRepeatEvents(STARTUP_LECTURE_MONTH_ONE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void generateYearlyRepeatEvents() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // standard day of year"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(JIM_BIRTHDAY_YEARLY_LIST,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                repeatEventGenerator.generateYearlyRepeatEvents(JIM_BIRTHDAY_YEAR_ONE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // day of leap year"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(LEAP_DAY_CELEBRATION_YEARLY_LIST,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                repeatEventGenerator.generateYearlyRepeatEvents(LEAP_DAY_CELEBRATION_YEAR_ONE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Initialise RepeatEventGenerator if the instance is not yet created."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void initialiseRepeatEventGenerator() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        repeatEventGenerator \u003d RepeatEventGenerator.getInstance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 72
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/event/VenueTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class VenueTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 13
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        userPrefs.setSchedulerFilePath(Paths.get(\"scheduler.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlSchedulerStorage schedulerStorage \u003d new XmlSchedulerStorage(getTempFilePath(\"scheduler\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        storageManager \u003d new StorageManager(schedulerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void schedulerReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         * {@link XmlSchedulerStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlSchedulerStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler original \u003d getTypicalScheduler();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        storageManager.saveScheduler(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ReadOnlyScheduler retrieved \u003d storageManager.readScheduler().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(original, new Scheduler(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void getSchedulerFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotNull(storageManager.getSchedulerFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void handleSchedulerChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlSchedulerStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        storage.handleSchedulerChangedEvent(new SchedulerChangedEvent(new Scheduler()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    class XmlSchedulerStorageExceptionThrowingStub extends XmlSchedulerStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public XmlSchedulerStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        public void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 25,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/XmlAdaptedEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.storage.XmlAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.DISCUSSION_WITH_JACK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class XmlAdaptedEventTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \" study \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final UUID VALID_EVENTUID \u003d DISCUSSION_WITH_JACK.getEventUid();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final UUID VALID_EVENTSETUID \u003d DISCUSSION_WITH_JACK.getEventSetUid();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d DISCUSSION_WITH_JACK.getEventName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final DateTime VALID_START_DATETIME \u003d DISCUSSION_WITH_JACK.getStartDateTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final DateTime VALID_END_DATETIME \u003d DISCUSSION_WITH_JACK.getEndDateTime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d DISCUSSION_WITH_JACK.getDescription().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final String VALID_VENUE \u003d DISCUSSION_WITH_JACK.getVenue().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final RepeatType VALID_REPEAT_TYPE \u003d DISCUSSION_WITH_JACK.getRepeatType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final DateTime VALID_REPEAT_UNTIL_DATETIME \u003d DISCUSSION_WITH_JACK.getRepeatUntilDateTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d DISCUSSION_WITH_JACK.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            .map(XmlAdaptedTag::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final ReminderDurationList VALID_REMINDER_DURATION_LIST \u003d DISCUSSION_WITH_JACK"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            .getReminderDurationList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_validEventDetails_returnsEvent() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(DISCUSSION_WITH_JACK, event.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public void toModelType_nullUid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(null, VALID_EVENTSETUID, VALID_EVENT_NAME, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_nullUuid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, null, VALID_EVENT_NAME, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_invalidEventName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                INVALID_EVENT_NAME, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d EventName.MESSAGE_EVENT_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_nullEventName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID, null, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_nullStartDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID, VALID_EVENT_NAME, null,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_nullEndDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID, VALID_EVENT_NAME,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_START_DATETIME, null, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                VALID_EVENT_NAME, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                VALID_END_DATETIME, null, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_nullVenue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                VALID_EVENT_NAME, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, null, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_nullRepeatType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                VALID_EVENT_NAME, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, null,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                VALID_REPEAT_UNTIL_DATETIME, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_nullRepeatUntilDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                VALID_EVENT_NAME, VALID_START_DATETIME,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                VALID_END_DATETIME, VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                null, VALID_TAGS, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENTUID, VALID_EVENTSETUID, VALID_EVENT_NAME,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                        VALID_START_DATETIME, VALID_END_DATETIME,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        VALID_DESCRIPTION, VALID_VENUE, VALID_REPEAT_TYPE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                        VALID_REPEAT_UNTIL_DATETIME, invalidTags, VALID_REMINDER_DURATION_LIST);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 24,
      "ChengYuuu": 99,
      "YezhongZ": 19
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/XmlSchedulerStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.DISCUSSION_WITH_JACK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JANE_DAILY_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STUDY_WITH_JANE_DAY_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class XmlSchedulerStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSchedulerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void readScheduler_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        readScheduler(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private java.util.Optional\u003cReadOnlyScheduler\u003e readScheduler(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new XmlSchedulerStorage(Paths.get(filePath)).readScheduler(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(readScheduler(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        readScheduler(\"NotXmlFormatScheduler.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void readScheduler_invalidEventScheduler_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        readScheduler(\"invalidEventScheduler.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void readScheduler_invalidAndValidEventScheduler_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        readScheduler(\"invalidAndValidEventScheduler.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void readAndSaveScheduler_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempScheduler.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler original \u003d getTypicalScheduler();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlSchedulerStorage xmlSchedulerStorage \u003d new XmlSchedulerStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        xmlSchedulerStorage.saveScheduler(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ReadOnlyScheduler readBack \u003d xmlSchedulerStorage.readScheduler(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(original, new Scheduler(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        original.addEvents(STUDY_WITH_JANE_DAILY_LIST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        original.removeEvent(STUDY_WITH_JANE_DAY_ONE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        xmlSchedulerStorage.saveScheduler(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        readBack \u003d xmlSchedulerStorage.readScheduler(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(original, new Scheduler(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        original.addEvent(DISCUSSION_WITH_JACK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        xmlSchedulerStorage.saveScheduler(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        readBack \u003d xmlSchedulerStorage.readScheduler().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(original, new Scheduler(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void saveScheduler_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        saveScheduler(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Saves {@code scheduler} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void saveScheduler(ReadOnlyScheduler scheduler, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            new XmlSchedulerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                    .saveScheduler(scheduler, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void saveScheduler_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        saveScheduler(new Scheduler(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 127
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/XmlSerializableSchedulerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.TypicalEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class XmlSerializableSchedulerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableSchedulerTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsScheduler.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventScheduler.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_typicalEventsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlSerializableScheduler dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_EVENTS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler schedulerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler typicalEventsScheduler \u003d TypicalEvents.getTypicalScheduler();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(schedulerFromFile, typicalEventsScheduler);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlSerializableScheduler dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 43
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/EditEventDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A utility class to help with building EditEventDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EditEventDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private EditEventDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder(EditEventDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.descriptor \u003d new EditEventDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns an {@code EditEventDescriptor} with fields containing {@code event}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder(Event event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setEventName(event.getEventName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setStartDateTime(event.getStartDateTime());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setEndDateTime(event.getEndDateTime());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setDescription(event.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setVenue(event.getVenue());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setRepeatType(event.getRepeatType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setRepeatUntilDateTime(event.getRepeatUntilDateTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setTags(event.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        descriptor.setReminderDurationList(event.getReminderDurationList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code EventName} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder withEventName(String eventName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setEventName(new EventName(eventName));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code StartDateTime} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder withStartDateTime(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setStartDateTime(new DateTime(startDateTime));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code EndDateTime} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder withEndDateTime(LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setEndDateTime(new DateTime(endDateTime));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code Description} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code Venue} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setVenue(new Venue(venue));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code RepeatType} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder withRepeatType(RepeatType repeatType) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setRepeatType(repeatType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code RepeatUntilDateTime} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder withRepeatUntilDateTime(LocalDateTime repeatUntilDateTime) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setRepeatUntilDateTime(new DateTime(repeatUntilDateTime));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Sets the {@code ReminderDurationList} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public EditEventDescriptorBuilder withReminderDurationList(ReminderDurationList reminderDurationList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        descriptor.setReminderDurationList(reminderDurationList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditEventDescriptor}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EditEventDescriptor build() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 11,
      "ChengYuuu": 116
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import seedu.scheduler.model.event.ReminderDurationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.util.SampleSchedulerDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final UUID DEFAULT_EVENTUID \u003d UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a621\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final UUID DEFAULT_EVENTSETUID \u003d UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a632\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String DEFAULT_EVENT_NAME \u003d \"CS2103 Lecture\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final LocalDateTime DEFAULT_START_DATE_TIME \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            LocalDateTime.of(2018, 9, 21, 16, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final LocalDateTime DEFAULT_END_DATE_TIME \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            LocalDateTime.of(2018, 9, 21, 18, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"My CS2103 Lecture\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String DEFAULT_VENUE \u003d \"iCube\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final RepeatType DEFAULT_REPEAT_TYPE \u003d RepeatType.NONE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final LocalDateTime DEFAULT_REPEAT_UNTIL_DATE_TIME \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            LocalDateTime.of(2018, 9, 21, 18, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private UUID eventUid;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private UUID eventSetUid;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private DateTime startDateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private DateTime endDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private RepeatType repeatType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private DateTime repeatUntilDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    private ReminderDurationList reminderDurationList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        eventUid \u003d DEFAULT_EVENTUID;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        eventSetUid \u003d DEFAULT_EVENTSETUID;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_EVENT_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        startDateTime \u003d new DateTime(DEFAULT_START_DATE_TIME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        endDateTime \u003d new DateTime(DEFAULT_END_DATE_TIME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        venue \u003d new Venue(DEFAULT_VENUE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        repeatType \u003d DEFAULT_REPEAT_TYPE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        repeatUntilDateTime \u003d new DateTime(DEFAULT_REPEAT_UNTIL_DATE_TIME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        reminderDurationList \u003d new ReminderDurationList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        eventUid \u003d eventToCopy.getEventUid();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        eventSetUid \u003d eventToCopy.getEventSetUid();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventName \u003d eventToCopy.getEventName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        startDateTime \u003d eventToCopy.getStartDateTime();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        endDateTime \u003d eventToCopy.getEndDateTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        venue \u003d eventToCopy.getVenue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        repeatType \u003d eventToCopy.getRepeatType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        repeatUntilDateTime \u003d eventToCopy.getRepeatUntilDateTime();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        reminderDurationList \u003d eventToCopy.getReminderDurationList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Sets the {@code eventUid} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public EventBuilder withEventUid(UUID uid) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.eventUid \u003d uid;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "     * Sets the {@code eventSetUid} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public EventBuilder withEventSetUid(UUID uuid) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        this.eventSetUid \u003d uuid;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code EventName} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder withEventName(String eventName) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.eventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code startDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder withStartDateTime(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.startDateTime \u003d new DateTime(startDateTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code endDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder withEndDateTime(LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.endDateTime \u003d new DateTime(endDateTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code Venue} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.venue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code RepeatType} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder withRepeatType(RepeatType repeatType) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.repeatType \u003d repeatType;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Sets the {@code repeatUntilDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder withRepeatUntilDateTime(LocalDateTime repeatUntilDateTime) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.repeatUntilDateTime \u003d new DateTime(repeatUntilDateTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.tags \u003d SampleSchedulerDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * Parses the {@code reminderDurationList} into a {@code ReminderDurationList}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     * and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    public EventBuilder withReminderDurationList(ReminderDurationList reminderDurationList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        this.reminderDurationList \u003d reminderDurationList;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Initialise a new {@code Event} instance"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        return new Event(eventUid, eventSetUid, eventName, startDateTime, endDateTime, description,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                venue, repeatType, repeatUntilDateTime, tags, reminderDurationList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 19,
      "ChengYuuu": 141,
      "YezhongZ": 15
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/EventUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_REPEAT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_REPEAT_UNTIL_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A utility class for Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns an add command string for adding the {@code event}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static String getAddCommand(Event event) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getEventDetails(event);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the part of command string for the given {@code event}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static String getEventDetails(Event event) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        sb.append(PREFIX_EVENT_NAME + event.getEventName().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        sb.append(PREFIX_START_DATE_TIME + event.getStartDateTime().getPrettyString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        sb.append(PREFIX_END_DATE_TIME + event.getEndDateTime().getPrettyString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + event.getDescription().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        sb.append(PREFIX_VENUE + event.getVenue().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        sb.append(PREFIX_REPEAT_TYPE + event.getRepeatType().name() + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        sb.append(PREFIX_REPEAT_UNTIL_DATE_TIME + event.getRepeatUntilDateTime().getPrettyString() + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        sb.append(event.getReminderDurationList().getPrettyString() + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        event.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the part of command string for the given {@code EditEventDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static String getEditEventDescriptorDetails(EditEventDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.getEventName().ifPresent(eventName -\u003e sb.append(PREFIX_EVENT_NAME)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(eventName.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.getStartDateTime().ifPresent(startDateTime -\u003e sb.append(PREFIX_START_DATE_TIME)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(startDateTime.getPrettyString()).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.getEndDateTime().ifPresent(endDateTime -\u003e sb.append(PREFIX_END_DATE_TIME)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(endDateTime.getPrettyString()).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.getVenue().ifPresent(venue -\u003e sb.append(PREFIX_VENUE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(venue.value).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.getRepeatType().ifPresent(repeatType -\u003e sb.append(PREFIX_REPEAT_TYPE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(repeatType.name()).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        descriptor.getRepeatUntilDateTime().ifPresent(repeatUntilDateTime -\u003e sb.append(PREFIX_REPEAT_UNTIL_DATE_TIME)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .append(repeatUntilDateTime.getPrettyString()).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        sb.append(descriptor.getReminderDurationList().get().getPrettyString()).append(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        /*System.out.println(descriptor.getReminderDurationList().get().get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        descriptor.getReminderDurationList().ifPresent(reminderDurationList -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                sb.append(reminderDurationList.getPrettyString()).append(\" \"));*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 5,
      "ChengYuuu": 78
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SchedulerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A utility class to help with building Scheduler objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * {@code Scheduler scheduler \u003d new SchedulerBuilder().withEvent(JANUARY_1_2018_SINGLE).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class SchedulerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Scheduler scheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public SchedulerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public SchedulerBuilder(Scheduler scheduler) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        this.scheduler \u003d scheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public SchedulerBuilder withEvent(Event event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        scheduler.addEvent(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public Scheduler build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return scheduler;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the middle index of the event in the {@code model}\u0027s event list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEventList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the last index of the event in the {@code model}\u0027s event list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns the event in the {@code model}\u0027s event list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static Event getEvent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return model.getFilteredEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MA2101;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MA3220;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_END_DATETIME_MA2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_END_DATETIME_MA3220;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MA2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MA3220;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_TYPE_MA2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_TYPE_MA3220;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_UNTIL_DATETIME_MA2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_REPEAT_UNTIL_DATETIME_MA3220;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_START_DATETIME_MA2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_START_DATETIME_MA3220;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_PLAY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_SCHOOL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_VENUE_MA2101;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_VENUE_MA3220;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.model.util.SampleSchedulerDataUtil.getReminderDurationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.RepeatType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final String KEYWORD_MATCHING_STARTUP \u003d \"Startup\"; // A keyword that matches Study"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final ArrayList\u003cUUID\u003e CONSTANT_EVENTUID \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a621\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a622\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a623\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a624\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a625\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a626\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a627\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a628\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a629\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a630\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a631\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    private static final ArrayList\u003cUUID\u003e CONSTANT_EVENTSETUID \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a632\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a633\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a634\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a635\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a636\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a637\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a638\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a639\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a640\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a641\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            UUID.fromString(\"066db0fd-0bd2-423f-aef4-fd1f8d30a642\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // single event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event DISCUSSION_WITH_JACK \u003d new EventBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(0))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(0))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Discussion with Jack\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 1, 14, 0))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 1, 17, 0))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Talk about personal problems\").withVenue(\"Jack\u0027s House\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.NONE).withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 1, 17, 0))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Talk\", \"Personal\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0, 2)).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event INTERVIEW_WITH_JOHN \u003d new EventBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(1))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(1))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Interview with John\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 2, 13, 0))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 2, 15, 0))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Interview for position as a software engineer\").withVenue(\"Jane Street\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.NONE).withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 2, 15, 0))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Interview\", \"Work\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(1)).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // daily event"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STUDY_WITH_JANE_DAY_ONE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(2))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(2))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Study with Jane\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 3, 10, 0))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 3, 11, 0))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Study for MA2101\").withVenue(\"NUS\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.DAILY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 6, 11, 0))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Study\", \"School\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0, 1, 3))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STUDY_WITH_JANE_DAY_TWO \u003d new EventBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(2))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(2))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Study with Jane\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 4, 10, 0))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 4, 11, 0))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Study for MA2101\").withVenue(\"NUS\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.DAILY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 6, 11, 0))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Study\", \"School\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0, 1, 3))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STUDY_WITH_JANE_DAY_THREE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(2))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(2))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Study with Jane\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 5, 10, 0))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 5, 11, 0))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Study for MA2101\").withVenue(\"NUS\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.DAILY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 6, 11, 0))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Study\", \"School\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0, 1, 3))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STUDY_WITH_JANE_DAY_FOUR \u003d new EventBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(2))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(2))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Study with Jane\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 6, 10, 0))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 6, 11, 0))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Study for MA2101\").withVenue(\"NUS\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.DAILY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 6, 11, 0))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Study\", \"School\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0, 1, 3))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STUDY_WITH_JILL_DAY_ONE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(3))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(3))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Study with Jill\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 3, 11, 0))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 3, 12, 0))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Study for CS2103\").withVenue(\"NUS\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.DAILY)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 6, 12, 0))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Study\", \"School\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STUDY_WITH_JILL_DAY_TWO \u003d new EventBuilder()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(3))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(3))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Study with Jill\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 4, 11, 0))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 4, 12, 0))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Study for CS2103\").withVenue(\"NUS\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.DAILY)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 6, 12, 0))"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Study\", \"School\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STUDY_WITH_JILL_DAY_THREE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(3))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(3))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Study with Jill\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 5, 11, 0))"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 5, 12, 0))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Study for CS2103\").withVenue(\"NUS\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.DAILY)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 6, 12, 0))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Study\", \"School\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STUDY_WITH_JILL_DAY_FOUR \u003d new EventBuilder()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(3))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(3))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Study with Jill\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 6, 11, 0))"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 6, 12, 0))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Study for CS2103\").withVenue(\"NUS\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.DAILY)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 1, 6, 12, 0))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Study\", \"School\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // monthly event"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STARTUP_LECTURE_MONTH_ONE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(4))"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(4))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Startup Lecture\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 1, 28, 8, 0))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 1, 28, 10, 0))"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Lecture about entrepreneurship\").withVenue(\"iCube\")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.MONTHLY)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 3, 28, 10, 0))"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Timetable\", \"Study\", \"School\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0, 1, 2, 3))"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STARTUP_LECTURE_MONTH_TWO \u003d new EventBuilder()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(4))"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(4))"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Startup Lecture\")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 2, 28, 8, 0))"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 2, 28, 10, 0))"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Lecture about entrepreneurship\").withVenue(\"iCube\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.MONTHLY)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 3, 28, 10, 0))"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Timetable\", \"Study\", \"School\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0, 1, 2, 3))"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event STARTUP_LECTURE_MONTH_THREE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(4))"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(4))"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Startup Lecture\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 3, 28, 8, 0))"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 3, 28, 10, 0))"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Lecture about entrepreneurship\").withVenue(\"iCube\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.MONTHLY)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2018, 3, 28, 10, 0))"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Timetable\", \"Study\", \"School\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0, 1, 2, 3))"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // yearly event"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event LEAP_DAY_CELEBRATION_YEAR_ONE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(5))"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(5))"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Leap Day Celebration\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2016, 2, 29, 0, 0))"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2016, 2, 29, 1, 0))"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Celebrate a day that happens one in 4 years\").withVenue(\"Marina Bay Sands\")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.YEARLY)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2020, 2, 29, 1, 0))"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Celebration\")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(0))"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event LEAP_DAY_CELEBRATION_YEAR_TWO \u003d new EventBuilder()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(5))"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(5))"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Leap Day Celebration\")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2020, 2, 29, 0, 0))"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2020, 2, 29, 1, 0))"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Celebrate a day that happens one in 4 years\").withVenue(\"Marina Bay Sands\")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.YEARLY)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2020, 2, 29, 1, 0))"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Celebration\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(1, 2))"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event JIM_BIRTHDAY_YEAR_ONE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(6))"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(6))"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Jim\u0027s Birthday\")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2018, 12, 31, 0, 0))"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 12, 31, 1, 0))"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Celebrate Jim\u0027s Birthday\").withVenue(\"Jim\u0027s House\")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.YEARLY)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2020, 12, 31, 1, 0))"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Celebration\")"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(1, 2))"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event JIM_BIRTHDAY_YEAR_TWO \u003d new EventBuilder()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(6))"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(6))"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Jim\u0027s Birthday\")"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2019, 12, 31, 0, 0))"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2019, 12, 31, 1, 0))"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Celebrate Jim\u0027s Birthday\").withVenue(\"Jim\u0027s House\")"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.YEARLY)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2020, 12, 31, 1, 0))"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Celebration\")"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(1, 2))"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Event JIM_BIRTHDAY_YEAR_THREE \u003d new EventBuilder()"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventUid(CONSTANT_EVENTUID.get(6))"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(6))"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Jim\u0027s Birthday\")"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withStartDateTime(LocalDateTime.of(2020, 12, 31, 0, 0))"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2020, 12, 31, 1, 0))"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Celebrate Jim\u0027s Birthday\").withVenue(\"Jim\u0027s House\")"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.YEARLY)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatUntilDateTime(LocalDateTime.of(2020, 12, 31, 1, 0))"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Celebration\")"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(1, 2))"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // daily list"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final List\u003cEvent\u003e STUDY_WITH_JANE_DAILY_LIST \u003d List.of(STUDY_WITH_JANE_DAY_ONE,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            STUDY_WITH_JANE_DAY_TWO, STUDY_WITH_JANE_DAY_THREE, STUDY_WITH_JANE_DAY_FOUR);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final List\u003cEvent\u003e STUDY_WITH_JILL_DAILY_LIST \u003d List.of(STUDY_WITH_JILL_DAY_ONE,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            STUDY_WITH_JILL_DAY_TWO, STUDY_WITH_JILL_DAY_THREE, STUDY_WITH_JILL_DAY_FOUR);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // monthly list"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final List\u003cEvent\u003e STARTUP_LECTURE_MONTHLY_LIST \u003d List.of(STARTUP_LECTURE_MONTH_ONE,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            STARTUP_LECTURE_MONTH_TWO, STARTUP_LECTURE_MONTH_THREE);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // yearly list"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final List\u003cEvent\u003e LEAP_DAY_CELEBRATION_YEARLY_LIST \u003d List.of(LEAP_DAY_CELEBRATION_YEAR_ONE,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            LEAP_DAY_CELEBRATION_YEAR_TWO);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final List\u003cEvent\u003e JIM_BIRTHDAY_YEARLY_LIST \u003d List.of(JIM_BIRTHDAY_YEAR_ONE,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            JIM_BIRTHDAY_YEAR_TWO, JIM_BIRTHDAY_YEAR_THREE);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final Event AD_HOC_WORK \u003d new EventBuilder().withEventUid(CONSTANT_EVENTUID.get(7))"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(7))"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"Ad hoc work\").withStartDateTime(LocalDateTime.of(2018, 12, 12, 0, 0))"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 12, 12, 1, 0))"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"Ad hoc part time work\").withVenue(\"Starbucks\")"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.NONE).withRepeatUntilDateTime(LocalDateTime.of(2018, 12, 12, 1, 0))"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Work\").withReminderDurationList(getReminderDurationList(3)).build();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final Event ONE_TIME_JOB \u003d new EventBuilder().withEventUid(CONSTANT_EVENTUID.get(7))"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(8))"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(\"One time job\").withStartDateTime(LocalDateTime.of(2018, 6, 1, 0, 0))"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(LocalDateTime.of(2018, 6, 1, 1, 0))"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withDescription(\"One time job and get paid\").withVenue(\"McDonald\u0027s\")"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withRepeatType(RepeatType.NONE).withRepeatUntilDateTime(LocalDateTime.of(2018, 6, 1, 1, 0))"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withTags(\"Work\").withReminderDurationList(getReminderDurationList(3)).build();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final Event MA2101_JANUARY_1_2018_YEARLY \u003d new EventBuilder().withEventUid(CONSTANT_EVENTUID.get(9))"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(9))"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(VALID_EVENT_NAME_MA2101).withStartDateTime(VALID_START_DATETIME_MA2101)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(VALID_END_DATETIME_MA2101).withDescription(VALID_DESCRIPTION_MA2101)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withVenue(VALID_VENUE_MA2101).withRepeatType(VALID_REPEAT_TYPE_MA2101)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            .withRepeatUntilDateTime(VALID_REPEAT_UNTIL_DATETIME_MA2101).withTags(VALID_TAG_SCHOOL)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(3)).build();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "    public static final Event MA3220_JANUARY_1_2019_SINGLE \u003d new EventBuilder().withEventUid(CONSTANT_EVENTUID.get(10))"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            .withEventSetUid(CONSTANT_EVENTSETUID.get(10))"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEventName(VALID_EVENT_NAME_MA3220).withStartDateTime(VALID_START_DATETIME_MA3220)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withEndDateTime(VALID_END_DATETIME_MA3220).withDescription(VALID_DESCRIPTION_MA3220)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            .withVenue(VALID_VENUE_MA3220).withRepeatType(VALID_REPEAT_TYPE_MA3220)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            .withRepeatUntilDateTime(VALID_REPEAT_UNTIL_DATETIME_MA3220).withTags(VALID_TAG_PLAY)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "            .withReminderDurationList(getReminderDurationList(3)).build();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns an {@code Scheduler} with all the typical events."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static Scheduler getTypicalScheduler() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Scheduler scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            scheduler.addEvent(event);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return scheduler;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCUSSION_WITH_JACK, INTERVIEW_WITH_JOHN, STUDY_WITH_JANE_DAY_ONE,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                STUDY_WITH_JANE_DAY_TWO, STUDY_WITH_JANE_DAY_THREE, STUDY_WITH_JANE_DAY_FOUR,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                STUDY_WITH_JILL_DAY_ONE, STUDY_WITH_JILL_DAY_TWO, STUDY_WITH_JILL_DAY_THREE,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                STUDY_WITH_JILL_DAY_FOUR, JIM_BIRTHDAY_YEAR_ONE, JIM_BIRTHDAY_YEAR_TWO,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                JIM_BIRTHDAY_YEAR_THREE, LEAP_DAY_CELEBRATION_YEAR_ONE, LEAP_DAY_CELEBRATION_YEAR_TWO,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                STARTUP_LECTURE_MONTH_ONE, STARTUP_LECTURE_MONTH_TWO, STARTUP_LECTURE_MONTH_THREE));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 5,
      "ChengYuuu": 301,
      "YezhongZ": 46
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static final Index INDEX_THIRD_EVENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.MA2101_JANUARY_1_2018_YEARLY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.EventPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private EventPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        selectionChangedEventStub \u003d new EventPanelSelectionChangedEvent(MA2101_JANUARY_1_2018_YEARLY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // associated web page of a event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        URL expectedEventUrl \u003d new URL(BrowserPanel.CALENDER_PAGE_URL"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + MA2101_JANUARY_1_2018_YEARLY.getEventName().value.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEventUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 2,
      "ChengYuuu": 8,
      "YezhongZ": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 6,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/EventCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.testutil.GuiTestAssert.assertCardDisplaysEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import guitests.guihandles.EventCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventWithNoTags \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventCard eventCard \u003d new EventCard(eventWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        uiPartRule.setUiPart(eventCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCardDisplay(eventCard, eventWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventWithTags \u003d new EventBuilder().withTags(\"timetable\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventCard \u003d new EventCard(eventWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        uiPartRule.setUiPart(eventCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCardDisplay(eventCard, eventWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventCard eventCard \u003d new EventCard(event, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventCard copy \u003d new EventCard(event, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(eventCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(eventCard.equals(eventCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(eventCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(eventCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // different event, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event differentEvent \u003d new EventBuilder().withEventName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(eventCard.equals(new EventCard(differentEvent, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // same event, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(eventCard.equals(new EventCard(event, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Asserts that {@code eventCard} displays the details of {@code expectedEvent} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void assertCardDisplay(EventCard eventCard, Event expectedEvent, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventCardHandle eventCardHandle \u003d new EventCardHandle(eventCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", eventCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // verify event details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCardDisplaysEvent(expectedEvent, eventCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 72
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/EventListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.getTypicalEvents;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.testutil.GuiTestAssert.assertCardDisplaysEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import guitests.guihandles.EventCardHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import guitests.guihandles.EventListPanelHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.storage.XmlSerializableScheduler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EventListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final ObservableList\u003cEvent\u003e TYPICAL_EVENTS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            FXCollections.observableList(getTypicalEvents());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private EventListPanelHandle eventListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        initUi(TYPICAL_EVENTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_EVENTS.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            eventListPanelHandle.navigateToCard(TYPICAL_EVENTS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            Event expectedEvent \u003d TYPICAL_EVENTS.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            EventCardHandle actualCard \u003d eventListPanelHandle.getEventCardHandle(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            assertCardDisplaysEvent(expectedEvent, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        initUi(TYPICAL_EVENTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventCardHandle expectedEvent \u003d eventListPanelHandle.getEventCardHandle(INDEX_SECOND_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventCardHandle selectedEvent \u003d eventListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCardEquals(expectedEvent, selectedEvent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Verifies that creating and deleting large number of events in {@code EventListPanel} requires lesser than"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "        ObservableList Event backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a list of events containing {@code eventCount} events that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code EventListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private ObservableList\u003cEvent\u003e createBackingList(int eventCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithEvents(eventCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        XmlSerializableScheduler xmlScheduler \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return FXCollections.observableArrayList(xmlScheduler.toModelType().getEventList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a .xml file containing {@code eventCount} events. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Path createXmlFileWithEvents(int eventCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        builder.append(\"\u003cscheduler\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (int i \u003d 0; i \u003c eventCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003cevents\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003cuuid\u003e\").append(UUID.randomUUID()).append(\"\u003c/uuid\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003ceventName\u003ea\u003c/eventName\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003cstartDateTime\u003e2018-09-21T11:00\u003c/startDateTime\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003cendDateTime\u003e2018-09-21T12:00\u003c/endDateTime\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003cdescription\u003eb\u003c/description\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003cpriority\u003eLOW\u003c/priority\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003cvenue\u003ec\u003c/venue\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003crepeatType\u003eNONE\u003c/repeatType\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003crepeatUntilDateTime\u003e2018-09-21T12:00\u003c/repeatUntilDateTime\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            builder.append(\"\u003c/events\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        builder.append(\"\u003c/scheduler\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Path manyEventsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyEvents.xml\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        FileUtil.createFile(manyEventsFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        FileUtil.writeToFile(manyEventsFile, builder.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        manyEventsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return manyEventsFile;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Initializes {@code eventListPanelHandle} with a {@code EventListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code EventListPanel}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void initUi(ObservableList\u003cEvent\u003e backingList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        EventListPanel eventListPanel \u003d new EventListPanel(backingList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        uiPartRule.setUiPart(eventListPanel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventListPanelHandle \u003d new EventListPanelHandle(getChildNode(eventListPanel.getRoot(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                EventListPanelHandle.EVENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 3,
      "ChengYuuu": 126
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A GUI unit test class for Scheduler."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 7,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final SchedulerChangedEvent EVENT_STUB \u003d new SchedulerChangedEvent(new Scheduler());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // after scheduler book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 8,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import guitests.guihandles.EventCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import guitests.guihandles.EventListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void assertCardEquals(EventCardHandle expectedCard, EventCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedCard.getEventName(), actualCard.getEventName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedCard.getStartDateTime(), actualCard.getStartDateTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedCard.getEndDateTime(), actualCard.getEndDateTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedCard.getVenue(), actualCard.getVenue());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedEvent}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void assertCardDisplaysEvent(Event expectedEvent, EventCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEvent.getEventName().value, actualCard.getEventName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEvent.getStartDateTime().getPrettyString(), actualCard.getStartDateTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEvent.getEndDateTime().getPrettyString(), actualCard.getEndDateTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEvent.getVenue().value, actualCard.getVenue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedEvent.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Asserts that the list in {@code eventListPanelHandle} displays the details of {@code events} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void assertListMatching(EventListPanelHandle eventListPanelHandle, Event... events) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (int i \u003d 0; i \u003c events.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            eventListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            assertCardDisplaysEvent(events[i], eventListPanelHandle.getEventCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Asserts that the list in {@code eventListPanelHandle} displays the details of {@code events} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void assertListMatching(EventListPanelHandle eventListPanelHandle, List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertListMatching(eventListPanelHandle, events.toArray(new Event[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Asserts the size of the list in {@code eventListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void assertListSize(EventListPanelHandle eventListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        int numberOfEvent \u003d eventListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(size, numberOfEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 28,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "package seedu.scheduler.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MA3220;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.END_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EVENT_NAME_DESC_MA3220;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REMINDER_DURATION_LIST_1H;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_TYPE_DESC_MA3220;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_UNTIL_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.START_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_PLAY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VENUE_DESC_MA3220;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.AD_HOC_WORK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.MA3220_JANUARY_1_2019_SINGLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.ONE_TIME_JOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class AddCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: add an event with tags to a non-empty scheduler, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event toAdd \u003d MA3220_JANUARY_1_2019_SINGLE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + EVENT_NAME_DESC_MA3220 + \"  \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + START_DATETIME_DESC_MA3220 + \"   \" + END_DATETIME_DESC_MA3220 + \"   \" + DESCRIPTION_DESC_MA3220"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + \"   \" + VENUE_DESC_MA3220 + \"   \" + REPEAT_TYPE_DESC_MA3220 + \"   \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                + REPEAT_UNTIL_DATETIME_DESC_MA3220 + \" \" + TAG_DESC_PLAY + \" \" + REMINDER_DURATION_LIST_1H;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: undo adding MA2101 to the list -\u003e MA2101 deleted */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: redo adding MA2101 to the list -\u003e MA2101 added again */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.addEvents(List.of(toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: add an event with all fields same as another event in the scheduler -\u003e added */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        toAdd \u003d new EventBuilder(MA3220_JANUARY_1_2019_SINGLE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + EVENT_NAME_DESC_MA3220 + START_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + END_DATETIME_DESC_MA3220 + DESCRIPTION_DESC_MA3220 + VENUE_DESC_MA3220"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                + REPEAT_TYPE_DESC_MA3220 + REPEAT_UNTIL_DATETIME_DESC_MA3220 + TAG_DESC_PLAY"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                + REMINDER_DURATION_LIST_1H;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: add to empty scheduler -\u003e added */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteAllEvents();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(MA3220_JANUARY_1_2019_SINGLE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: add an event with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        toAdd \u003d MA3220_JANUARY_1_2019_SINGLE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + REPEAT_UNTIL_DATETIME_DESC_MA3220 + START_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA3220 + REPEAT_TYPE_DESC_MA3220 + END_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hexinyiyi"
        },
        "content": "                + DESCRIPTION_DESC_MA3220 + EVENT_NAME_DESC_MA3220 + TAG_DESC_PLAY + REMINDER_DURATION_LIST_1H;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: add an event, missing tags -\u003e added */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        toAdd \u003d new EventBuilder(MA3220_JANUARY_1_2019_SINGLE).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: filters the event list before adding -\u003e added */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventsWithEventName(KEYWORD_MATCHING_STARTUP);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(AD_HOC_WORK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* ------------------------ Perform add operation while an event card is selected --------------------------- */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: selects first card in the event list, add an event -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        selectEvent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(ONE_TIME_JOB);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + START_DATETIME_DESC_MA3220 + END_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + DESCRIPTION_DESC_MA3220 + VENUE_DESC_MA3220 + REPEAT_TYPE_DESC_MA3220"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + REPEAT_UNTIL_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d \"adds \" + EventUtil.getEventDetails(toAdd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: invalid event name -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_EVENT_NAME_DESC + START_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + END_DATETIME_DESC_MA3220 + DESCRIPTION_DESC_MA3220"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA3220 + REPEAT_TYPE_DESC_MA3220 + REPEAT_UNTIL_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(command, EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 4. {@code Storage} and {@code EventListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void assertCommandSuccess(Event toAdd) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(EventUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Event)}. Executes {@code command}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Event)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void assertCommandSuccess(String command, Event toAdd) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.addEvents(List.of(toAdd));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Event)} except asserts that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 2. {@code Storage} and {@code EventListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Event)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 4. {@code Storage} and {@code EventListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hexinyiyi": 5,
      "ChengYuuu": 80,
      "-": 98
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class ClearCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: clear non-empty scheduler, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" scheduler   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: undo clearing scheduler -\u003e original scheduler book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: redo clearing scheduler -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: selects first card in event list and clears scheduler -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original scheduler"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        selectEvent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: filters the event list before clearing -\u003e entire scheduler cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original scheduler"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventsWithEventName(KEYWORD_MATCHING_STARTUP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: clear empty scheduler -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 24,
      "-": 77
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.DeleteCommand.MESSAGE_DELETE_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TestUtil.getEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class DeleteCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: delete the first event in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_EVENT.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event deletedEvent \u003d removeEvent(expectedModel, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EVENT_SUCCESS, deletedEvent.getEventName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: delete the last event in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index lastEventIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(lastEventIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: undo deleting the last event in the list -\u003e last event restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: redo deleting the last event in the list -\u003e last event deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        removeEvent(modelBeforeDeletingLast, lastEventIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: delete the middle event in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index middleEventIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(middleEventIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: filtered event list, delete index within bounds of scheduler and event list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventsWithEventName(KEYWORD_MATCHING_STARTUP);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index index \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEventList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: filtered event list, delete index within bounds of scheduler but out of bounds of event list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventsWithEventName(KEYWORD_MATCHING_STARTUP);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        int invalidIndex \u003d getModel().getScheduler().getEventList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //remove for v1.3.1 for the readme page will change thr URL"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        ///* ---------------------Performing delete operation while a event card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        /* Case: delete the selected event -\u003e event list panel selects the event before the deleted event */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        showAllEvents();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        selectEvent(selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        deletedEvent \u003d removeEvent(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        expectedResultMessage \u003d String.format(MESSAGE_DELETE_EVENT_SUCCESS, deletedEvent.getEventName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        //        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                getModel().getScheduler().getEventList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Removes the {@code Event} at the specified {@code index} in {@code model}\u0027s scheduler."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @return the removed event"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private Event removeEvent(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event targetEvent \u003d getEvent(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.deleteEvent(targetEvent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return targetEvent;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Deletes the event at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event deletedEvent \u003d removeEvent(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EVENT_SUCCESS, deletedEvent.getEventName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 53,
      "YezhongZ": 14,
      "-": 128
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MA2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MA3220;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.END_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.END_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EVENT_NAME_DESC_MA2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EVENT_NAME_DESC_MA3220;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_TYPE_DESC_MA2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_TYPE_DESC_MA3220;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_UNTIL_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.REPEAT_UNTIL_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.START_DATETIME_DESC_MA2101;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.START_DATETIME_DESC_MA3220;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_PLAY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_SCHOOL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MA2101;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_SCHOOL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_VENUE_MA2101;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_VENUE_MA3220;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VENUE_DESC_MA2101;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VENUE_DESC_MA3220;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.MA2101_JANUARY_1_2018_YEARLY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.MA3220_JANUARY_1_2019_SINGLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.EventName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.EventBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class EditCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index index \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + EVENT_NAME_DESC_MA3220"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + \"  \" + START_DATETIME_DESC_MA3220 + \"  \" + END_DATETIME_DESC_MA3220 + \"  \" + DESCRIPTION_DESC_MA3220"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + \"  \" + VENUE_DESC_MA3220 + \"  \" + REPEAT_TYPE_DESC_MA3220 + \"  \" + REPEAT_UNTIL_DATETIME_DESC_MA3220"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + \"  \" + TAG_DESC_PLAY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event firstEditedEvent \u003d new EventBuilder(MA3220_JANUARY_1_2019_SINGLE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .withEventUid(model.getFilteredEventList().get(index.getZeroBased()).getEventUid())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .withEventSetUid(model.getFilteredEventList().get(index.getZeroBased()).getEventSetUid()).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, index, firstEditedEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: undo editing the last event in the list -\u003e last event restored */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: redo editing the last event in the list -\u003e last event edited again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateEvent("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                getModel().getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()), firstEditedEvent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: edit an event with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + EVENT_NAME_DESC_MA3220"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + START_DATETIME_DESC_MA3220 + END_DATETIME_DESC_MA3220 + DESCRIPTION_DESC_MA3220"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA3220 + REPEAT_TYPE_DESC_MA3220 + REPEAT_UNTIL_DATETIME_DESC_MA3220 + TAG_DESC_PLAY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, index, firstEditedEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: edit an event with new values some same as event\u0027s values some different -\u003e edited */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(getModel().getScheduler().getEventList().contains(firstEditedEvent));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        index \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(getModel().getFilteredEventList().get(index.getZeroBased()), MA3220_JANUARY_1_2019_SINGLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + EVENT_NAME_DESC_MA3220"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + START_DATETIME_DESC_MA3220 + END_DATETIME_DESC_MA3220 + DESCRIPTION_DESC_MA2101"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA2101 + REPEAT_TYPE_DESC_MA3220 + REPEAT_UNTIL_DATETIME_DESC_MA3220 + TAG_DESC_SCHOOL;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event secondEditedEvent \u003d new EventBuilder(MA3220_JANUARY_1_2019_SINGLE)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .withEventUid(getModel().getFilteredEventList().get(index.getZeroBased()).getEventUid())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "                .withEventSetUid(getModel().getFilteredEventList().get(index.getZeroBased()).getEventSetUid())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_MA2101)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .withVenue(VALID_VENUE_MA2101).withTags(VALID_TAG_SCHOOL).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, index, secondEditedEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: edit an event with new values same as another event\u0027s values -\u003e edited */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(getModel().getScheduler().getEventList().contains(secondEditedEvent));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        index \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertNotEquals(getModel().getFilteredEventList().get(index.getZeroBased()), firstEditedEvent);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + EVENT_NAME_DESC_MA3220"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + START_DATETIME_DESC_MA3220 + END_DATETIME_DESC_MA3220 + DESCRIPTION_DESC_MA3220"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + VENUE_DESC_MA3220 + REPEAT_TYPE_DESC_MA3220 + REPEAT_UNTIL_DATETIME_DESC_MA3220 + TAG_DESC_PLAY;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, index, firstEditedEvent);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        index \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToEdit \u003d getModel().getFilteredEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event thirdEditedEvent \u003d new EventBuilder(eventToEdit).withTags().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, index, thirdEditedEvent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: filtered event list, edit index within bounds of scheduler and event list -\u003e edited */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        showEventsWithEventName(\"MA3220\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        index \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEventList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + VENUE_DESC_MA3220;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        eventToEdit \u003d getModel().getFilteredEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event fourthEditedEvent \u003d new EventBuilder(eventToEdit).withVenue(VALID_VENUE_MA3220).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, index, fourthEditedEvent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: filtered event list, edit index within bounds of scheduler but out of bounds of event list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventsWithEventName(KEYWORD_MATCHING_STARTUP);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        int invalidIndex \u003d getModel().getScheduler().getEventList().size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + VENUE_DESC_MA3220,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* --------------------- Performing edit operation while a event card is selected -------------------------- */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: selects first card in the event list, edit a event -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showAllEvents();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        index \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        selectEvent(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + EVENT_NAME_DESC_MA2101"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + \" \" + START_DATETIME_DESC_MA2101 + \" \" + END_DATETIME_DESC_MA2101 + \" \" + DESCRIPTION_DESC_MA2101"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + \"  \" + VENUE_DESC_MA2101 + \"  \" + REPEAT_TYPE_DESC_MA2101 + \"  \" + REPEAT_UNTIL_DATETIME_DESC_MA2101"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + \"  \" + TAG_DESC_SCHOOL;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // browser\u0027s url is updated to reflect the new event\u0027s name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, index, MA2101_JANUARY_1_2018_YEARLY, index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + EVENT_NAME_DESC_MA3220,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + EVENT_NAME_DESC_MA3220,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredEventList().size() + 1;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + EVENT_NAME_DESC_MA3220,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + EVENT_NAME_DESC_MA3220,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                        + INVALID_EVENT_NAME_DESC,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Event, Index)} except that"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Event, Index)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Event editedEvent) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedEvent, null);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the event at index {@code toEdit} being"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * updated to values specified {@code editedEvent}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Event editedEvent,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Event eventToEdit \u003d expectedModel.getFilteredEventList().get(toEdit.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_EVENT_SUCCESS, eventToEdit.getEventName()),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        expectedModel.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 135,
      "YezhongZ": 5,
      "-": 130
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class ErrorDialogGuiTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_EVENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.DISCUSSION_WITH_JACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.INTERVIEW_WITH_JOHN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STARTUP_LECTURE_MONTH_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STARTUP_LECTURE_MONTH_THREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.STARTUP_LECTURE_MONTH_TWO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class FindCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find multiple events in scheduler, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         * -\u003e 3 events found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_STARTUP + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // event names of january 1 2018, january 2 2018 and january 3 2018 contains \"January\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, STARTUP_LECTURE_MONTH_ONE, STARTUP_LECTURE_MONTH_TWO,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                STARTUP_LECTURE_MONTH_THREE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: repeat previous find command where event list is displaying the events we are finding"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         * -\u003e 3 events found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find event where event list is not displaying the event we are finding -\u003e 1 event found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Interview\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find multiple events in scheduler, 2 keywords -\u003e 4 events found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Startup Interview\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, STARTUP_LECTURE_MONTH_ONE, STARTUP_LECTURE_MONTH_TWO,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                STARTUP_LECTURE_MONTH_THREE, INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find multiple events in scheduler, 2 keywords in reversed order -\u003e 4 events found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Interview Startup\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find multiple events in scheduler, 2 keywords with 1 repeat -\u003e 4 events found */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Startup Interview Startup\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find multiple events in scheduler, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         * -\u003e 4 events found"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Startup Interview NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find events in scheduler after deleting 1 of them -\u003e 2 event found */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 2\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(getModel().getScheduler().getEventList().contains(STARTUP_LECTURE_MONTH_ONE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, STARTUP_LECTURE_MONTH_TWO, STARTUP_LECTURE_MONTH_THREE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find event in scheduler, keyword is same as name but of different case -\u003e 2 event found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" sTarTuP\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find event in scheduler, keyword is substring of name -\u003e 0 events found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Start\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find event in scheduler, name is substring of keyword -\u003e 0 events found */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Startups\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find event not in scheduler -\u003e 0 events found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dream\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find start date time of event in scheduler -\u003e 0 events found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DISCUSSION_WITH_JACK.getStartDateTime().getPrettyString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find end date time of event in scheduler -\u003e 0 events found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DISCUSSION_WITH_JACK.getEndDateTime().getPrettyString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find description of event in scheduler (description words not matching any event name)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         * -\u003e 0 events found"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DISCUSSION_WITH_JACK.getDescription().value;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find description of event in scheduler (description words match an event name)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         * -\u003e 1 events found"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + INTERVIEW_WITH_JOHN.getDescription().value;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find venue of event in scheduler -\u003e 0 events found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DISCUSSION_WITH_JACK.getVenue().value;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find repeat type of event in scheduler -\u003e 0 events found */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DISCUSSION_WITH_JACK.getRepeatType().name();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find repeat until date time of event in scheduler -\u003e 0 events found */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                + DISCUSSION_WITH_JACK.getRepeatUntilDateTime().getPrettyString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find tags of event in scheduler -\u003e 0 events found */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DISCUSSION_WITH_JACK.getTags());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find while a event is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showAllEvents();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        selectEvent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(getEventListPanel().getHandleToSelectedCard().getEventName()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                .equals(INTERVIEW_WITH_JOHN.getEventName().value));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Interview\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, INTERVIEW_WITH_JOHN);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: find event in empty scheduler -\u003e 0 events found */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteAllEvents();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d \"FiNd Startup\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * box displays {@code Messages#MESSAGE_EVENTS_LISTED_OVERVIEW} with the number of event in the filtered list,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                MESSAGE_EVENTS_LISTED_OVERVIEW, expectedModel.getFilteredEventList().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 102,
      "-": 126
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class HelpCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        getEventListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertListMatching(getEventListPanel(), getModel().getFilteredEventList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 12,
      "-": 95
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static final Predicate\u003cEvent\u003e PREDICATE_MATCHING_NO_EVENTS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cEvent\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Optional\u003cPredicate\u003cEvent\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        model.updateFilteredEventList(predicate.orElse(PREDICATE_MATCHING_NO_EVENTS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public static void setFilteredList(Model model, Event... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Event} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    private static Predicate\u003cEvent\u003e getPredicateMatching(Event other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return event -\u003e event.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 10,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.RepeatEventGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.util.SampleSchedulerDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class SampleDataTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    protected Scheduler getInitialData() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public void scheduler_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        List\u003cEvent\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        for (Event sampleEvent : SampleSchedulerDataUtil.getSampleEvents()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            expectedList.addAll(RepeatEventGenerator.getInstance().generateAllRepeatedEvents(sampleEvent));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertListMatching(getEventListPanel(), expectedList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 16,
      "-": 41
    }
  },
  {
    "path": "src/test/java/systemtests/SchedulerSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import guitests.guihandles.EventListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Scheduler;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.testutil.TypicalEvents;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": " * A system test class for Scheduler, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public abstract class SchedulerSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    protected Scheduler getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return TypicalEvents.getTypicalScheduler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public EventListPanelHandle getEventListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        return mainWindowHandle.getEventListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Displays all events in the scheduler."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    protected void showAllEvents() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(getModel().getScheduler().getEventList().size(), getModel().getFilteredEventList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Displays all events with any parts of their event names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    protected void showEventsWithEventName(String keyword) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(getModel().getFilteredEventList().size() \u003c getModel().getScheduler().getEventList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Selects the event at {@code index} of the displayed list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    protected void selectEvent(Index index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(index.getZeroBased(), getEventListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Deletes all events in the scheduler."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    protected void deleteAllEvents() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(0, getModel().getScheduler().getEventList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same event objects as {@code expectedModel}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * and the event list panel displays the events in the model correctly."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        // [TODO] to fix cause of uuid"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        //assertEquals(new Scheduler(expectedModel.getScheduler()), testApp.readStorageScheduler());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertListMatching(getEventListPanel(), expectedModel.getFilteredEventList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code EventListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        getEventListPanel().rememberSelectedEventCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * of the previously selected event."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(getEventListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the event in the event list panel at"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see EventListPanelHandle#isSelectedEventCardChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        getEventListPanel().navigateToCard(getEventListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String selectedCardName \u003d getEventListPanel().getHandleToSelectedCard().getEventName();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.CALENDER_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        // Remove for v1.3.1, because of the readme page"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YezhongZ"
        },
        "content": "        // assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getEventListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the event list panel remain unchanged."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see EventListPanelHandle#isSelectedEventCardChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertFalse(getEventListPanel().isSelectedEventCardChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertListMatching(getEventListPanel(), getModel().getFilteredEventList());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 55,
      "YezhongZ": 3,
      "-": 235
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.logic.commands.SelectCommand.MESSAGE_SELECT_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalEvents.KEYWORD_MATCHING_STARTUP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "public class SelectCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: select the first card in the event list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: select the last card in the event list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        Index eventCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + eventCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandSuccess(command, eventCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: select the middle card in the event list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: filtered event list, select index within bounds of scheduler but out of bounds of event list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        showEventsWithEventName(KEYWORD_MATCHING_STARTUP);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        int invalidIndex \u003d getModel().getScheduler().getEventList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: filtered event list, select index within bounds of scheduler and event list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredEventList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredEventList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        /* Case: select from empty scheduler -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        deleteAllEvents();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected event.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 4. {@code Storage} and {@code EListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "                MESSAGE_SELECT_EVENT_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getEventListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * 4. {@code Storage} and {@code EventListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 44,
      "-": 110
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "import seedu.scheduler.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyScheduler\u003e scheduler, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(scheduler, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 4,
      "-": 70
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003c?import seedu.scheduler.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChengYuuu"
        },
        "content": "\u003cfx:root type\u003d\"seedu.scheduler.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChengYuuu": 1,
      "-": 5
    }
  }
]
