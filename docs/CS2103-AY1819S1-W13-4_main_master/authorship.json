[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d TutorHelper"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W13-4/main[image:https://travis-ci.org/CS2103-AY1819S1-W13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "https://ci.appveyor.com/project/lywjoel/main[image:https://ci.appveyor.com/api/projects/status/fl2g22tv19e55iq4?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W13-4/main?branch\u003dmaster[image:https://coveralls.io/repos/CS2103-AY1819S1-W13-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* This is a desktop TutorHelper application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* It is a Java sample application intended for Tutors who would like to organise their students\u0027 information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* This application contains:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** A GUI that includes a list panel and a details panel."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Test cases, including automated GUI testing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* This application was adapted from https://github.com/nus-cs2103-AY1819S1/addressbook-level4[AddressBook4]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "andlimey": 3,
      "lywjoel": 5,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"andlimey\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Andy Chan\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"andlimey\", \"Andy\", \"DESKTOP-4O94ROD\\\\Andy\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"SusterDrifter\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Anthony Halim\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"SusterDrifter\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"lywjoel\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Joel Lee\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"lywjoel\", \"Joel Lee\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"ongyz\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Ong Yan Zhi\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"ongyz\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"ooihuiying\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Ooi Hui Ying\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"ooihuiying\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u0027site-name\u0027: \u0027TutorHelper\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W13-4/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 2,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "TutorHelper was developed by the https://github.com/CS2103-AY1819S1-W13-4[CS2103-AY1819S1-W13-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Andy Chan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::andlimey.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "{empty}[https://github.com/andlimey[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Anthony Halim"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "image::susterdrifter.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "{empty}[http://github.com/SusterDrifter[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Joel Lee"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::lywjoel.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "{empty}[http://github.com/lywjoel[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Ong Yan Zhi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::ongyz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "{empty}[http://github.com/ongyz[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Ooi Hui Ying"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::ooihuiying.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": "{empty}[http://github.com/ooihuiying[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "andlimey": 17,
      "lywjoel": 2,
      "-": 37
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "andlimey": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d TutorHelper - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-4/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Value Proposition"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Current: +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `Tutors use reminder applications to keep track of lessons`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `Tutors use physical diaries or notepads to keep track of current lesson progress`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Value:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `Tutors have a platform where they can keep track of all their students\u0027 details, their progress and the syllabus they intend to cover.`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ". As a busy tutor, I want to be able to manage my students\u0027 schedules individually, so that I can plan my time properly."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ". As a tutor, I want to be able to find out where my students live and what time I should be there for tuition."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ". As a tutor, I want to know my students\u0027 individual progress so that I know what topics I need to cover for the next tuition session."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ". As a tutor, I want to keep track of my students\u0027 payments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  1. Add Student"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    1. Tutor inputs to add a student and his/her details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2. System adds student details into the database."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  Extensions:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    2a. Tutor did not key in all mandatory fields."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2a1. System displays error message informing tutor of invalid index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2b1. Resume step 1."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  2. Edit Student"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    1. Tutor inputs to edit a student\u0027s details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2. System edits student details into the database."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  Extensions:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2a. Index is out of bounds"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2a1. System displays error message informing tutor of invalid index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2b1. Resume step 1."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  3. Delete Student"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    1. Tutor inputs student\u0027s index to delete."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2. System deletes student details from the database."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  Extensions:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2a. Index is out of bounds"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     2a1. System displays error message informing tutor of invalid index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     2b1. Resume step 1."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  4. List Students"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    1. Tutor requests to list students."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2. System displays current list of students."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  5. Group Students"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  Precondition: Current list of students is not empty."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    1. Tutor requests to group students by day or timing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2. System filters the current list of students based on the timing entered."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    3. System sorts the filtered list of students in order of timing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    4. System displays filtered and sorted list to Tutor."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  Extensions:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2a. Input is invalid"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "      2a1. System displays examples of valid input to Tutor."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    2b. Tutor does not input a day or timing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "      2b1. System retrieves current date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "      2b2. System filters out students with tuition before current date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "      2b3. Resume from step 3."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  6. Record students\u0027 payments"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    System: TutorHelper"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    Actor: Tutor"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    Precondition: student index entered must be valid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    MSS:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      1. Tutor request to add in payment for a student."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2. System searches for that student according to index entered."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      3. System adds Payment amount, month and year to student\u0027s record."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      4. System displays payment record in browser panel."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      5. System displays successful recording of payment under command box."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     Extensions:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2a. Tutor does not enter all the required entries correctly"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2a1. System displays error message"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2a2. System gives tutor an example of a correct entry."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2a3. Repeat step 1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2b. Tutor does not enter a valid student index"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2b1. System displays error message telling tutor that index is invalid"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2b2. Repeat step 1."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  7. Display tutor\u0027s earnings for that month and year"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     System: TutorHelper"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     Actor: Tutor"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     Precondition: Tutor has recorded payment from students before."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     MSS:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        1. Tutor request for earnings for a specific month and year."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2. System searches for all the payment records made from all the students for that particular month and year."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        3. System adds up all the payment."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        4. System displays total earnings under the command box."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Use case end."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     Extensions:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2a. System does not find any payment recorded for that month and year."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            2a1. System displays $0 as result."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Non-Functional Requirements"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ". The system should respond in two seconds."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ". The system should be understandable to a novice in working with computers."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andlimey"
        },
        "content": "// tag::group[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Group Students feature"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Classes related to Group and its functionality is listed below:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `AddressBookParser` -- Creates a GroupCommandParser object and parses the user\u0027s input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `GroupCommandParser` -- Analyses the input, creates a predicate based on the input and returns a GroupCommand object with the predicate as the argument."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `GroupCommand` -- Filters the list based on the predicate and displays it to the user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Given below is an example usage scenario and how the group mechanism behaves at each step."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Step 2. Assuming that the application isn\u0027t empty, the user executes \u0027group Monday\u0027 command to group all students with a class on Monday. The group command will be called by `GroupCommandParser.parse()`, parsing the argument to check against. The application will check the list and display all students with classes on Monday, sorted based on the earliest timing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andlimey"
        },
        "content": "The user can execute `list` to re-display the full list of students again."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The group command is CASE-SENSITIVE. E.g. Passing MONDAY as an input instead of Monday will throw an error."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andlimey"
        },
        "content": "The following sequence diagram shows how the group operation works:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::GroupSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Students payment feature"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The Payment mechanism is facilitated by VersionedAddressBook and FilteredList\u003cPerson\u003e. VersionedAddressBook extends from AddressBook and classes related to Payment calls methods from VersionedAddressBook to retrieve students\u0027 data, update them and display accordingly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Classes that are related to Payment and their functionality are as listed below:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `AddressBookParser` -- Creates a PayCommandParser object and calls parse method in object to parse user\u0027s argument input."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `PayCommandParser` -- Analyses the input, checks for any violation of syntax and returns a PayCommand object with the Payment object as the argument."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `PayCommand` -- Calls on methods in VersionedAddressBook to update new Payments made."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `Payment` -- -Contains fields to store student id, amount paid, month of payment and year of payment."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Given below is an example usage scenario and how the payment mechanism behaves at each step."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 1. The tutor launches the application and wants to record a payment for his/her student called Alice."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2. He/she makes a mental note of Alice\u0027s student index as listed in the left side of the application."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2a. Lets say, Alice has student id 2. The payment she made was $400 for the month and year of November 2018. He/she proceeds to key in command in the following format: paid 2 400 11 2018"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2b. The tutor\u0027s input is passed from the text box through LogicManager class to AddressBookParser. AddressBookParser sieves out the arguments and command word(in this case, paid) and creates the PayCommandParser object, followed by calling parse method, with the arguments passed in."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2c. PayCommandParser then checks if the inputs are of the correct format and it initialises a Payment object with the inputs."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2d. The PayCommandParser method then returns a PayCommand object with payment object."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2e. This is propagated back to the LogicManager class which then proceed to call execute method in the returned PayCommand object."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2f. The execute method in PayCommand proceed to obtain the list of students from the model. Since 2 is a valid student index, it proceeds to retrieve information from Alice Person class."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2g. Alice person class contains payment class. The PayCommand execute method proceeds to call the method updatePayments, then calls updatePerson in model class to modify Alice Person class with the new updated payment."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 3. Now, payment details have been updated and the tutor will be able to see a payment updated successfully message below the command text box and the list of payments as well as other details about Alice"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 4. XmlAdaptedPay is responsible for converting the data type to the appropriate data type for display through the toModelType method."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 5. The tutor may also choose to view the details from browser panel by clicking on Alice tab on the left. Payments will be displayed in one of the rows."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Payment list will keep up to 10 payments at any one time. When the 11th payment is added, the payment list will remove the oldest payment record."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "The diagram below illustrates the sequence diagram."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "image:PaymentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d\u003d Students edit payment feature"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Classes that are related to Payment and their functionality are as listed below:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `AddressBookParser` -- Creates a PayCommandParser object and calls parse method in object to parse user\u0027s argument input."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `PayCommandParser` -- Analyses the input, checks for any violation of syntax and returns a PayCommand object with the Payment object as the argument."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `PayCommand` -- Calls on methods in VersionedAddressBook to update new Payments made."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `Payment` -- -Contains fields to store student id, amount paid, month of payment and year of payment."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Given below is an example usage scenario and how the payment mechanism behaves at each step."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 1. The tutor launches the application and wants to record a payment for his/her student called Alice."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2. He/she makes a mental note of Alice\u0027s student index as listed in the left side of the application."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2a. Lets say, Alice has student id 2. The payment she made was $400 for the month and year of November 2018. He/she proceeds to key in command in the following format: paid 2 400 11 2018"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2b. The tutor\u0027s input is passed from the text box through LogicManager class to AddressBookParser. AddressBookParser sieves out the arguments and command word(in this case, paid) and creates the PayCommandParser object, followed by calling parse method, with the arguments passed in."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2c. PayCommandParser check if the inputs are of the correct format and it initialises a Payment object with the inputs."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2d. The PayCommandParser method then returns a PayCommand object with payment object."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2e. This is propagated back to the LogicManager class which then proceed to call execute method in the returned PayCommand object."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2f. The execute method in PayCommand proceed to obtain the list of students from the model. Since 2 is a valid student index, it proceeds to retrieve information from Alice Person class."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2g. Alice person class contains payment class. The PayCommand execute method proceeds to call the method updatePayments, then calls updatePerson in model class to modify Alice Person class with the new updated payment."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 3. Now, payment details have been updated and the tutor will be able to see a payment updated successfully message below the command text box and the list of payments as well as other details about Alice"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 4. XmlAdaptedPay is responsible for converting the data type to the appropriate data type for display through the toModelType method."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 5. The tutor may also choose to view the details from browser panel by clicking on Alice tab on the left. Payments will be displayed in one of the rows."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "The sequence diagram below illustrates the payment edit feature"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    1. Current implementation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        The edit Payment mechanism is facilitated by VersionedAddressBook and FilteredList\u003cPerson\u003e. VersionedAddressBook extends from AddressBook and classes related to Payment calls methods from VersionedAddressBook to retrieve students\u0027 data, update the Payment entry and display accordingly."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        To be clearer, classes that are related to Payment and their functionality are as listed below:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        a. AddressBookParser:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Creates a PayCommandParser object and calls parse method in object to parse user\u0027s argument input."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        c. PayCommandParser"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Analyses the user\u0027s input and checks for any violation of syntax."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Creates a Payment object with users\u0027 input."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Returns a PayCommand object with Payment object being fed in."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        b. PayCommand:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Takes in a Payment object in its constructor to edit an existing Payment object"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Calls on methods in VersionedAddressBook to update edit on existing Payments made."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        d. Payment:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Contains fields to store student id, amount paid, month of payment and year of payment to compare if it is to be edited"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        e. XmlAdaptedPay"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Responsible for converting the format of data so that it can be displayed below the command text box and stored."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        f. BrowserPanel"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            -Responsible for displaying payment details in browser panel."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2. Example usage scenario"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a. The tutor launches the application and wants to edit an existing payment for his/her student called Alice by updating the amount by another 200."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2b. He/she makes a mental note of Alice\u0027s student index as listed in the left side of the application as well as the month and year of the existing payment."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2c. Lets say, Alice has student id 2. The existing payment she made was $400 for the month and year of November 2018. He/she proceeds to key in command in the following format: paid idx/2 amt/200 m/11 y/2018"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            2C1. The tutor\u0027s input is passed from the text box through LogicManager class to AddressBookParser. AddressBookParser sieves out the arguments and command word(in this case, paid) and creates the PayCommandParser object, followed by calling parse method, with the arguments passed in."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            2C3. From the prefixes, PayCommandParser makes use of ArgumentMultimap to check if the inputs are of the correct format and it initialises a Payment object with the inputs."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            2C4. The PayCommandParser method then returns a PayCommand object with payment object."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            2C5. This is propagated back to the LogicManager class which then proceed to call execute method in the returned PayCommand object."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            2C6. The execute method in PayCommand proceed to obtain the list of students from the model. Since 2 is a valid student index, it proceeds to retrieve information from Alice Person class."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            2C7. Alice person class contains payment class. The PayCommand execute method proceeds to call editPaymentField to loop through Alice\u0027s list of Payments to find the existing payment and update with a new updated list of payments."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2d. Now, payment details have been updated and the tutor will be able to see a payment updated successfully message below the command text box and the list of payments as well as other details about Alice"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            2D1. XmlAdaptedPay is responsible for converting the data type to the appropriate data type for display through the toModelType method."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2e. The tutor may also choose to view the details from browser panel by clicking on Alice tab on the left. Payments will be displayed in one of the rows."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    3. The sequence diagram below illustrates the payment edit feature"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ongyz"
        },
        "content": "image:EditPaymentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Tutor\u0027s Earnings feature"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The Earnings mechanism is mainly facilitated by the filteredPersonList found in model. It works by checking through all past recorded payments for that specific month and year as requested by the tutor and returns the total earnings."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The classes related to Earnings are EarningsCommand, EarningsCommandParser."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `AddressBookParser` -- Creates a PayCommandParser object and calls parse method in object to parse user\u0027s argument input."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `EarningsCommandParser` --Takes in users\u0027 input and checks if it adheres to the required format. Returns a EarningsCommand with the month and year passed in."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `EarningsCommand` -- Takes in month and year as inputs in its constructed. In Execute() method, it performs the checking of all recorded payments and returns the total payments received for that specified month and year."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Given below is an example usage scenario and how the earning mechanism behaves at each step."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 1. The tutor launches the application and wants to view his/her earnings for the month of November 2018."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2. He/she enters input in the format of: earnings 11 2018"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2a. The tutor\u0027s input is passed from the text box through LogicManager class to AddressBookParser. AddressBookParser sieves out the arguments and command word(in this case, earnings) and creates the EarningsCommandParser object, followed by calling parse method, with the arguments passed in."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2b. EarningCommandParser checks if the inputs are of the correct format."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2b. The PayCommandParser method then returns a EarningCommand object with month and year passed in."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2c. This is propagated back to the LogicManager class which then proceed to call execute method in the returned EarningsCommand object."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2d. The execute method in EarningsCommand proceed to obtain the list of students from the model and proceeds to search for Payment records made for that requested month and year."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2e. The amount is then returned."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 3. The tutor will then see a message below the command text box, showing the earnings for the requested month and year."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "The diagram below illustrates the sequence diagram."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "image:EarningsSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// tag::copysub[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Copy Subject feature"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The copy subject command operates by making a duplicate of the selected subject of the student and adds it the other student."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "If the other student already has the same subject, append the content of the subject instead. State of each syllabus is also copied. Duplicate syllabus will not be added."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Classes related to copy command and its functionality are listed below:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `AddressBookParser` -- Creates CopySubCommandParser which parses the input from user."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `CopySubCommandParser` -- Parses user\u0027s input into proper argument and creates CopySubCommand"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `CopySubCommand` -- Updates the target person based on the argument"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `SubjectsUtil` -- Manage the finding and copying aspect of copysub command."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Given below is an example usage scenario with 2 possible outcomes and how to copy function addresses each case."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 2. Assuming that the application isn\u0027t empty, the user executes `copysub 1 2 4`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 3. Assuming that each argument given is a valid input, the system will perform the copysub command."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 4. The system will locate the _first_ student from the student list, and make a separate copy of the _second_ subject stored under the student data."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 5. The system will locate the _fourth_ student from the student list, and make a decision."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Step 5a. If the same subject as _second_ subject in Step 4, system will append the content of subject of _second_ subject into the _fourth_ student."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Step 5b. If there is no subject same as _second_ subject in Step 4, system will add the _second_ subject as a new subject under the _fourth_ student."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The process is described with sequence diagram below:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "image::CopySubSequenceDiagrams.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Add / Delete Subject"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "The add / delete subject mechanism is facilitated with `AddressBookParser`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Classes related to the functionality of the mechanism are listed below:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `AddressBookParser` -- Creates a `AddSubCommandParser` / `DeleteSubCommandParser` object and parses the user\u0027s input."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `AddSubCommandParser` / `DeleteSubCommandParser` -- Analyses user input to create a corresponding `Command` object."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `AddSubCommand` / `DeleteSubCommand` -- Execution results in addition / deletion of a subject for a specified student index."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Given below is an example usage scenario of how the add / delete subject mechanism behaves at each step."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Add Subject"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 2. The tutor executes a command of the format `addsub STUDENT_INDEX s/SUBJECT` on the CLI."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 3. The arguments are parsed by `AddSubCommandParser`, which produces an instance of `AddSubCommand`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 4. `AddSubCommand.execute()` is called, and the supplied subject is added for the student at the specified student index by TutorHelper."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Delete Subject"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 2. The tutor executes a command of the format `deletesub STUDENT_INDEX SUBJECT_INDEX` on the CLI."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 3. The arguments are parsed by `DeleteSubCommandParser`, which produces an instance of `DeleteSubCommand`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 4. `DeleteSubCommand.execute()` is called, and the subject at the specified subject index of the student at the specified student index is deleted by TutorHelper."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "The TutorHelper has to have at least 1 student as a precondition for both `addsub` and `deletesub`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "`deletesub` requires the student at the specified student index to have at least two subjects. After deletion, a student cannot have 0 subjects."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "The following sequence diagram shows how the `addsub` operation works:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "image::AddSubSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "The following sequence diagram shows how the `deletesub` operation works:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "image::DeleteSubSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ". Subject : a branch of knowledge studied by the student"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ". Syllabus: the required topics to be covered under the subject"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 112,
      "SusterDrifter": 38,
      "ongyz": 34,
      "andlimey": 10,
      "lywjoel": 82,
      "-": 137
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d TutorHelper - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "By: `W13-4`      Since: `September 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "TutorHelper is for tutors who have trouble managing their students’ details \u0026 progress, time of tuition and their own weekly tuition schedule. This project is an all-in-one scheduler."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": ".  Download the latest version of `TutorHelper` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your TutorHelper."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/Mathematics d/Monday, 12:00pm` : adds a student named `John Doe` to the TutorHelper."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Adding a student: `add`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Adds a student to the TutorHelper +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SUBJECT... d/TUITION TIMING [t/TAG]...`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "A student can have any number of tags (including 0), and must have at least 1 subject."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01, s/Mathematics, d/Monday 6:00pm`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Listing all students : `list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Shows a list of all students in the TutorHelper. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Editing a student : `edit`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Edits an existing student in the TutorHelper. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [d/TIMING] [t/TAG]...`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Edits the student at the specified `INDEX`. The index refers to the index number shown in the displayed student list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* You can remove all the student\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Edits the phone number and email address of the 1st student to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Locating students by name: `find`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Finds students whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Students matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Returns any student having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Grouping students by tuition timing : `group`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Lists all students with the specified tuition timing. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "User can choose to group by time or day of the week. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `group TIMING`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Lists all students with the specified `TIMING`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The timing refers to either a time or day of the week."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `group Monday` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Show all classes on Monday, sorted based on timing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `group 12pm` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Show all classes at 12pm for the entire week, sorted based on timing."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `group`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Show all classes sorted based on timing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Deleting a student : `delete`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Deletes the specified student from the TutorHelper. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Deletes the student at the specified `INDEX`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Deletes the 2nd student in the TutorHelper."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Deletes the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Selecting a student : `select`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Selects the student identified by the index number used in the displayed student list. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Selects the student and displays the information of the student at the specified `INDEX`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Selects the 2nd student in the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Selects the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit`, `clear`, `appendsyll`, `erasesyll`, and `copysub`)."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Clears all student records from the TutorHelper. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Keeping track of payments : `paid`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Records a payment of a specified amount made by a specified student for a specified month and year. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `paid STUDENT_INDEX AMOUNT MONTH YEAR`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Records a payment of a specified `AMOUNT` for the student at the specified `STUDENT_INDEX`, for a specified `MONTH` and `YEAR`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index, month and year *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `paid 1 200 01 2018` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "`Records $200 payment made on January 2018"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Display tutor earnings for the month : `earnings`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Display tutor earnings for the specified month of a specified year. +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `earnings MONTH YEAR`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Display tutor earnings for a specified `MONTH` of a specified `YEAR`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The month and year *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `earnings 01 2018` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "`Shows earnings made on January 2018.`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Mark a syllabus topic as complete/incomplete : `mark`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Toggle the state of a specified syllabus topic for a specified student and subject. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Format: `mark STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Toggle the state of a syllabus topic at the specified `SYLLABUS_INDEX` for a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The syllabus index refers to the index number shown in the student\u0027s list of syllabus topics for a subject."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index, subject index and syllabus index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `mark 1 1 3`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `mark 2 1 2`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Add a syllabus topic to the student’s list of syllabus topics : `appendsyll`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Add a new syllabus topic for a specified student and subject. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `appendsyll STUDENT_INDEX SUBJECT_INDEX sy/SYLLABUS`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Adding syllabus that already exist under subject will throw an error."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Adds a new syllabus topic `SYLLABUS` for a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index and subject index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `appendsyll 1 2 sy/Integration`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `appendsyll 3 2 sy/Poisson Distribution`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Remove a syllabus topic from the student’s list of syllabus topics : `erasesyll`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Remove a syllabus topic for a specified student and subject. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `erasesyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Removes a syllabus topic at the specified `SYLLABUS_INDEX` for a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The syllabus index refers to the index number shown in the student\u0027s list of syllabus topics for a subject."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index, subject index and syllabus index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `erasesyll 1 1 2`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `erasesyll 3 1 1`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Copy a subject from a student to other student(s) : `copysub`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Duplicate a subject from chosen student and add it to the target student. Duplicate syllabus will not be added. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Format: `copysub SOURCE_STUDENT_INDEX SUBJECT_INDEX TARGET_STUDENT_INDEX`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* The source and target student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* The source, target student index and subject index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `copysub 1 1 n/John Doe n/Betsy`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `copysub 1 2 n/Alex`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Add a subject to a student : `addsub`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Add a new subject to a specified student. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `addsub STUDENT_INDEX s/SUBJECT`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Adding a subject that already exists for the student will throw an error."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Adds a new subject `SUBJECT` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `addsub 1 s/Physics"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `addsub 2 s/Mathematics"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Delete a subject from a student : `deletesub`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Deletes a subject from a specified student. +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `deletesub STUDENT_INDEX SUBJECT_INDEX`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Attempting to delete the only subject left for a student will throw an error."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "A student must have at least one subject."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Deletes a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index and subject index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `deletesub 1 2`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `deletesub 3 1`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Group* : `group TIMING` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "e.g `group Monday OR group 12pm OR group`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Payment* : `paid STUDENT_INDEX AMOUNT MONTH YEAR` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    eg `paid 1 200 08 2018`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Earnings* : `earnings MONTH YEAR` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  `eg earnings 01 2018`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Mark* : `mark STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "e.g `mark 1 1 1`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Add Syllabus Topic* : `appendsyll STUDENT_INDEX SUBJECT_INDEX sy/SYLLABUS` +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "e.g `appendsyll 1 2 sy/Integration`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Remove Syllabus Topic* : `erasesyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "e.g `erasesyll 1 1 1`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Copy Subject* : `copysub SOURCE_STUDENT_INDEX SUBJECT_INDEX TARGET_STUDENT_INDEX` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "e.g `copysub 1 1 2`"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 4,
      "SusterDrifter": 71,
      "andlimey": 2,
      "lywjoel": 148,
      "-": 214
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private String appTitle \u003d \"TutorHelper\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"Payment entry has been recorded before\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if the {@code word} contains the substring {@code toSearch}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *   Ignores case, only a partial word match is required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *       containsSubWordIgnoreCase(\"ABcDef\", \"cd\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *       containsSubWordIgnoreCase(\"ABcdEf\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *       containsSubWordIgnoreCase(\"Abd\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param word cannot be null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param toSearch cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static boolean containsSubstringIgnoreCase(String word, String toSearch) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(toSearch);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String preppedToSearch \u003d toSearch.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(!preppedToSearch.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(preppedToSearch.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Pattern.compile(Pattern.quote(toSearch), Pattern.CASE_INSENSITIVE).matcher(word).find();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 23,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Adds a student to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + PREFIX_DAY_AND_TIME + \"TUITION TIMING \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + PREFIX_SUBJECT + \"Mathematics \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_DAY_AND_TIME + \"Monday 6:00pm \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "andlimey": 3,
      "lywjoel": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddSubCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Adds a subject for a student in the TutorHelper."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class AddSubCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addsub\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a subject for a student in the TutorHelper. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"STUDENT_INDEX \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_SUBJECT + \"Physics \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_ADDSUB_SUCCESS \u003d \"Added subject to student: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUBJECT \u003d \"Subject is already taken by student: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Subject subject;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public AddSubCommand(Index studentIndex, Subject subject) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Person studentTarget \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d addSubjectTo(studentTarget, subject);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Person updatedStudent \u003d SubjectsUtil.createPersonWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updatePerson(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADDSUB_SUCCESS, studentTarget));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Add a subject to a student."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param studentTarget The student to add the subject to."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param subject The subject to add to the student."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return A new {@code Set\u003cSubject\u003e} with the specified subject added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Set\u003cSubject\u003e addSubjectTo(Person studentTarget, Subject subject)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (subjects.contains(subject)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_SUBJECT, studentTarget));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e updatedSubjects \u003d subjects;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        updatedSubjects.add(subject);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                || (other instanceof AddSubCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((AddSubCommand) other).studentIndex))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 subject.equals(((AddSubCommand) other).subject); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the format of the AddSub Command."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static class AddSubFormatChecker {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int STUDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AppendSyllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SYLLABUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Appends a syllabus topic to a specified subject for a specified student in the TutorHelper."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class AppendSyllCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"appendsyll\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the syllabus of the person identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"by the student index number used in the displayed person list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Parameters: STUDENT_INDEX SUBJECT_INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"\" + PREFIX_SYLLABUS + \"SYLLABUS\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1 \" + PREFIX_SYLLABUS + \"Integration\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_APPENDSYLL_SUCCESS \u003d \"Added syllabus to Person: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SYLLABUS \u003d \"Syllabus is already in Person: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index personIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Syllabus syllabus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public AppendSyllCommand(Index personIndex, Index subjectIndex, Syllabus syllabus) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabus \u003d syllabus;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personTarget \u003d lastShownList.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e addedSubjectContent \u003d addSubjectContentTo(personTarget, subjectIndex, syllabus);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personSubjUpdated \u003d SubjectsUtil.createPersonWithNewSubjects(personTarget, addedSubjectContent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updatePerson(personTarget, personSubjUpdated);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_APPENDSYLL_SUCCESS, personSubjUpdated));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Add syllabus to the student."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param personTarget The student to add to."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param subjectIndex The index of subject to add to."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param syllabus The syllabus to add."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Set\u003cSubject\u003e} with the specified syllabus added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Set\u003cSubject\u003e addSubjectContentTo(Person personTarget, Index subjectIndex, Syllabus syllabus)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(personTarget.getSubjects());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject selectedSubject \u003d subjects.get(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (selectedSubject.contains(syllabus)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_SYLLABUS, personTarget));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d selectedSubject.add(syllabus);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof AppendSyllCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 personIndex.equals(((AppendSyllCommand) other).personIndex))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabus.equals(((AppendSyllCommand) other).syllabus); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the details of the AppendSyll command format."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static class AppendSyllFormatChecker {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int PERSON_INDEX \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 2;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 98,
      "lywjoel": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CopySubCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Finds all persons whose name matches the keyword and add the to do element to the data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Find is case-insensitive."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class CopySubCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copysub\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Copy the identified subject of the student identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"by the source student index given into the person identified by the target student index\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"New values will be appended into the old syllabus if the subject already exist.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Parameters: SOURCE_STUDENT_INDEX SUBJECT_INDEX TARGET_STUDENT_INDEX\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"1 2 4\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_COPYSUB_SUCCESS \u003d \"Copied syllabus to Person: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index sourcePersonIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index targetPersonIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CopySubCommand(Index sourcePersonIndex, Index subjectIndex, Index targetPersonIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.sourcePersonIndex \u003d sourcePersonIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.targetPersonIndex \u003d targetPersonIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (sourcePersonIndex.getZeroBased() \u003e\u003d lastShownList.size()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            || targetPersonIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personSource \u003d lastShownList.get(sourcePersonIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personTarget \u003d lastShownList.get(targetPersonIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject selectedSubject \u003d SubjectsUtil.copySubjectFrom(personSource, subjectIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e updatedSubjects \u003d updateSubjectsFor(personTarget, selectedSubject);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personUpdated \u003d SubjectsUtil.createPersonWithNewSubjects(personTarget, updatedSubjects);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updatePerson(personTarget, personUpdated);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COPYSUB_SUCCESS, personUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Add subject into personTarget. If personTarget already has the same subject, append the content"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param personTarget the person to be updated"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param newSubject the subject to be added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Set\u003cSubject\u003e} with updated subjects"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Set\u003cSubject\u003e updateSubjectsFor(Person personTarget, Subject newSubject) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSubject\u003e targetSubjects \u003d new ArrayList\u003c\u003e(personTarget.getSubjects());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (SubjectsUtil.hasSubject(personTarget, newSubject.getSubjectType())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Index index \u003d SubjectsUtil.findSubjectIndex(personTarget, newSubject.getSubjectType()).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Subject updatedSubject \u003d targetSubjects.get(index.getZeroBased())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                                   .append(newSubject.getSubjectContent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            targetSubjects.set(index.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            targetSubjects.add(newSubject);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new HashSet\u003c\u003e(targetSubjects);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof CopySubCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 sourcePersonIndex.equals(((CopySubCommand) other).sourcePersonIndex)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 targetPersonIndex.equals(((CopySubCommand) other).targetPersonIndex)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 subjectIndex.equals(((CopySubCommand) other).subjectIndex));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**cop"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Stores the details of copysyll command format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static class CopySubFormatChecker {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SOURCE_PERSON_INDEX \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int TARGET_PERSON_INDEX \u003d 2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 3;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteSubCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Deletes a subject for a student in the TutorHelper."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class DeleteSubCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletesub\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a subject for a student in the TutorHelper. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"STUDENT_INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SUBJECT_INDEX\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DELETESUB_SUCCESS \u003d \"Deleted subject from student: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DELETE_ONLY_SUBJECT \u003d \"At least one subject must be studied by student: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_SUBJECT_INDEX_OUT_OF_BOUNDS \u003d \"Subject does not exist.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public DeleteSubCommand(Index studentIndex, Index subjectIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Person studentTarget \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d removeSubjectFrom(studentTarget);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Person updatedStudent \u003d SubjectsUtil.createPersonWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updatePerson(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETESUB_SUCCESS, studentTarget));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Deletes a subject from a student."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param studentTarget The student to add the subject to."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return A new {@code Set\u003cSubject\u003e} without the subject."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Set\u003cSubject\u003e removeSubjectFrom(Person studentTarget)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (isSubjectIndexOutOfBounds(subjects)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(MESSAGE_SUBJECT_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (hasOneSubject(subjects)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DELETE_ONLY_SUBJECT, studentTarget));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e updatedSubjects \u003d subjects;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        updatedSubjects.remove(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private boolean isSubjectIndexOutOfBounds(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return subjectIndex.getOneBased() \u003e subjects.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private boolean hasOneSubject(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return subjects.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                || (other instanceof DeleteSubCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((DeleteSubCommand) other).studentIndex))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 subjectIndex.equals(((DeleteSubCommand) other).subjectIndex); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the format of the AddSub Command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static class DeleteSubFormatChecker {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int STUDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 2;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EarningsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Displays earning of the month, year."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class EarningsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"earnings\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \": Shows earnings of the month\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \"MONTH YEAR \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 08 2018 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int earnings \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public EarningsCommand(int month, int year) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            List\u003cPayment\u003e personPaymentsList \u003d lastShownList.get(i).getPayments();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            for (int j \u003d 0; j \u003c personPaymentsList.size(); j++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Payment thisPayment \u003d personPaymentsList.get(j);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                if (thisPayment.getMonth() \u003d\u003d this.month \u0026\u0026 thisPayment.getYear() \u003d\u003d this.year) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    this.earnings +\u003d (thisPayment.getAmount());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return new CommandResult(\"Earnings: $\" + String.valueOf(earnings));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 46,
      "lywjoel": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"[\" + PREFIX_SUBJECT + \"SUBJECT]... \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"[\" + PREFIX_DAY_AND_TIME + \"TUITION TIMING] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e updatedSubject \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTiming updatedTuitionTiming \u003d editPersonDescriptor.getTuitionTiming()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                .orElse(personToEdit.getTuitionTiming());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPayment\u003e updatedPayments \u003d editPersonDescriptor.getPayments().orElse(personToEdit.getPayments());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                updatedAddress, updatedSubject, updatedTuitionTiming, updatedTags, updatedPayments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field subjectName will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * corresponding field subjectName of the person."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        private Set\u003cSubject\u003e subjects;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        private TuitionTiming tuitionTiming;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        private List\u003cPayment\u003e payments;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            setSubjects(toCopy.subjects);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            setTuitionTiming(toCopy.tuitionTiming);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            setPayments(toCopy.payments);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, subjects);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void setSubjects(Set\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            this.subjects \u003d (subjects !\u003d null) ? new HashSet\u003c\u003e(subjects) : null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public Optional\u003cSet\u003cSubject\u003e\u003e getSubjects() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return (subjects !\u003d null) ? Optional.of(Collections.unmodifiableSet(subjects)) : Optional.empty();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        public void setTuitionTiming(TuitionTiming tuitionTiming) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            this.tuitionTiming \u003d tuitionTiming;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        public Optional\u003cTuitionTiming\u003e getTuitionTiming() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return Optional.ofNullable(tuitionTiming);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * Sets {@code payment} to this object\u0027s {@code payments}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * A defensive copy of {@code payments} is used internally."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void setPayments(List\u003cPayment\u003e payments) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            this.payments \u003d (payments !\u003d null) ? new ArrayList\u003c\u003e(payments) : null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public Optional\u003cList\u003cPayment\u003e\u003e getPayments() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return (payments !\u003d null) ? Optional.of(Collections.unmodifiableList(payments)) : Optional.empty();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u0026\u0026 getSubjects().equals(e.getSubjects())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    \u0026\u0026 getTuitionTiming().equals(e.getTuitionTiming())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u0026\u0026 getPayments().equals(e.getPayments());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 40,
      "andlimey": 19,
      "lywjoel": 1,
      "-": 223
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EraseSyllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Removes a syllabus topic from a specified subject for a specified student."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class EraseSyllCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"erasesyll\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes the selected syllabus of the \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"person identified by the syllabus index number in the selected student\u0027s subject.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Parameters: STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1 2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_ERASESYLL_SUCCESS \u003d \"Removed selected syllabus from Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_ERASESYLL_FAILED \u003d \"Syllabus does not exist.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index personIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index syllabusIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public EraseSyllCommand(Index personIndex, Index subjectIndex, Index syllabusIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabusIndex \u003d syllabusIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personTarget \u003d lastShownList.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e removedSubjectContent \u003d removeSubjectContentFrom(personTarget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personSubjUpdated \u003d SubjectsUtil.createPersonWithNewSubjects(personTarget, removedSubjectContent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updatePerson(personTarget, personSubjUpdated);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ERASESYLL_SUCCESS, personSubjUpdated));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Removes syllabus topic from the specified student."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param personTarget The student to remove from."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Set\u003cSubject\u003e} with the specified syllabus removed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if the index to remove from is invalid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Set\u003cSubject\u003e removeSubjectContentFrom(Person personTarget) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d personTarget.getSubjects().stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (hasExceededNumberOfSubjects(subjects)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || hasExceededNumberOfSyllabus(subjects.get(subjectIndex.getZeroBased()))) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(MESSAGE_ERASESYLL_FAILED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).remove(syllabusIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean hasExceededNumberOfSubjects(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectIndex.getOneBased() \u003e subjects.size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean hasExceededNumberOfSyllabus(Subject subject) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabusIndex.getOneBased() \u003e subject.getSubjectContent().size();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof EraseSyllCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 personIndex.equals(((EraseSyllCommand) other).personIndex))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabusIndex.equals(((EraseSyllCommand) other).subjectIndex)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabusIndex.equals(((EraseSyllCommand) other).syllabusIndex); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Stores the details of rmtodo command format."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static class EraseSyllFormatChecker {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int PERSON_INDEX \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SYLLABUS_INDEX \u003d 2;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 3;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 106,
      "lywjoel": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTimingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": " * Groups the students in TutorHelper based on their tuition timings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class GroupCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"group\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Groups all students based on the specified DAY \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + \"or TIME and displays them as a list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + \"The input can also be null and the students will be grouped according to the current day and time.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Examples: \\n\" + COMMAND_WORD + \" Monday\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + COMMAND_WORD + \" 12:00pm\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Grouped all students\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final TuitionTimingContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final boolean isDay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final boolean isTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public GroupCommand(TuitionTimingContainsKeywordsPredicate predicate, boolean isDayRegex, boolean isTimeRegex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.isDay \u003d isDayRegex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.isTime \u003d isTimeRegex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (this.isDay) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            model.sortByTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } else if (this.isTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            model.sortByDay();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 19,
      "andlimey": 37,
      "lywjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Finds all persons whose name matches the keyword and add the to do element to the data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Find is case-insensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class MarkCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles the selected syllabus of the \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"person identified by the index number used in the displayed person list. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Parameters: STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1 2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_MARK_SUCCESS \u003d \"Changed selected syllabus from Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_MARK_FAILED \u003d \"Syllabus does not exist.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index personIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index syllabusIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public MarkCommand(Index personIndex, Index subjectIndex, Index syllabusIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabusIndex \u003d syllabusIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personTarget \u003d lastShownList.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e updatedSubjectContent \u003d markSubjectContentFrom(personTarget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personSubjUpdated \u003d new Person(personTarget.getName(), personTarget.getPhone(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                personTarget.getEmail(), personTarget.getAddress(), updatedSubjectContent,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                personTarget.getTuitionTiming(), personTarget.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updatePerson(personTarget, personSubjUpdated);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_SUCCESS, personSubjUpdated));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns a new {@code Set\u003cSubject\u003e} with the syllabus state changed from the person specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param personTarget the person to change syllabus from"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Set\u003cSubject\u003e} with the specified syllabus state changed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if the index to remove from is invalid"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Set\u003cSubject\u003e markSubjectContentFrom(Person personTarget)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d personTarget.getSubjects().stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (hasExceededNumberOfSubjects(subjects)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || hasExceededNumberOfSyllabus(subjects.get(subjectIndex.getZeroBased()))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(MESSAGE_MARK_FAILED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).toggleState(syllabusIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean hasExceededNumberOfSubjects(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectIndex.getOneBased() \u003e subjects.size();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean hasExceededNumberOfSyllabus(Subject subject) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabusIndex.getOneBased() \u003e subject.getSubjectContent().size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof MarkCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 personIndex.equals(((MarkCommand) other).personIndex))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabusIndex.equals(((MarkCommand) other).subjectIndex)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabusIndex.equals(((MarkCommand) other).syllabusIndex); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Stores the details of rmtodo command format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static class MarkFormatChecker {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int PERSON_INDEX_LOCATION \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SUBJECT_INDEX_LOCATION \u003d 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SYLLABUS_INDEX_LOCATION \u003d 2;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int MARK_NUMBER_OF_ARGS \u003d 3;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PayCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Add payment details of an existing person in the TutorHelper."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class PayCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"paid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \": Updates if a person has paid.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"INDEX AMOUNT MONTH YEAR \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 200 08 2018 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_PAYMENT_SUCCESS \u003d \"Payment for this person is added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Payment newPayment;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public PayCommand(Payment payment) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.targetIndex \u003d payment.getIndex();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.newPayment \u003d payment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        boolean newEntry \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personTarget \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cPayment\u003e pay \u003d personTarget.getPayments();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        newEntry \u003d findPaymentToUpdate(pay, newPayment);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (!newEntry) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            if (pay.size() \u003e 10) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                pay.remove(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            pay \u003d updatePayment(personTarget.getPayments(), newPayment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            pay \u003d editPaymentField(pay, newPayment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person personToPay \u003d new Person(personTarget.getName(), personTarget.getPhone(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                personTarget.getEmail(), personTarget.getAddress(), personTarget.getSubjects(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                personTarget.getTuitionTiming(), personTarget.getTags(), pay);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updatePerson(personTarget, personToPay);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_PAYMENT_SUCCESS, personToPay));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Update payment for this person and returns a new instance of this person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return the same person but updated with payment."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public List\u003cPayment\u003e updatePayment(List\u003cPayment\u003e oldPayments, Payment newPayment) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPayment\u003e updatedPayment \u003d new ArrayList\u003c\u003e(oldPayments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        updatedPayment.add(newPayment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return updatedPayment;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Checks if person to edit has the payment field."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param payments the list of payment to check for entry with same details."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param toFind the payment entry to edit."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @return true if payment field has already existed; false otherwise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private boolean findPaymentToUpdate(List\u003cPayment\u003e payments, Payment toFind) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        for (int i \u003d 0; i \u003c payments.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            if (payments.get(i).getMonth() \u003d\u003d toFind.getMonth() \u0026\u0026 payments.get(i).getYear() \u003d\u003d toFind.getYear()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Updates payment field in list of payments."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param payments the list of payment to check for entry with same details."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param toFind the payment entry to edit."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @return the edited list of payments."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private List\u003cPayment\u003e editPaymentField(List\u003cPayment\u003e payments, Payment toFind) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        for (int i \u003d 0; i \u003c payments.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            if (payments.get(i).getMonth() \u003d\u003d toFind.getMonth() \u0026\u0026 payments.get(i).getYear() \u003d\u003d toFind.getYear()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                payments.set(i, new Payment(payments.get(i), toFind.getAmount()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return payments;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!(other instanceof PayCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand e \u003d (PayCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                \u0026\u0026 newPayment.equals(e.newPayment);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 24,
      "SusterDrifter": 62,
      "ongyz": 40,
      "lywjoel": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_SUBJECT, PREFIX_DAY_AND_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_SUBJECT, PREFIX_DAY_AND_TIME)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e subjects \u003d ParserUtil.parseSubjects(argMultimap.getAllValues(PREFIX_SUBJECT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        TuitionTiming tuitionTiming \u003d ParserUtil.parseTuitionTiming((argMultimap.getValue(PREFIX_DAY_AND_TIME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, subjects, tuitionTiming, tagList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 7,
      "andlimey": 3,
      "lywjoel": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddSubCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.AddSubCommand.AddSubFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.AddSubCommand.AddSubFormatChecker.STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.AddSubCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Parses user arguments and creates a new AddSubCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class AddSubCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSubCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * and returns an AddSubCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public AddSubCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentIndex \u003d getStudentIndex(indexList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SUBJECT).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new AddSubCommand(studentIndex, subject);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(STUDENT_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.AddSubCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.AppendSyllCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.CopySubCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteSubCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.EarningsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.EraseSyllCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case PayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new PayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        case EarningsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return new EarningsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case AppendSyllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new AppendSyllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case EraseSyllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new EraseSyllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case MarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new MarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case CopySubCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new CopySubCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        case GroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return new GroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        case AddSubCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            return new AddSubCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        case DeleteSubCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            return new DeleteSubCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 5,
      "SusterDrifter": 20,
      "andlimey": 4,
      "lywjoel": 8,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AppendSyllCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.AppendSyllCommand.AppendSyllFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.AppendSyllCommand.AppendSyllFormatChecker.PERSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.AppendSyllCommand.AppendSyllFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SYLLABUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.AppendSyllCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Parses input arguments and creates a new AppendSyllCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class AppendSyllCommandParser implements Parser\u003cAppendSyllCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AppendSyllCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AppendSyllCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public AppendSyllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SYLLABUS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index personIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AppendSyllCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AppendSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        personIndex \u003d getPersonIndex(indexList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SYLLABUS).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AppendSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabus \u003d ParserUtil.parseSyllabus(argMultimap.getValue(PREFIX_SYLLABUS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new AppendSyllCommand(personIndex, subjectIndex, syllabus);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getPersonIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(PERSON_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 65,
      "lywjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * i.e. the same argument subjectName"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Associates the specified argument subjectName with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * If the map previously contained a mapping for the key, the new subjectName is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument subjectName is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param argValue Argument subjectName to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns the last subjectName of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 8,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003esubjectName \u003cprefix\u003esubjectName ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * 1. An argument\u0027s subjectName can be an empty string e.g. the subjectName of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument subjectName will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the subjectName of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003esubjectName \u003cprefix\u003esubjectName ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003esubjectName \u003cprefix\u003esubjectName ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003esubjectName \u003cprefix\u003esubjectName ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns the trimmed subjectName of the argument in the arguments string specified"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * by {@code currentPrefixPosition}. The end position of the subjectName is determined"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 10,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Prefix PREFIX_DAY_AND_TIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Prefix PREFIX_SYLLABUS \u003d new Prefix(\"sy/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "andlimey": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CopySubCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.CopySubFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.CopySubFormatChecker.SOURCE_PERSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.CopySubFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.CopySubFormatChecker.TARGET_PERSON_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.CopySubCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new Appemark ndSyllCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class CopySubCommandParser implements Parser\u003cCopySubCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AppendSyllCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AppendSyllCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CopySubCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index sourcePersonIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index targetPersonIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        sourcePersonIndex \u003d getSourcePersonIndex(indexList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        targetPersonIndex \u003d getTargetPersonIndex(indexList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new CopySubCommand(sourcePersonIndex, subjectIndex, targetPersonIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSourcePersonIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SOURCE_PERSON_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getTargetPersonIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(TARGET_PERSON_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteSubCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSubCommand.DeleteSubFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSubCommand.DeleteSubFormatChecker.STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSubCommand.DeleteSubFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteSubCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Parses user arguments and creates a new DeleteSubCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class DeleteSubCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteSubCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * and returns an DeleteSubCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public DeleteSubCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSubCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentIndex \u003d getStudentIndex(indexList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new DeleteSubCommand(studentIndex, subjectIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(STUDENT_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EarningsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.EarningsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Parses input arguments and creates a new EarningsCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class EarningsCommandParser implements Parser\u003cEarningsCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public EarningsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String trimmedEarnings \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String[] separatedEarnings \u003d trimmedEarnings.split(\"\\\\s\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            if (separatedEarnings.length !\u003d 2) { //invalid number of fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String inputMonth \u003d separatedEarnings[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String inputYear \u003d separatedEarnings[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            //Put the arguments into ParserUtil to check for validity"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.month \u003d ParserUtil.parseMonth(inputMonth);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.year \u003d ParserUtil.parseYear(inputYear);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return new EarningsCommand(month, year);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 35,
      "lywjoel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_SUBJECT, PREFIX_DAY_AND_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DAY_AND_TIME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            editPersonDescriptor.setTuitionTiming("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    ParserUtil.parseTuitionTiming(argMultimap.getValue(PREFIX_DAY_AND_TIME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        parseSubjectsForEdit(argMultimap.getAllValues(PREFIX_SUBJECT)).ifPresent(editPersonDescriptor::setSubjects);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e subjects} into a {@code Set\u003cSubject\u003e} if {@code subjects} is non-empty."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * If {@code subjects} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * {@code Set\u003cSubject\u003e} containing zero tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Optional\u003cSet\u003cSubject\u003e\u003e parseSubjectsForEdit(Collection\u003cString\u003e subjects) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assert subjects !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (subjects.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Collection\u003cString\u003e subjectSet \u003d subjects.size() \u003d\u003d 1 \u0026\u0026 subjects.contains(\"\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                ? Collections.emptySet() : subjects;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Optional.of(ParserUtil.parseSubjects(subjectSet));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 24,
      "andlimey": 4,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EraseSyllCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.EraseSyllCommand.EraseSyllFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.EraseSyllCommand.EraseSyllFormatChecker.PERSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.EraseSyllCommand.EraseSyllFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.EraseSyllCommand.EraseSyllFormatChecker.SYLLABUS_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.EraseSyllCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new EraseSyllCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class EraseSyllCommandParser implements Parser\u003cEraseSyllCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AppendSyllCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AppendSyllCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public EraseSyllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index personIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index syllabusIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EraseSyllCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EraseSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        personIndex \u003d getPersonIndex(indexList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabusIndex \u003d getSyllabusIndex(indexList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new EraseSyllCommand(personIndex, subjectIndex, syllabusIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getPersonIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(PERSON_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSyllabusIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTimingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": " * Parses input arguments and creates a new GroupCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class GroupCommandParser implements Parser\u003cGroupCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GroupCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * and returns an GroupCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public GroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (trimmedArgs.matches(TuitionTiming.DAY_REGEX)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return new GroupCommand("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    new TuitionTimingContainsKeywordsPredicate(trimmedArgs), true, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } else if (trimmedArgs.matches(TuitionTiming.TIME_REGEX)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return new GroupCommand("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    new TuitionTimingContainsKeywordsPredicate(trimmedArgs), false, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "andlimey": 36,
      "lywjoel": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MarkFormatChecker.MARK_NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MarkFormatChecker.PERSON_INDEX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MarkFormatChecker.SUBJECT_INDEX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MarkFormatChecker.SYLLABUS_INDEX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new MarkCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class MarkCommandParser implements Parser\u003cMarkCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AppendSyllCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AppendSyllCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public MarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index personIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index syllabusIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d MARK_NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        personIndex \u003d getPersonIndex(indexList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabusIndex \u003d getSyllabusIndex(indexList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new MarkCommand(personIndex, subjectIndex, syllabusIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getPersonIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(PERSON_INDEX_LOCATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX_LOCATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSyllabusIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SYLLABUS_INDEX_LOCATION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.SubjectType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String subject} into a {@code Subject}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code subject} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static Subject parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!SubjectType.isValidSubjectName(trimmedSubject)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Subject.makeSubject(trimmedSubject);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e subjects} into a {@code Set\u003cSubject\u003e}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Set\u003cSubject\u003e parseSubjects(Collection\u003cString\u003e subjects) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjects);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final Set\u003cSubject\u003e subjectSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (String subjectName : subjects) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            subjectSet.add(parseSubject(subjectName));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectSet;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String tuitionTiming} into a {@code TuitionTiming}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code tuitionTiming} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static TuitionTiming parseTuitionTiming(String tuitionTiming) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(tuitionTiming);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedTuitionTiming \u003d tuitionTiming.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (!TuitionTiming.isValidTiming(trimmedTuitionTiming)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(TuitionTiming.MESSAGE_TUITION_TIMING_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return new TuitionTiming(trimmedTuitionTiming);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String amount} into an integer."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code integer} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static int parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        boolean doesNotContainAllDigits \u003d false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (int i \u003d 0; i \u003c trimmedAmount.length(); i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            if (!Character.isDigit(trimmedAmount.charAt(i))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                doesNotContainAllDigits \u003d true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (doesNotContainAllDigits \u003d\u003d true) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        int integerAmount \u003d Integer.parseInt(trimmedAmount);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!Payment.isValidAmount(integerAmount)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return integerAmount;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String month} into an integer."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code integer} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static int parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        boolean doesNotContainAllDigits \u003d false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c trimmedMonth.length(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!Character.isDigit(trimmedMonth.charAt(i))) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                doesNotContainAllDigits \u003d true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (doesNotContainAllDigits \u003d\u003d true) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (!Payment.isValidMonth(Integer.parseInt(trimmedMonth))) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return Integer.parseInt(trimmedMonth);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String year} into an integer."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code integer} is invalid."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static int parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        boolean doesNotContainAllDigits \u003d false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c trimmedYear.length(); i++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!Character.isDigit(trimmedYear.charAt(i))) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                doesNotContainAllDigits \u003d true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (doesNotContainAllDigits \u003d\u003d true) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (!Payment.isValidYear(Integer.parseInt(trimmedYear))) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return Integer.parseInt(trimmedYear);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses {@code oneBasedIndexes} into a list of {@code Index} and returns it."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws ParseException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String trimmedIndexes \u003d oneBasedIndexes.trim();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String[] separatedIndexes \u003d trimmedIndexes.split(\"\\\\s\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e listIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (String indexCandidate : separatedIndexes) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            listIndexes.add(ParserUtil.parseIndex(indexCandidate));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return listIndexes;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses a {@code String syllabus} into a {@code Syllabus}."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the given {@code syllabus} input is invalid."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Syllabus parseSyllabus(String syllabus) throws ParseException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(syllabus);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String trimmedSyllabus \u003d syllabus.trim();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!Syllabus.isValidSyllabus(trimmedSyllabus)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(Syllabus.MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Syllabus(trimmedSyllabus, false);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 18,
      "SusterDrifter": 79,
      "andlimey": 71,
      "lywjoel": 1,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PayCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new PayCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class PayCommandParser implements Parser\u003cPayCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Index personIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public PayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String trimmedPayment \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String[] separatedPayment \u003d trimmedPayment.split(\"\\\\s\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            if (separatedPayment.length !\u003d 4) { //invalid number of arguments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String inputpersonIndex \u003d (separatedPayment[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String inputAmount \u003d separatedPayment[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String inputMonth \u003d separatedPayment[2];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            String inputYear \u003d separatedPayment[3];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            //Put the arguments into ParserUtil to check for validity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.personIndex \u003d ParserUtil.parseIndex(inputpersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.amount \u003d ParserUtil.parseAmount(inputAmount);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.month \u003d ParserUtil.parseMonth(inputMonth);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.year \u003d ParserUtil.parseYear(inputYear);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            //all input are valid and can be added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            Payment payment \u003d new Payment(personIndex, amount, month, year);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new PayCommand(payment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 32,
      "SusterDrifter": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Sorts the list based on day."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void sortByDay() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d persons.asModifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        personList.sort(((p1, p2) -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            int p1Day \u003d p1.getTuitionTiming().day.getValue();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            int p2Day \u003d p2.getTuitionTiming().day.getValue();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (p1Day - p2Day \u003c 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            } else if (p2Day - p1Day \u003c 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Sorts the list based on time."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void sortByTime() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d persons.asModifiableObservableList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        personList.sort((p1, p2) -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            String time1 \u003d TuitionTiming.convertTwelveHourToTwentyFourHour(p1.getTuitionTiming().time);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            String time2 \u003d TuitionTiming.convertTwelveHourToTwentyFourHour(p2.getTuitionTiming().time);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (time1.compareTo(time2) \u003c 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            } else if (time2.compareTo(time1) \u003c 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 43,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Sorts the list by day."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    void sortByDay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Sorts the list by time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    void sortByTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 11,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void sortByDay() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        versionedAddressBook.sortByDay();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void sortByTime() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        versionedAddressBook.sortByTime();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Updates the filtered persons with 2 predicates."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param predicate1 The first predicate."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param predicate2 The second predicate."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate1, Predicate\u003cPerson\u003e predicate2) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(predicate1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(predicate2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        filteredPersons.setPredicate(predicate1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        filteredPersons.setPredicate(predicate2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 8,
      "andlimey": 9,
      "lywjoel": 5,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Payment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents a payment in the TutorHelper."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * amount is valid as declared in {@link #isValidAmount(int)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * month is valid as declared in {@link #isValidMonth(int)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * year is valid as declared in {@link #isValidYear(int)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class Payment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            \"Amount of payment should only contain numbers\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_PAYMENT_MONTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            \"Month of payment should only contain numbers between 1 to 12, inclusive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_PAYMENT_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            \"Year of payment should only contain numbers\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"(.)*(\\\\d)(.)*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private int amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final int month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Constructs a {@code Payment}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @param index A valid index name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param month A valid month subjectName."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param year A valid year subjectName."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public Payment(Index index, int amount, int month, int year) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.studentIndex \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Constructs a {@code Payment} with an incremented amount."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param payment A {@code Payment}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param toAdd The amount to add."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public Payment(Payment payment, int toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.studentIndex \u003d payment.getIndex();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.month \u003d payment.getMonth();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.year \u003d payment.getYear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.amount \u003d payment.getAmount() + toAdd;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns true if a given int is a valid number."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static boolean isValidAmount(int test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return String.valueOf(test).matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns true if a given int is a valid month."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static boolean isValidMonth(int test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Check if month is within the correct range of jan - dec"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (String.valueOf(test).matches(TAG_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            int testMonth \u003d test;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            if (testMonth \u003e\u003d 1 \u0026\u0026 testMonth \u003c\u003d 12) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns true if a given int is a valid year."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static boolean isValidYear(int test) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return String.valueOf(test).matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Updates the current {@code Payment} amount to new payment amount"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param toUpdate the {@code Payment}amount to add to current amount"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void update(Payment toUpdate) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.amount +\u003d toUpdate.getAmount();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns student index"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this.studentIndex;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Return month of payment"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this.month;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns year of payment"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Return amount of payment"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int getAmount() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return \" Month: \" + month + \" Year: \" + year + \" Amount: \" + amount;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof Payment"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 this.amount \u003d\u003d (((Payment) other).amount)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 this.month \u003d\u003d (((Payment) other).month)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 this.year \u003d\u003d (((Payment) other).year));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return Objects.hash(studentIndex, amount, month, year);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "SusterDrifter": 16,
      "ongyz": 25,
      "andlimey": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final TuitionTiming tuitionTiming;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final List\u003cPayment\u003e payments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Alternate constructor for person with payment being optional."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  Set\u003cSubject\u003e subjects, TuitionTiming tuitionTiming, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this(name, phone, email, address, subjects, tuitionTiming, tags, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  Set\u003cSubject\u003e subjects, TuitionTiming tuitionTiming, Set\u003cTag\u003e tags, List\u003cPayment\u003e paymentList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, paymentList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjects.addAll(subjects);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.tuitionTiming \u003d tuitionTiming;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.payments.addAll(paymentList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public TuitionTiming getTuitionTiming() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return tuitionTiming;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public List\u003cPayment\u003e getPayments() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return payments;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Set\u003cSubject\u003e getSubjects() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Collections.unmodifiableSet(subjects);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || otherPerson.getAddress().equals(getAddress()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 otherPerson.getSubjects().equals(getSubjects())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 otherPerson.getTuitionTiming().equals(getTuitionTiming())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 otherPerson.getPayments().equals(getPayments());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Objects.hash(name, phone, email, address, subjects, tuitionTiming, tags, payments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .append(getAddress());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 3,
      "SusterDrifter": 32,
      "andlimey": 5,
      "lywjoel": 1,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns the backing list as a modifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public ObservableList\u003cPerson\u003e asModifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 8,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/subject/Subject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.EraseSyllCommand.MESSAGE_ERASESYLL_FAILED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.model.subject.SubjectType.convertStringToSubjectName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.model.subject.SubjectType.isValidSubjectName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents a Subject in the TutorHelper."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Guarantees: immutable; name is valid as declared in SubjectType.isValidSubjectName(String)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class Subject {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \"Subject name should match one of the following: \" + SubjectType.listRepresentation();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final SubjectType subjectType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final List\u003cSyllabus\u003e subjectContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final float completionRate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructor to guarantee immutability."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectType the subject type"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectContent the content of the subject"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param completionRate the completion rate of subject"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject(SubjectType subjectType, List\u003cSyllabus\u003e subjectContent, float completionRate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjectType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectType \u003d subjectType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectContent.addAll(subjectContent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.completionRate \u003d completionRate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs a new {@code Subject} from {@code String subjectName}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectName Subjects that the student is taking."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Subject makeSubject(String subjectName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjectName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(isValidSubjectName(subjectName), MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d new Subject(convertStringToSubjectName(subjectName), new ArrayList\u003c\u003e(), 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns subjectType as {@code SubjectType}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public SubjectType getSubjectType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns subjectType in string in {@code String}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public String getSubjectName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectType.stringRepresentation;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public List\u003cSyllabus\u003e getSubjectContent() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectContent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public float getCompletionRate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return completionRate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        builder.append(\"\\n[\" + getSubjectName() + \": \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index numbering;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c getSubjectContent().size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            numbering \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            builder.append(\"\\n\" + numbering.getOneBased() + \". \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    .append(getSubjectContent().get(i).toString()).append(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        builder.append(\"]\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if both subjects have the same {@code SubjectType} and content"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                || (other instanceof Subject // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 subjectType.equals(((Subject) other).subjectType)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 contentAreSame((Subject) other)); // content check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if both subjects have the same content"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean contentAreSame(Subject other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (getSubjectContent().size() !\u003d other.getSubjectContent().size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for(int i \u003d 0; i \u003c getSubjectContent().size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!getSubjectContent().get(i).equals(other.getSubjectContent().get(i))) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if both subjects have the same {@code SubjectType}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Defines a weaker notion of equal for class {@code Subject}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean hasTypeOf(SubjectType other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return getSubjectType().equals(other);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectType.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Add a {@code Syllabus} to the current subject and returns"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * a new {@code Subject} containing the newly added syllabus."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabus the {@code Syllabus} to be added"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} containing the newly added syllabus"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject add(Syllabus syllabus) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        newSubjectContent.add(syllabus);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Removes a {@code Syllabus} from the current subject and returns"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * a new {@code Subject} with the syllabus at given index removed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param index the index of syllabus to be removed"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} with the syllabus at given index removed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if {@code index} is out of bound of the subjectContent."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject remove(Index index) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (index.getOneBased() \u003e getSubjectContent().size()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(MESSAGE_ERASESYLL_FAILED);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        newSubjectContent.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Append a {@code List\u003cSyllabus\u003e} to the current subject and returns"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * a new {@code Subject} containing the newly added syllabus list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabusList the {@code List\u003cSyllabus\u003e} to be added"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} containing the newly added syllabus list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject append(List\u003cSyllabus\u003e syllabusList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (Syllabus newSyllabus: syllabusList) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!newSubjectContent.contains(newSyllabus)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                newSubjectContent.add(newSyllabus);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean contains(Syllabus syllabus) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return getSubjectContent().contains(syllabus);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Return a new {@code Subject} with the state of the syllabus"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * identified by the {@code Index index} flipped."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param index the index of syllabus"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return new {@code Subject} with the changed syllabus"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if index is out of bound of the subjectContent list"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject toggleState(Index index) throws CommandException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (index.getOneBased() \u003e getSubjectContent().size()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(MESSAGE_ERASESYLL_FAILED);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus oldSyllabus \u003d newSubjectContent.get(index.getZeroBased());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus newSyllabus \u003d new Syllabus(oldSyllabus.syllabus, !oldSyllabus.state);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        newSubjectContent.set(index.getZeroBased(), newSyllabus);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Recalculate the completion rate of the subject."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} with updated completion rate."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject updateCompletionRate() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        int subjectContentLength \u003d getSubjectContent().size();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        int numOfSyllabusCompleted \u003d 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (Syllabus syllabus: getSubjectContent()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (syllabus.state) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                numOfSyllabusCompleted++;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        float completionRate \u003d (float) numOfSyllabusCompleted / subjectContentLength;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), getSubjectContent(), completionRate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 192,
      "andlimey": 24,
      "lywjoel": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/subject/SubjectType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents the subject name of Subjects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public enum SubjectType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Mathematics(\"Mathematics\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Biology(\"Biology\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Chemistry(\"Chemistry\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Physics(\"Physics\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Economics(\"Economics\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Geography(\"Geography\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    History(\"History\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public final String stringRepresentation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    SubjectType(String stringRepresentation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.stringRepresentation \u003d stringRepresentation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Stream\u003cSubjectType\u003e stream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Stream.of(SubjectType.values());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns the string representation of the whole subject types."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static String listRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Arrays.stream(values()).forEach(subjectEnum -\u003e builder.append(subjectEnum.stringRepresentation + \" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts {@code subjectName} to its equivalent {@code SubjectType}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectName the string representation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return the equivalent {@code SubjectType}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static SubjectType convertStringToSubjectName(String subjectName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjectName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType result \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (SubjectType subjectEnum : values()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (StringUtil.containsSubstringIgnoreCase(subjectEnum.toString(), subjectName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                result \u003d subjectEnum;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if a given string is a valid subject."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static boolean isValidSubjectName(String test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return SubjectType.stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .anyMatch(subjectEnum -\u003e StringUtil.containsSubstringIgnoreCase(subjectEnum.toString(), test));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return stringRepresentation;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/subject/Syllabus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents a Person\u0027s syllabus in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSyllabus(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class Syllabus {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_SYLLABUS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \"Syllabus can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String SYLLABUS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public final String syllabus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public final boolean state;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructor to facilitate immutability."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabus A valid syllabus."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Syllabus(String syllabus, boolean state) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(syllabus);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(isValidSyllabus(syllabus), MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabus \u003d syllabus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Construct a {@code Syllabus} from the {@code String syllabusName}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabusName"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Syllabus}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Syllabus makeSyllabus(String syllabusName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(isValidSyllabus(syllabusName), MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabus \u003d new Syllabus(syllabusName, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static boolean isValidSyllabus(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return test.matches(SYLLABUS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String marked \u003d state ? \"X\" : \" \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabus + \"   [\" + marked + \"]\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof Syllabus // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabus.equals(((Syllabus) other).syllabus)); //content check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabus.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tuitiontiming/TuitionTiming.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.tuitiontiming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents tuition timing in TutorHelper."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTiming(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class TuitionTiming {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_TUITION_TIMING_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            \"Tuition Day and Time should not be blank and should be in the format:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"1) Day, Time\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"2) Day Time\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Examples of Valid Input:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Monday, 1:00pm\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Tuesday 1:15AM\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Wednesday, 12:30pm\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String DAY_REGEX \u003d \"^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String TIME_REGEX \u003d \"\\\\d{1,2}[:{1}]\\\\d{2}(am|pm|AM|PM)$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * The first character of the tuition time and day must not be a whitespace,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String TUITION_TIMING_VALIDATION_REGEX \u003d DAY_REGEX + \".{1,2}\" + TIME_REGEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public final DayOfWeek day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public final String time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private String dayString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private String timeString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Constructs an {@code TuitionTiming}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @param tuitionTiming A valid tuition time and day."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public TuitionTiming(String tuitionTiming) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(tuitionTiming);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(isValidTiming(tuitionTiming), MESSAGE_TUITION_TIMING_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        splitTuitionTiming(tuitionTiming);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // this.day and this.time used for comparison purposes for Group Command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.day \u003d DayOfWeek.valueOf(dayString.toUpperCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.time \u003d timeString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        value \u003d tuitionTiming;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Splits the {@code tuitionTiming} string into Day and Time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private void splitTuitionTiming(String tuitionTiming) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        tuitionTiming \u003d tuitionTiming.replace(\",\", \" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String[] tuitionTimingArr \u003d tuitionTiming.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        dayString \u003d tuitionTimingArr[0].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        timeString \u003d tuitionTimingArr[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Converts the 12hours time into 24hours time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @param time Time in hh:mm format. E.g. 12:00pm."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a 24hour version of {@code time}. E.g. 1:00pm converts to 13:00."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static String convertTwelveHourToTwentyFourHour(String time) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String newTime \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        SimpleDateFormat timeIn12Hour \u003d new SimpleDateFormat(\"hh:mmaa\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        SimpleDateFormat timeIn24Hour \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            newTime \u003d timeIn24Hour.format(timeIn12Hour.parse(time));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return newTime;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns true if a given string is a valid time and day"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static boolean isValidTiming(String test) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return test.matches(TUITION_TIMING_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                || (other instanceof TuitionTiming // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 value.equals(((TuitionTiming) other).value)); // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 13,
      "ongyz": 2,
      "andlimey": 88,
      "lywjoel": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tuitiontiming/TuitionTimingContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.tuitiontiming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class TuitionTimingContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final String keyword; //note that keyword is capitalised for day."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public TuitionTimingContainsKeywordsPredicate(String keyword) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        DayOfWeek day \u003d person.getTuitionTiming().day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String time \u003d person.getTuitionTiming().time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if ((keyword.toLowerCase()).matches((TuitionTiming.DAY_REGEX).toLowerCase())) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return day.equals(DayOfWeek.valueOf(keyword.toUpperCase()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } else if ((keyword.toLowerCase()).matches((TuitionTiming.TIME_REGEX).toLowerCase())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return StringUtil.containsWordIgnoreCase(time, keyword);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                || (other instanceof TuitionTimingContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 keyword.equals(((TuitionTimingContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 3,
      "andlimey": 35,
      "lywjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), getSubjectSet(\"Mathematics\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Monday 6:00pm\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), getSubjectSet(\"Economics\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Friday 5:30pm\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), getSubjectSet(\"Chemistry\", \"Mathematics\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Tuesday 6:00pm\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), getSubjectSet(\"Mathematics\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Wednesday 7:00pm\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), getSubjectSet(\"Physics\", \"Biology\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Thursday 3:00pm\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), getSubjectSet(\"Chemistry\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Saturday 10:00am\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns a subject set containing the list of strings given."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Set\u003cSubject\u003e getSubjectSet(String... strings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .map(Subject::makeSubject)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 16,
      "andlimey": 6,
      "lywjoel": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SubjectsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.SubjectType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Contains utility methods for managing list of subjects of a {@code Person}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SubjectsUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns a copy {@code Subject} specified by {@code subjectIndex} from {@code Person}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Subject copySubjectFrom(Person person, Index subjectIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSubject\u003e sourceSubjects \u003d new ArrayList\u003c\u003e(person.getSubjects());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject selectedSubject \u003d sourceSubjects.get(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject copiedSubject \u003d new Subject(selectedSubject.getSubjectType(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new ArrayList\u003c\u003e(selectedSubject.getSubjectContent()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                selectedSubject.getCompletionRate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return copiedSubject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if {@code Person} has the same subject type as {@code SubjectType}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static boolean hasSubject(Person person, SubjectType type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return person.getSubjects().stream().anyMatch(subject -\u003e subject.hasTypeOf(type));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns an {@code Optional\u003cSubject\u003e} of the same given type from person"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Optional\u003cIndex\u003e findSubjectIndex(Person person, SubjectType type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Optional\u003cIndex\u003e index \u003d Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSubject\u003e subjectList \u003d new ArrayList\u003c\u003e(person.getSubjects());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c subjectList.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Subject subject \u003d subjectList.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (subject.hasTypeOf(type)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                index \u003d Optional.of(Index.fromZeroBased(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code Person source}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * with the updated {@code Set\u003cSubject\u003e subjects}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param source the person to be updated"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjects the updated subjects"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Person} with updated subjects"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Person createPersonWithNewSubjects(Person source, Set\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Person(source.getName(), source.getPhone(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                source.getEmail(), source.getAddress(), subjects,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                source.getTuitionTiming(), source.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * JAXB-friendly adapted version of Pay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class XmlAdaptedPay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Index studentIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private String amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private String year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private String month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs an XmlAdaptedPay."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedPay(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs a {@code XmlAdaptedPay} with the given {@code index},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * {@code amount}, {@code month}, {@code year}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param index index of the student"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param amount amount the student paid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param month month in which payment is made"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param year year in which payment is made"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public XmlAdaptedPay(Index index, String amount, String month, String year) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.studentIndex \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.amount \u003d String.valueOf(amount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.month \u003d String.valueOf(month);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.year \u003d String.valueOf(year);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts a given Pay into this class for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedPay(Payment source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.studentIndex \u003d source.getIndex();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.amount \u003d String.valueOf(source.getAmount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.month \u003d String.valueOf(source.getMonth());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.year \u003d String.valueOf(source.getYear());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts this jaxb-friendly adapted payment object into the model\u0027s payment object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Payment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        int integerAmount;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        int integerMonth;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        int integerYear;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //check if can convert string to integer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            integerAmount \u003d Integer.valueOf(amount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            integerMonth \u003d Integer.valueOf(month);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            integerYear \u003d Integer.valueOf(year);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new NumberFormatException(PayCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //check if the integer value is of a valid form"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!Payment.isValidAmount(integerAmount)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } else if (!Payment.isValidMonth(integerMonth)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } else if (!Payment.isValidYear(integerYear)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return new Payment(studentIndex, Integer.valueOf(amount),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Integer.valueOf(month), Integer.valueOf(year));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!(other instanceof XmlAdaptedPay)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return studentIndex.equals(((XmlAdaptedPay) other).studentIndex)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 amount \u003d\u003d (((XmlAdaptedPay) other).amount)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 month \u003d\u003d (((XmlAdaptedPay) other).month)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 year \u003d\u003d (((XmlAdaptedPay) other).year);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Objects.hash(studentIndex, amount, month, year);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 32,
      "SusterDrifter": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private String tuitionTiming;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private List\u003cXmlAdaptedSubject\u003e subjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private List\u003cXmlAdaptedPay\u003e payments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                            String address, List\u003cXmlAdaptedSubject\u003e subjects, String tuitionTiming,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedPay\u003e payments) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.tuitionTiming \u003d tuitionTiming;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (payments !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            this.payments \u003d new ArrayList\u003c\u003e(payments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects \u003d source.getSubjects().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .map(XmlAdaptedSubject::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .collect(Collectors.toList());;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        tuitionTiming \u003d source.getTuitionTiming().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        payments \u003d source.getPayments().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .map(XmlAdaptedPay::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (subjects \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final List\u003cSubject\u003e personSubjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (XmlAdaptedSubject subject : subjects) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            personSubjects.add(subject.toModelType());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final List\u003cPayment\u003e personPayments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (XmlAdaptedPay payment : payments) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            personPayments.add(payment.toModelType());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (tuitionTiming \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TuitionTiming.class.getSimpleName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (!TuitionTiming.isValidTiming(tuitionTiming)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(TuitionTiming.MESSAGE_TUITION_TIMING_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        final TuitionTiming modelTuitionTiming \u003d new TuitionTiming(tuitionTiming);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final Set\u003cSubject\u003e modelSubjects \u003d new HashSet\u003c\u003e(personSubjects);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final List\u003cPayment\u003e modelPayments \u003d new ArrayList\u003c\u003e(personPayments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                modelSubjects, modelTuitionTiming, modelTags, modelPayments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 subjects.equals(otherPerson.subjects)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 Objects.equals(tuitionTiming, otherPerson.tuitionTiming)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 payments.equals(otherPerson.payments);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 42,
      "andlimey": 14,
      "lywjoel": 1,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedSubject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.SubjectType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * JAXB-friendly adapted version of the Subject."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class XmlAdaptedSubject {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private List\u003cXmlAdaptedSyllabus\u003e subjectContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private float completionRate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs an XmlAdaptedSubject."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedSubject() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts a given Subject into this class for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedSyllabusBook"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedSubject(Subject source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectName \u003d source.getSubjectName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectContent \u003d source.getSubjectContent().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            .map(XmlAdaptedSyllabus::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.completionRate \u003d source.getCompletionRate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!SubjectType.isValidSubjectName(subjectName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e modelSyllabus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (XmlAdaptedSyllabus syllabus : subjectContent) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            modelSyllabus.add(syllabus.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(SubjectType.convertStringToSubjectName(subjectName), modelSyllabus, completionRate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!(other instanceof XmlAdaptedSubject)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectName.equals(((XmlAdaptedSubject) other).subjectName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 contentAreSame((XmlAdaptedSubject) other);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Checks whether the content of this syllabus book is the same"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * with the other syllabus book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param other the one to be compared to"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return true if contents are the same"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean contentAreSame(XmlAdaptedSubject other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (subjectContent.size() !\u003d other.subjectContent.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0, j \u003d 0; i \u003c subjectContent.size(); i++, j++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!subjectContent.get(i).equals(other.subjectContent.get(j))) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Objects.hash(subjectName, subjectContent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedSyllabus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * JAXB-friendly adapted version of the Syllabus."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class XmlAdaptedSyllabus {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private String syllabus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean state;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs an XmlAdaptedSyllabus."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedSyllabus() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts a given Syllabus into this class for JAXB use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedSyllabus(Syllabus source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabus \u003d source.syllabus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.state \u003d source.state;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Syllabus toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!Syllabus.isValidSyllabus(syllabus)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Syllabus.MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Syllabus(syllabus, state);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof XmlAdaptedSyllabus // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabus.equals(((XmlAdaptedSyllabus) other).syllabus) // content check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 state \u003d\u003d ((XmlAdaptedSyllabus) other).state); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabus.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \"PersonPage.html\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Loads the page with the person\u0027s information parsed into the URL."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Also escapes pound sign."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param person Person to read information from."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final StringBuilder subjectsBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        person.getSubjects().forEach(subjectsBuilder::append);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final StringBuilder subjectNamesBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSubject\u003e subjectNames \u003d new ArrayList\u003c\u003e(person.getSubjects());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c subjectNames.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            subjectNamesBuilder.append(subjectNames.get(i).getSubjectName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (i !\u003d subjectNames.size() - 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                subjectNamesBuilder.append(\" | \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final StringBuilder paymentsBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPayment\u003e payments \u003d new ArrayList\u003c\u003e(person.getPayments());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c payments.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Payment selected \u003d payments.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            paymentsBuilder.append(String.format(\"Month: %5d     Year: %10d     Amount: %10d         \","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    selected.getMonth(), selected.getYear(), selected.getAmount()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final StringBuilder tagsBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            tagsBuilder.append(tags.get(i).toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (i !\u003d tags.size() - 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                tagsBuilder.append(\" | \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        URL personPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + SEARCH_PAGE_URL);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String url \u003d personPage.toExternalForm()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"?name\u003d\" + person.getName().fullName"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026phone\u003d\" + person.getPhone().value"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026email\u003d\" + person.getEmail().value"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026address\u003d\" + person.getAddress().value"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + \"\u0026tuitionTimingDay\u003d\" + person.getTuitionTiming().day.toString().substring(0, 3)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + \"\u0026tuitionTimingTime\u003d\" + person.getTuitionTiming().time"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + \"\u0026subjectNames\u003d\" + subjectNamesBuilder.toString()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026subjects\u003d\" + subjectsBuilder.toString()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026payments\u003d\" + paymentsBuilder.toString()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026tags\u003d\" + tagsBuilder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        logger.info(url.replace(\"#\", \"%23\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        loadPage(url.replace(\"#\", \"%23\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 4,
      "SusterDrifter": 32,
      "lywjoel": 23,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/view/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param keyCombination the KeyCombination subjectName of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 1,
      "-": 202
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private FlowPane subjects;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private Label tuitionTiming;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        tuitionTiming.setText(person.getTuitionTiming().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        person.getSubjects().forEach(subject -\u003e subjects.getChildren().add(new Label(subject.getSubjectName())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "andlimey": 4,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/tutorhelper_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "   \u003cPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "andlimey"
        },
        "content": "#subjects {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "andlimey"
        },
        "content": "#subjects .label {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-background-color: #3e96;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 14,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c!--[if IE]\u003e\u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e\u003c![endif]--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 1.5.5\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003ctitle\u003eTutorHelper - User Guide\u003c/title\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        [hidden],template{display:none}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        script{display:none!important}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a{background:transparent}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        dfn{font-style:italic}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        small{font-size:80%}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sup{top:-.5em}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sub{bottom:-.25em}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        img{border:0}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        figure{margin:0}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        legend{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        button,input{line-height:normal}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        button,select{text-transform:none}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        *,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        html,body{font-size:100%}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        object,embed{height:100%}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .left{float:left!important}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .right{float:right!important}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .text-left{text-align:left!important}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .text-right{text-align:right!important}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .text-center{text-align:center!important}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .hide{display:none}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        select{width:100%}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .spread{width:100%}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a img{border:none}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h1{font-size:2.125em}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h6{font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        abbr{text-transform:none}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        @media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            h1{font-size:2.75em}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        *:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        *:not(pre)\u003ecode.nobreak{word-wrap:normal}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        *:not(pre)\u003ecode.nowrap{white-space:nowrap}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        em em{font-style:normal}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        strong strong{font-weight:400}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content{margin-top:1.25em}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content:before{content:none}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header .details br{display:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toc a{text-decoration:none}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        @media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        @media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2{width:20em}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        @media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        @media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        @media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        #content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .big{font-size:larger}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .small{font-size:smaller}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .underline{text-decoration:underline}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .overline{text-decoration:overline}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .black{color:#000}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .black-background{background-color:#000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .blue{color:#0000bf}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .gray{color:#606060}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .green{color:#006000}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .lime{color:#00bf00}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .maroon{color:#600000}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .navy{color:#000060}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .olive{color:#606000}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .purple{color:#600060}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .red{color:#bf0000}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .silver{color:#909090}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .teal{color:#006060}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .white{color:#bfbfbf}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        .print-only{display:none!important}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        @media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            *{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            thead{display:table-header-group}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            svg{max-width:100%}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.book #header{text-align:center}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            #footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .print-only{display:block!important}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .show-for-print{display:inherit!important}}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003ch1\u003eTutorHelper - User Guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cdiv id\u003d\"preamble\"\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cp\u003eBy: \u003ccode\u003eW13-4\u003c/code\u003e      Since: \u003ccode\u003eSeptember 2018\u003c/code\u003e      Licence: \u003ccode\u003eMIT\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003cdiv id\u003d\"toc\" class\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv id\u003d\"toctitle\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cul class\u003d\"sectlevel1\"\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#_introduction\"\u003e1. Introduction\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#_quick_start\"\u003e2. Quick Start\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#Features\"\u003e3. Features\u003c/a\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_viewing_help_code_help_code\"\u003e3.1. Viewing help : \u003ccode\u003ehelp\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_adding_a_student_code_add_code\"\u003e3.2. Adding a student: \u003ccode\u003eadd\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_listing_all_students_code_list_code\"\u003e3.3. Listing all students : \u003ccode\u003elist\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_editing_a_student_code_edit_code\"\u003e3.4. Editing a student : \u003ccode\u003eedit\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_locating_students_by_name_code_find_code\"\u003e3.5. Locating students by name: \u003ccode\u003efind\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_grouping_students_by_tuition_timing_code_group_code\"\u003e3.6. Grouping students by tuition timing : \u003ccode\u003egroup\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_deleting_a_student_code_delete_code\"\u003e3.7. Deleting a student : \u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_selecting_a_student_code_select_code\"\u003e3.8. Selecting a student : \u003ccode\u003eselect\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_listing_entered_commands_code_history_code\"\u003e3.9. Listing entered commands : \u003ccode\u003ehistory\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_undoing_previous_command_code_undo_code\"\u003e3.10. Undoing previous command : \u003ccode\u003eundo\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_redoing_the_previously_undone_command_code_redo_code\"\u003e3.11. Redoing the previously undone command : \u003ccode\u003eredo\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_clearing_all_entries_code_clear_code\"\u003e3.12. Clearing all entries : \u003ccode\u003eclear\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_keeping_track_of_payments_code_paid_code\"\u003e3.13. Keeping track of payments : \u003ccode\u003epaid\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_display_tutor_earnings_for_the_month_code_earnings_code\"\u003e3.14. Display tutor earnings for the month : \u003ccode\u003eearnings\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_mark_a_syllabus_topic_as_complete_incomplete_code_mark_code\"\u003e3.15. Mark a syllabus topic as complete/incomplete : \u003ccode\u003emark\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_add_a_syllabus_topic_to_the_student_s_list_of_syllabus_topics_code_appendsyll_code\"\u003e3.16. Add a syllabus topic to the student’s list of syllabus topics : \u003ccode\u003eappendsyll\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_remove_a_syllabus_topic_from_the_student_s_list_of_syllabus_topics_code_erasesyll_code\"\u003e3.17. Remove a syllabus topic from the student’s list of syllabus topics : \u003ccode\u003eerasesyll\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_exiting_the_program_code_exit_code\"\u003e3.18. Exiting the program : \u003ccode\u003eexit\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#_saving_the_data\"\u003e3.19. Saving the data\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/li\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#_faq\"\u003e4. FAQ\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#_command_summary\"\u003e5. Command Summary\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/ul\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003ch2 id\u003d\"_introduction\"\u003e1. Introduction\u003c/h2\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cp\u003eTutorHelper is for tutors who have trouble managing their students’ details \u0026amp; progress, time of tuition and their own weekly tuition schedule. This project is an all-in-one scheduler.\u003c/p\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003ch2 id\u003d\"_quick_start\"\u003e2. Quick Start\u003c/h2\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003eEnsure you have Java version \u003ccode\u003e9\u003c/code\u003e or later installed in your Computer.\u003c/p\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003eDownload the latest version of \u003ccode\u003eTutorHelper\u003c/code\u003e \u003ca href\u003d\"https://github.com/CS2103-AY1819S1-W13-4/main/releases\"\u003ehere\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003eCopy the file to the folder you want to use as the home folder for your TutorHelper.\u003c/p\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003eDouble-click the file to start the app. The GUI should appear in a few seconds.\u003c/p\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cimg src\u003d\"../docs/images/Ui.png\" alt\u003d\"Ui\" width\u003d\"790\"\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/div\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003eType the command in the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g. typing \u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e and pressing \u003ckbd\u003eEnter\u003c/kbd\u003e will open the help window.\u003c/p\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003eSome example commands you can try:\u003c/p\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003e\u003cstrong\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/strong\u003e : lists all contacts\u003c/p\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003e\u003cstrong\u003e\u003ccode\u003eadd\u003c/code\u003e\u003c/strong\u003e\u003ccode\u003en/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/Mathematics d/Monday, 12:00pm\u003c/code\u003e : adds a student named \u003ccode\u003eJohn Doe\u003c/code\u003e to the TutorHelper.\u003c/p\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003e\u003cstrong\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/strong\u003e\u003ccode\u003e3\u003c/code\u003e : deletes the 3rd contact shown in the current list\u003c/p\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexit\u003c/code\u003e\u003c/strong\u003e : exits the app\u003c/p\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003eRefer to \u003ca href\u003d\"#Features\"\u003eFeatures\u003c/a\u003e for details of each command.\u003c/p\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/ol\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003ch2 id\u003d\"Features\"\u003e3. Features\u003c/h2\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"exampleblock\"\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eCommand Format\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cul\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cp\u003eWords in \u003ccode\u003eUPPER_CASE\u003c/code\u003e are the parameters to be supplied by the user e.g. in \u003ccode\u003eadd n/NAME\u003c/code\u003e, \u003ccode\u003eNAME\u003c/code\u003e is a parameter which can be used as \u003ccode\u003eadd n/John Doe\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cp\u003eItems in square brackets are optional e.g \u003ccode\u003en/NAME [t/TAG]\u003c/code\u003e can be used as \u003ccode\u003en/John Doe t/friend\u003c/code\u003e or as \u003ccode\u003en/John Doe\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cp\u003eItems with \u003ccode\u003e…\u003c/code\u003e​ after them can be used multiple times including zero times e.g. \u003ccode\u003e[t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e can be used as \u003ccode\u003e\u0026#160;\u003c/code\u003e (i.e. 0 times), \u003ccode\u003et/friend\u003c/code\u003e, \u003ccode\u003et/friend t/family\u003c/code\u003e etc.\u003c/p\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cp\u003eParameters can be in any order e.g. if the command specifies \u003ccode\u003en/NAME p/PHONE_NUMBER\u003c/code\u003e, \u003ccode\u003ep/PHONE_NUMBER n/NAME\u003c/code\u003e is also acceptable.\u003c/p\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/ul\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_viewing_help_code_help_code\"\u003e3.1. Viewing help : \u003ccode\u003ehelp\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eFormat: \u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_adding_a_student_code_add_code\"\u003e3.2. Adding a student: \u003ccode\u003eadd\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eAdds a student to the TutorHelper\u003cbr\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eadd n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SUBJECT\u0026#8230;\u0026#8203; d/TUITION TIMING [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003ctable\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003ctr\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                A student can have any number of tags (including 0), and must have at least 1 subject."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/tr\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/table\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eadd n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01, s/Mathematics, d/ Monday 6:00pm\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_listing_all_students_code_list_code\"\u003e3.3. Listing all students : \u003ccode\u003elist\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eShows a list of all students in the TutorHelper.\u003cbr\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003elist\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_editing_a_student_code_edit_code\"\u003e3.4. Editing a student : \u003ccode\u003eedit\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eEdits an existing student in the TutorHelper.\u003cbr\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eedit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [d/TIMING] [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eEdits the student at the specified \u003ccode\u003eINDEX\u003c/code\u003e. The index refers to the index number shown in the displayed student list. The index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eAt least one of the optional fields must be provided.\u003c/p\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eExisting values will be updated to the input values.\u003c/p\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eWhen editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative.\u003c/p\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eYou can remove all the student\u0026#8217;s tags by typing \u003ccode\u003et/\u003c/code\u003e without specifying any tags after it.\u003c/p\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eedit 1 p/91234567 e/johndoe@example.com\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Edits the phone number and email address of the 1st student to be \u003ccode\u003e91234567\u003c/code\u003e and \u003ccode\u003ejohndoe@example.com\u003c/code\u003e respectively.\u003c/p\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eedit 2 n/Betsy Crower t/\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Edits the name of the 2nd student to be \u003ccode\u003eBetsy Crower\u003c/code\u003e and clears all existing tags.\u003c/p\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_locating_students_by_name_code_find_code\"\u003e3.5. Locating students by name: \u003ccode\u003efind\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eFinds students whose names contain any of the given keywords.\u003cbr\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003efind KEYWORD [MORE_KEYWORDS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe search is case insensitive. e.g \u003ccode\u003ehans\u003c/code\u003e will match \u003ccode\u003eHans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe order of the keywords does not matter. e.g. \u003ccode\u003eHans Bo\u003c/code\u003e will match \u003ccode\u003eBo Hans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eOnly the name is searched.\u003c/p\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eOnly full words will be matched e.g. \u003ccode\u003eHan\u003c/code\u003e will not match \u003ccode\u003eHans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eStudents matching at least one keyword will be returned (i.e. \u003ccode\u003eOR\u003c/code\u003e search). e.g. \u003ccode\u003eHans Bo\u003c/code\u003e will return \u003ccode\u003eHans Gruber\u003c/code\u003e, \u003ccode\u003eBo Yang\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efind John\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Returns \u003ccode\u003ejohn\u003c/code\u003e and \u003ccode\u003eJohn Doe\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efind Betsy Tim John\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Returns any student having names \u003ccode\u003eBetsy\u003c/code\u003e, \u003ccode\u003eTim\u003c/code\u003e, or \u003ccode\u003eJohn\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_grouping_students_by_tuition_timing_code_group_code\"\u003e3.6. Grouping students by tuition timing : \u003ccode\u003egroup\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eLists all students with the specified tuition timing.\u003cbr\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        User can choose to group by time or day of the week.\u003cbr\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003egroup TIMING\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eLists all students with the specified \u003ccode\u003eTIMING\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe timing refers to either a time or day of the week.\u003c/p\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003egroup Monday\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Show all classes on Monday, sorted based on timing.\u003c/p\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003egroup 12pm\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Show all classes at 12pm for the entire week, sorted based on timing.\u003c/p\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003egroup\u003c/code\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Show all classes sorted based on timing.\u003c/p\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_deleting_a_student_code_delete_code\"\u003e3.7. Deleting a student : \u003ccode\u003edelete\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eDeletes the specified student from the TutorHelper.\u003cbr\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003edelete INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eDeletes the student at the specified \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe index refers to the index number shown in the displayed student list.\u003c/p\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003edelete 2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Deletes the 2nd student in the TutorHelper.\u003c/p\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efind Betsy\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Deletes the 1st student in the results of the \u003ccode\u003efind\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_selecting_a_student_code_select_code\"\u003e3.8. Selecting a student : \u003ccode\u003eselect\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eSelects the student identified by the index number used in the displayed student list.\u003cbr\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eselect INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eSelects the student and displays the information of the student at the specified \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe index refers to the index number shown in the displayed student list.\u003c/p\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e \u003ccode\u003e1, 2, 3, \u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eselect 2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Selects the 2nd student in the address book.\u003c/p\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efind Betsy\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eselect 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                Selects the 1st student in the results of the \u003ccode\u003efind\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_listing_entered_commands_code_history_code\"\u003e3.9. Listing entered commands : \u003ccode\u003ehistory\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eLists all the commands that you have entered in reverse chronological order.\u003cbr\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003ehistory\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003ctable\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003ctr\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003ePressing the \u003ckbd\u003e\u0026uarr;\u003c/kbd\u003e and \u003ckbd\u003e\u0026darr;\u003c/kbd\u003e arrows will display the previous and next input respectively in the command box.\u003c/p\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/div\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/tr\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/table\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_undoing_previous_command_code_undo_code\"\u003e3.10. Undoing previous command : \u003ccode\u003eundo\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eRestores the address book to the state before the previous \u003cem\u003eundoable\u003c/em\u003e command was executed.\u003cbr\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eundo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003ctable\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003ctr\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eUndoable commands: those commands that modify the address book\u0026#8217;s content (\u003ccode\u003eadd\u003c/code\u003e, \u003ccode\u003edelete\u003c/code\u003e, \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eclear\u003c/code\u003e).\u003c/p\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/div\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/tr\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/table\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eselect 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                The \u003ccode\u003eundo\u003c/code\u003e command fails as there are no undoable commands executed previously.\u003c/p\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eclear\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_redoing_the_previously_undone_command_code_redo_code\"\u003e3.11. Redoing the previously undone command : \u003ccode\u003eredo\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eReverses the most recent \u003ccode\u003eundo\u003c/code\u003e command.\u003cbr\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eredo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eredo\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                The \u003ccode\u003eredo\u003c/code\u003e command fails as there are no \u003ccode\u003eundo\u003c/code\u003e commands executed previously.\u003c/p\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eclear\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003edelete 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_clearing_all_entries_code_clear_code\"\u003e3.12. Clearing all entries : \u003ccode\u003eclear\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eClears all student records from the TutorHelper.\u003cbr\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eclear\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_keeping_track_of_payments_code_paid_code\"\u003e3.13. Keeping track of payments : \u003ccode\u003epaid\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eRecords a payment of a specified amount made by a specified student for a specified month and year.\u003cbr\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003epaid STUDENT_INDEX AMOUNT MONTH YEAR\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eRecords a payment of a specified \u003ccode\u003eAMOUNT\u003c/code\u003e for the student at the specified \u003ccode\u003eSTUDENT_INDEX\u003c/code\u003e, for a specified \u003ccode\u003eMONTH\u003c/code\u003e and \u003ccode\u003eYEAR\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe student index refers to the index number shown in the displayed student list.\u003c/p\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe student index, month and year \u003cstrong\u003emust be positive integers\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003epaid 1 200 01 2018\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                `Records $200 payment made on January 2018\u003c/p\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_display_tutor_earnings_for_the_month_code_earnings_code\"\u003e3.14. Display tutor earnings for the month : \u003ccode\u003eearnings\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eDisplay tutor earnings for the specified month of a specified year.\u003cbr\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eearnings MONTH YEAR\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eDisplay tutor earnings for a specified \u003ccode\u003eMONTH\u003c/code\u003e of a specified \u003ccode\u003eYEAR\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe month and year \u003cstrong\u003emust be positive integers\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eearnings 01 2018\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003ccode\u003eShows earnings made on January 2018.\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_mark_a_syllabus_topic_as_complete_incomplete_code_mark_code\"\u003e3.15. Mark a syllabus topic as complete/incomplete : \u003ccode\u003emark\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eToggle the state of a specified syllabus topic for a specified student and subject.\u003cbr\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003emark STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eToggle the state of a syllabus topic at the specified \u003ccode\u003eSYLLABUS_INDEX\u003c/code\u003e for a subject at the specified \u003ccode\u003eSUBJECT_INDEX\u003c/code\u003e for a student at the specified \u003ccode\u003eSTUDENT_INDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe student index refers to the index number shown in the displayed student list.\u003c/p\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe subject index refers to the index number shown in the student\u0026#8217;s subject list.\u003c/p\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe syllabus index refers to the index number shown in the student\u0026#8217;s list of syllabus topics for a subject.\u003c/p\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe student index, subject index and syllabus index \u003cstrong\u003emust be positive integers\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003emark 1 1 3\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003emark 2 1 2\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_add_a_syllabus_topic_to_the_student_s_list_of_syllabus_topics_code_appendsyll_code\"\u003e3.16. Add a syllabus topic to the student’s list of syllabus topics : \u003ccode\u003eappendsyll\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eAdd a new syllabus topic for a specified student and subject.\u003cbr\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eappendsyll STUDENT_INDEX SUBJECT_INDEX sy/SYLLABUS\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eAdds a new syllabus topic \u003ccode\u003eSYLLABUS\u003c/code\u003e for a subject at the specified \u003ccode\u003eSUBJECT_INDEX\u003c/code\u003e for a student at the specified \u003ccode\u003eSTUDENT_INDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe student index refers to the index number shown in the displayed student list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe subject index refers to the index number shown in the student\u0026#8217;s subject list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe student index and subject index \u003cstrong\u003emust be positive integers\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eappendsyll 1 2 sy/Integration\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eappendsyll 3 2 sy/Poisson Distribution\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_remove_a_syllabus_topic_from_the_student_s_list_of_syllabus_topics_code_erasesyll_code\"\u003e3.17. Remove a syllabus topic from the student’s list of syllabus topics : \u003ccode\u003eerasesyll\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eRemove a syllabus topic for a specified student and subject.\u003cbr\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eerasesyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eRemoves a syllabus topic at the specified \u003ccode\u003eSYLLABUS_INDEX\u003c/code\u003e for a subject at the specified \u003ccode\u003eSUBJECT_INDEX\u003c/code\u003e for a student at the specified \u003ccode\u003eSTUDENT_INDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe student index refers to the index number shown in the displayed student list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe subject index refers to the index number shown in the student\u0026#8217;s subject list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe syllabus index refers to the index number shown in the student\u0026#8217;s list of syllabus topics for a subject.\u003c/p\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                    \u003cp\u003eThe student index, subject index and syllabus index \u003cstrong\u003emust be positive integers\u003c/strong\u003e 1, 2, 3, \u0026#8230;\u0026#8203;\u003c/p\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eerasesyll 1 1 2\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eerasesyll 3 1 1\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_exiting_the_program_code_exit_code\"\u003e3.18. Exiting the program : \u003ccode\u003eexit\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eExits the program.\u003cbr\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        Format: \u003ccode\u003eexit\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003ch3 id\u003d\"_saving_the_data\"\u003e3.19. Saving the data\u003c/h3\u003e"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cp\u003eAddress book data are saved in the hard disk automatically after any command that changes the data.\u003cbr\u003e"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        There is no need to save manually.\u003c/p\u003e"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003ch2 id\u003d\"_faq\"\u003e4. FAQ\u003c/h2\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cp\u003e\u003cstrong\u003eQ\u003c/strong\u003e: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cstrong\u003eA\u003c/strong\u003e: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder.\u003c/p\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003ch2 id\u003d\"_command_summary\"\u003e5. Command Summary\u003c/h2\u003e"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003cul\u003e"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e \u003ccode\u003eadd n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g. \u003ccode\u003eadd n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eClear\u003c/strong\u003e : \u003ccode\u003eclear\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eDelete\u003c/strong\u003e : \u003ccode\u003edelete INDEX\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g. \u003ccode\u003edelete 3\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e : \u003ccode\u003eedit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g. \u003ccode\u003eedit 2 n/James Lee e/jameslee@example.com\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eFind\u003c/strong\u003e : \u003ccode\u003efind KEYWORD [MORE_KEYWORDS]\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g. \u003ccode\u003efind James Jake\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eList\u003c/strong\u003e : \u003ccode\u003elist\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eHelp\u003c/strong\u003e : \u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eSelect\u003c/strong\u003e : \u003ccode\u003eselect INDEX\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g.\u003ccode\u003eselect 2\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eHistory\u003c/strong\u003e : \u003ccode\u003ehistory\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eUndo\u003c/strong\u003e : \u003ccode\u003eundo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eRedo\u003c/strong\u003e : \u003ccode\u003eredo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eGroup\u003c/strong\u003e : \u003ccode\u003egroup TIMING\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g \u003ccode\u003egroup Monday OR group 12pm OR group\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eHistory\u003c/strong\u003e : \u003ccode\u003ehistory\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003ePayment\u003c/strong\u003e : \u003ccode\u003epaid STUDENT_INDEX AMOUNT MONTH YEAR\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            eg \u003ccode\u003epaid 1 200 08 2018\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eEarnings\u003c/strong\u003e : \u003ccode\u003eearnings MONTH YEAR\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            \u003ccode\u003eeg earnings 01 2018\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eMark\u003c/strong\u003e : \u003ccode\u003emark STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g \u003ccode\u003emark 1 1 1\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eAdd Syllabus Topic\u003c/strong\u003e : \u003ccode\u003eappendsyll STUDENT_INDEX SUBJECT_INDEX sy/SYLLABUS\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g \u003ccode\u003eappendsyll 1 2 sy/Integration\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eRemove Syllabus Topic\u003c/strong\u003e : \u003ccode\u003eerasesyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                            e.g \u003ccode\u003eerasesyll 1 1 1\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u003c/ul\u003e"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cdiv id\u003d\"footer-text\"\u003e"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Last updated 2018-10-15 00:43:03 +08"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1210
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cImage url\u003d\"@/images/tutorhelper_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"subjects\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \u003cLabel fx:id\u003d\"tuitionTiming\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tuitionTiming\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 10,
      "andlimey": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/PersonPage.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "body {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    background-color: #383838;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    width: 55%;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    height: 180px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    text-align: left;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    margin-left: 10px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.payment-detail {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    width: 40%;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    height: 180px;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    background-color: #3E3E3E;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    float: right;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    color: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .personal-name {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding-top: 10px;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding-bottom: 10px;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    color: white;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .text-lead {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 30px;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    line-height: 40px;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .personal-detail {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    margin-top: 10px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    color: lightgrey;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .timing-detail {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    width: 60px;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    height: 60px;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    margin-left: 10px;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .timing-detail .timing-text {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    text-align: right;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    margin-top: 35%;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    margin-right: 5px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 15px;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    line-height: 20px;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Droid Sans\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    text-transform: uppercase;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    color: lightslategrey;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .timing-detail .timing-text .timing-day {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 25px;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    color: darkgrey;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .contact-detail {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    width: 280px;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    height: 60px;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    text-align: left;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    margin-left: 10px;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .contact-detail .text-detail {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 13px;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    line-height: 20px;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding-top: 2px;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding-bottom: 2px;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.main-detail .contact-detail .text-italic {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 13px;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-style: italic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    line-height: 20px;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".detail-subject-division {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    clear:both;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    resize: both;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    color: white;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    margin-bottom: 5px;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".label .label-text {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding: 1px 3px;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    resize: both;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    background-color: #3e96;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    border-radius: 5px;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 11px;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.payment-detail .payment-label {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    resize: both;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    margin-bottom: 3px;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    text-anchor: middle;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.payment-detail .payment-title {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding: 3px 5px;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    resize: both;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    background-color: darkslateblue;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    border-radius: 5px;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 15px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.payment-detail .payment-numbers-panel {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.payment-detail .payment-numbers {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 13px;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    line-height: 20px;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    white-space: pre-wrap;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.detail-subject-division .horizontal-divider {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    clear: both;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.tags {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 15px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    line-height: 20px;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding-top: 2px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding-bottom: 10px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "header.tags .label .label-text {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    background-color: mediumslateblue;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "table.subject-table, th, td {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    border: 1px solid antiquewhite;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    border-collapse: collapse;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "th, td {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-size: 15px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    line-height: 20px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    padding: 5px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    color: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "th {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    background-color: indianred;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    width: 20%;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 169
    }
  },
  {
    "path": "src/main/resources/view/PersonPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003ctitle\u003ePerson Page\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003clink href\u003d\"PersonPage.css\" type\u003d\"text/css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003clink href\u003d\"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\" rel\u003d\"stylesheet\" type\u003d\u0027text/css\u0027\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003clink href\u003d\u0027https://fonts.googleapis.com/css?family\u003dDroid+Serif:400,700,400italic,700italic\u0027 rel\u003d\u0027stylesheet\u0027 type\u003d\u0027text/css\u0027\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cscript type\u003d\"text/javascript\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        function getJsonFromUrl() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            var result \u003d {};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            query.split(\"\u0026\").forEach(function (part) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                var item \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                result[item[0]] \u003d decodeURIComponent(item[1]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"name\").innerHTML \u003d getJsonFromUrl().name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"phone\").innerHTML \u003d getJsonFromUrl().phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"email\").innerHTML \u003d getJsonFromUrl().email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"address\").innerHTML \u003d getJsonFromUrl().address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            document.getElementById(\"tuitionTimingDay\").innerHTML \u003d getJsonFromUrl().tuitionTimingDay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            document.getElementById(\"tuitionTimingTime\").innerHTML \u003d getJsonFromUrl().tuitionTimingTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            document.getElementById(\"subjectNames\").innerHTML \u003d (getJsonFromUrl().subjectNames);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"subjects\").innerHTML \u003d getJsonFromUrl().subjects;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            document.getElementById(\"payments\").innerHTML \u003d getJsonFromUrl().payments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"tags\").innerHTML \u003d getJsonFromUrl().tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/script\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c!--Main Detail--\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003cheader class\u003d\"main-detail\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cdiv class\u003d\"container\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cdiv class\u003d\"personal-name\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003cdiv class\u003d\"text-lead\"\u003e\u003cspan id\u003d\"name\"\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cdiv class\u003d\"personal-detail\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003cdiv class\u003d\"timing-detail\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"timing-text\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cspan id\u003d\"tuitionTimingDay\" class\u003d\"timing-day text-uppercase\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cspan id\u003d\"tuitionTimingTime\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003cdiv class\u003d\"contact-detail\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"label\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003cdiv class\u003d\"label-text\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                            \u003cspan id\u003d\"subjectNames\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"text-detail\"\u003e\u003cspan id\u003d\"address\"\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"text-detail\"\u003e\u003cspan id\u003d\"email\"\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"text-italic\"\u003e\u003cspan id\u003d\"phone\"\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c/header\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c!--Payment Panel--\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003cheader class\u003d\"payment-detail\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cdiv class\u003d\"payment-label\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003ch3 class\u003d\"payment-title\" align\u003d\"center\"\u003epayment history\u003c/h3\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cdiv class\u003d\"payment-numbers-panel\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cspan class\u003d\"payment-numbers\" id\u003d\"payments\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c/header\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003cdiv class\u003d\"detail-subject-division\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003chr class\u003d\"horizontal-divider\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c!--Tags--\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003cheader class\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cdiv class\u003d\"label\" style\u003d\"display: inline-block\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003ca\u003eTags: \u003c/a\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cdiv class\u003d\"label-text\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003cspan id\u003d\"tags\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c/header\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c!--Subjects--\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003ctable class\u003d\"subject-table\" style\u003d\"width:100%\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cth\u003eSubjects\u003c/th\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003ctd\u003e\u003cspan id\u003d\"subjects\"\u003e\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/table\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/body\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 3,
      "SusterDrifter": 67,
      "lywjoel": 47
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003ctuitionTiming\u003eMonday, 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003cpayments\u003e\u003c/payments\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "andlimey": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003ctuitionTiming\u003eMonday, 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003cpayments\u003e\u003c/payments\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "andlimey": 3,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eMonday, 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eTuesday, 7:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Economics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eTuesday, 8:30pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"History\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eWednesday, 5:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eThursday, 5:30pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Chemistry\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eFriday, 4:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eSaturday, 1:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Physics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eSaturday, 3:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eSunday, 11:00am\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Chemistry\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "andlimey": 18,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003ctuitionTiming\u003eMonday, 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "andlimey": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        WebView webView \u003d getChildNode(BROWSER_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        WebEngine engine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newState \u003d\u003d Worker.State.RUNNING) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if the current {@code URL} is different from the subjectName remembered by the most recent"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedUrl.equals(getLoadedUrl());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 1,
      "-": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPerson\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cPerson\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cPerson\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedPersonList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedPersonList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPersonList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(person)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the subjectName remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Returns true if the current content of the sync status is different from"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * the subjectName remembered by the most recent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * subjectName remembered by the most"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 4,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : TutorHelper\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/tutorhelper_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary subjectName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary subjectName"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.storage.XmlAdaptedPay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.storage.XmlAdaptedSubject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_TUITION_TIMING \u003d \"Monday, 6:00pm\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static final List\u003cXmlAdaptedSubject\u003e VALID_SUBJECTS \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Collections.singletonList(new XmlAdaptedSubject(Subject.makeSubject(\"Mathematics\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final List\u003cXmlAdaptedPay\u003e VALID_PAYMENT \u003d Collections.singletonList(new XmlAdaptedPay());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_ADDRESS, VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 7,
      "SusterDrifter": 1,
      "ongyz": 1,
      "andlimey": 3,
      "lywjoel": 1,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return subjectName"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return subjectName"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return subjectName"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 3,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void sortByTime() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void sortByDay() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * A Model stu"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * b that contains a single person."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 12,
      "-": 203
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String VALID_SUBJECT_AMY \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String VALID_SUBJECT_BOB \u003d \"Economics\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String VALID_TUITION_TIMING_AMY \u003d \"Monday 4:00pm\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String VALID_TUITION_TIMING_BOB \u003d \"Tuesday 6:30pm\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String TUITION_TIMING_DESC_AMY \u003d \" \" + PREFIX_DAY_AND_TIME + VALID_TUITION_TIMING_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String TUITION_TIMING_DESC_BOB \u003d \" \" + PREFIX_DAY_AND_TIME + VALID_TUITION_TIMING_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String INVALID_SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT; //empty string not allowed for subjects"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String INVALID_TUITION_TIMING_DESC \u003d \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_DAY_AND_TIME + \"Monday 12pm\"; // time needs to be in standard 12hr timing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            System.out.println(actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            System.out.println(expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "SusterDrifter": 6,
      "andlimey": 6,
      "lywjoel": 1,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PayCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class PayCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertExecutionSuccess(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_updatePaymentMethod_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment originalPayment \u003d new Payment(INDEX_FIRST_PERSON, 100, 11, 1998);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand originalPayCommand \u003d new PayCommand(originalPayment);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cPayment\u003e oldPaymentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        oldPaymentList.add(originalPayment);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment newPayment \u003d new Payment(INDEX_FIRST_PERSON, 100, 11, 2018);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cPayment\u003e actualReturnedPayment \u003d originalPayCommand.updatePayment(oldPaymentList, newPayment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cPayment\u003e expectedReturnedPaymentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedReturnedPaymentList.add(originalPayment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedReturnedPaymentList.add(newPayment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(actualReturnedPayment, expectedReturnedPaymentList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Executes a {@code PayCommand} with the given {@code index}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment payment \u003d new Payment(index, 200, 9, 2020);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payCommand \u003d new PayCommand(payment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Person personOriginal \u003d model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Person personOriginalClone \u003d new PersonBuilder(personOriginal).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(personOriginalClone).withPayments(payment).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d String.format(PayCommand.MESSAGE_PAYMENT_SUCCESS, expectedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.updatePerson(personOriginal, expectedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandSuccess(payCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Executes a {@code PayCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment payment \u003d new Payment(index, 200, 9, 2020);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payCommand \u003d new PayCommand(payment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandFailure(payCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment alicePayment \u003d new Payment(INDEX_FIRST_PERSON, 200, 10, 2018);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment bobPayment \u003d new Payment(INDEX_SECOND_PERSON, 200, 10, 2018);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payAliceCommand \u003d new PayCommand(alicePayment);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payBobCommand \u003d new PayCommand(bobPayment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(payAliceCommand.equals(payAliceCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payAliceCommandCopy \u003d new PayCommand(alicePayment);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(payAliceCommand.equals(payAliceCommandCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(payAliceCommand.equals(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(payAliceCommand.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // different payment -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(payAliceCommand.equals(payBobCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUITION_TIMING_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + ADDRESS_DESC_BOB +SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                        + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // two invalid values, only first invalid subjectName reported"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 18,
      "SusterDrifter": 1,
      "andlimey": 19,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and only the last subjectName is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Verify the last subjectName is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument subjectName \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument subjectName\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        argsString \u003d \" p/   Argument subjectName \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument subjectName\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash subjectName\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash subjectName\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash subjectName\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash subjectName\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        argsString \u003d unknownPrefix + \"some subjectName\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT subjectName p/\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" pSlash subjectName -t\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash subjectName\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT subjectName\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "SusterDrifter": 13,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // multiple invalid values, but only the first invalid subjectName is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 1,
      "-": 210
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PayCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class PayCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_allFieldPresent_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String input \u003d String.valueOf(1)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(200)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(8)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(2008);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommandParser pay \u003d new PayCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment expectedPayment \u003d new Payment(INDEX_FIRST_PERSON, 200, 8, 2008);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseSuccess(pay, input, new PayCommand(expectedPayment));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_compulsoryFieldAbsent_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommandParser pay \u003d new PayCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String indexInput \u003d \" \" + String.valueOf(200)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(8)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(2018);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, indexInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String amountInput \u003d \" \" + String.valueOf(1)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(8)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(2018);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, amountInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String monthInput \u003d \" \" + String.valueOf(1)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(200)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(2018);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, monthInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String yearInput \u003d \" \" + String.valueOf(1)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(200)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(8);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, yearInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_wrongFieldInput_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommandParser pay \u003d new PayCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongIndexInput \u003d \" \" + String.valueOf(-1)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(200)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(8)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(2018);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongIndexInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongAmountInput \u003d \" \" + String.valueOf(1)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + \"$200\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(8)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(2018);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongAmountInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongMonthInput \u003d String.valueOf(1)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(200)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(16)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(2018);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongMonthInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongYearInput \u003d \" \" + String.valueOf(1)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(200)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + String.valueOf(8)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" \" + \"#2018\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongYearInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSubjects(VALID_SUBJECT_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (hasDuplicatePersons(persons)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * Returns true if there is multiple person in the given collection."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        private boolean hasDuplicatePersons (Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            List\u003cPerson\u003e personsList \u003d persons.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (personsList.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            for (int i \u003d 0; i \u003c personsList.size(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                for (int j \u003d i + 1; j \u003c personsList.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    if (personsList.get(i).isSamePerson(personsList.get(j))) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 27,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person person \u003d new PersonBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // different phone and email and address -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 7,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/subject/SubjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SubjectTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.makeSubject(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_invalidSubjectName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String invalidSubjectName \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Subject.makeSubject(invalidSubjectName));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void removeMethod_outOfBounds_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Economics\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e subject.remove(Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void toggleStateMethod_outOfBounds_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Economics\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e subject.toggleState(Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void test_containSyllabus_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Physics\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusOne \u003d Syllabus.makeSyllabus(\"Quantum Physics\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusTwo \u003d Syllabus.makeSyllabus(\"Kinetics\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusThree \u003d Syllabus.makeSyllabus(\"Nuclear Physics\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e syllabuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabuses.add(syllabusTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabuses.add(syllabusThree);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subject.add(syllabusOne).append(syllabuses);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(updatedSubject.contains(syllabusOne));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(updatedSubject.contains(syllabusTwo));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(updatedSubject.contains(syllabusThree));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void test_containSyllabus_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Biology\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusOne \u003d Syllabus.makeSyllabus(\"Molecular Biology\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusTwo \u003d Syllabus.makeSyllabus(\"Evolution\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusThree \u003d Syllabus.makeSyllabus(\"Plant Transportation\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e syllabuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabuses.add(syllabusThree);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(subject.contains(syllabusOne));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subject.append(syllabuses);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(subject.contains(syllabusTwo));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isValidSubjectName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // null subject name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e SubjectType.isValidSubjectName(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // empty subject name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e SubjectType.isValidSubjectName(\"\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e SubjectType.isValidSubjectName(\" \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // invalid subject"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectType.isValidSubjectName(\"-\")); // one character"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectType.isValidSubjectName(\"Book\")); // non valid Subject name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // valid subject"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Mathematics\")); // full name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Math\")); // partial name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Mathe\")); // partial name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"mATh\")); // partial name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"MATH\")); // partial name in uppercase"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"math\")); // partial name in lowercase"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isEqualSubject() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject biology \u003d Subject.makeSubject(\"Biology\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject biologyPartial \u003d Subject.makeSubject(\"bio\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject mathematics \u003d Subject.makeSubject(\"Mathematics\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject mathematicsUppercase \u003d Subject.makeSubject(\"MATHEMATICS\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject physics \u003d new Subject(SubjectType.Physics, new ArrayList\u003c\u003e(), 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject physicsFilled \u003d physics.add(Syllabus.makeSyllabus(\"Quantum Physics\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Identity check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(biology.equals(biology));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(biology.equals(biologyPartial));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(mathematics.equals(mathematicsUppercase));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // True by type"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(physics.hasTypeOf(physicsFilled.getSubjectType()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // False due to different content"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(physics.equals(physicsFilled));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // False due to different subjectType"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(mathematics.equals(biology));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(mathematicsUppercase.equals(biologyPartial));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isCompletionRateUpdating() throws CommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Chemistry\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subject.add(Syllabus.makeSyllabus(\"Kinetics\"))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                        .add(Syllabus.makeSyllabus(\"Organic Chemistry\"))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                        .toggleState(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(0.5f, updatedSubject.getCompletionRate(), 0.001);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject markedSubject \u003d updatedSubject.toggleState(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(1.0f, markedSubject.getCompletionRate(), 0.001);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject unmarkedSubject \u003d markedSubject.toggleState(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(0.5f, unmarkedSubject.getCompletionRate(), 0.001);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/model/subject/SubjectTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SubjectTypeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isSameType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeOne \u003d SubjectType.convertStringToSubjectName(\"Math\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeTwo \u003d SubjectType.convertStringToSubjectName(\"Mathematics\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeThree \u003d SubjectType.convertStringToSubjectName(\"maTHemAtics\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeFour \u003d SubjectType.convertStringToSubjectName(\"Math\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeFive \u003d SubjectType.convertStringToSubjectName(\"maTh\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeSix \u003d SubjectType.convertStringToSubjectName(\"Bio\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // True due to same type"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(subjectTypeOne.equals(subjectTypeTwo));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(subjectTypeOne.equals(subjectTypeThree));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(subjectTypeOne.equals(subjectTypeFour));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(subjectTypeOne.equals(subjectTypeFive));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // True due to different type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(subjectTypeOne.equals(subjectTypeSix));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // unregistered subject names"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectType.isValidSubjectName(\"Animal\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectType.isValidSubjectName(\"-\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Math\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Mathematics\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"maTHematics\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"math\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"mATH\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Syllabus.isValidSyllabus(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/subject/SyllabusTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SyllabusTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Syllabus.makeSyllabus(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_invalidSyllabus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String invalidSyllabus \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Syllabus.makeSyllabus(invalidSyllabus));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isValidSyllabus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // null syllabus"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Syllabus.isValidSyllabus(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // invalid syllabus"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(Syllabus.isValidSyllabus(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(Syllabus.isValidSyllabus(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // valid syllabus"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(Syllabus.isValidSyllabus(\"Kinetics\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(Syllabus.isValidSyllabus(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(Syllabus.isValidSyllabus(\"Evolution in Mammals\")); // multiple words"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isEqualSyllabus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabus \u003d Syllabus.makeSyllabus(\"Art in Modern Times\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusTwo \u003d Syllabus.makeSyllabus(\"Art in Modern Times\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusThree \u003d Syllabus.makeSyllabus(\"Art in the 90s\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Identity check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(syllabus.equals(syllabus));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // True due to same content"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(syllabus.equals(syllabusTwo));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // False due to different content"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(syllabus.equals(syllabusThree));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class XmlAdaptedPayTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"$233\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_MONTH_NOT_INTEGER \u003d \"NOVEMBER\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_MONTH_WRONG_RANGE \u003d \"16\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"TwoThousand\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final Index VALID_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"200\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_MONTH \u003d \"11\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_YEAR \u003d \"2018\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment pay \u003d new Payment(Index.fromOneBased(1), 200, 11, 2018);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay payment \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, VALID_MONTH, VALID_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(pay, payment.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, INVALID_AMOUNT, VALID_MONTH, VALID_YEAR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, null, VALID_MONTH, VALID_YEAR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_invalidMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, INVALID_MONTH_NOT_INTEGER, VALID_YEAR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay2 \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, INVALID_MONTH_WRONG_RANGE, VALID_YEAR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage2 \u003d Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage2, pay2::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_nullMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, null, VALID_YEAR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_invalidYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, VALID_MONTH, INVALID_YEAR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_nullYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, VALID_MONTH, INVALID_YEAR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_SUBJECT \u003d \"chinese\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String INVALID_TUITION_TIMING \u003d \"Frida, 10.00pm\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String INVALID_MONTH \u003d \"16\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"$200\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"$$22\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_TUITION_TIMING \u003d BENSON.getTuitionTiming().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final List\u003cXmlAdaptedSubject\u003e VALID_SUBJECTS \u003d BENSON.getSubjects().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .map(XmlAdaptedSubject::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final List\u003cXmlAdaptedPay\u003e VALID_PAYMENT \u003d BENSON.getPayments().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .map(XmlAdaptedPay::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                        VALID_SUBJECTS, VALID_TUITION_TIMING, invalidTags, VALID_PAYMENT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void toModelType_invalidSubject_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        List\u003cXmlAdaptedSubject\u003e invalidSubject \u003d new ArrayList\u003c\u003e(VALID_SUBJECTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        invalidSubject.add(new XmlAdaptedSubject(Subject.makeSubject(INVALID_SUBJECT)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                        invalidSubject, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String expectedMessage \u003d Subject.MESSAGE_SUBJECT_CONSTRAINTS;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void toModelType_nullSubject_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                null, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void toModelType_invalidTuitionTiming_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                        VALID_SUBJECTS, INVALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String expectedMessage \u003d TuitionTiming.MESSAGE_TUITION_TIMING_CONSTRAINTS;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void toModelType_invalidPayment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cXmlAdaptedPay\u003e invalidPayment \u003d new ArrayList\u003c\u003e(VALID_PAYMENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        invalidPayment.add(new XmlAdaptedPay(Index.fromOneBased(2), INVALID_AMOUNT, INVALID_MONTH, INVALID_YEAR));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, invalidPayment);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, person::toModelType);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 20,
      "SusterDrifter": 20,
      "andlimey": 32,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        descriptor.setSubjects(person.getSubjects());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        descriptor.setTuitionTiming(person.getTuitionTiming());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        descriptor.setPayments(person.getPayments());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Sets the {@code Subject} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public EditPersonDescriptorBuilder withSubject(Set\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        descriptor.setSubjects((subjects !\u003d null) ? new HashSet\u003c\u003e(subjects) : null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Sets the {@code TuitionTiming} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public EditPersonDescriptorBuilder withTuitionTiming(String tuitionTiming) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        descriptor.setTuitionTiming(new TuitionTiming(tuitionTiming));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public EditPersonDescriptorBuilder withPayments(List\u003cPayment\u003e payments) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        descriptor.setPayments((payments !\u003d null) ? new ArrayList\u003c\u003e(payments) : null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 33,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.person.Payment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alex Tan\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"94351253\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String DEFAULT_SUBJECT \u003d \"Chemistry\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String DEFAULT_TUITION_TIMING \u003d \"Monday, 6:00pm\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private TuitionTiming tuitionTiming;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private List\u003cPayment\u003e payments;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.add(Subject.makeSubject(DEFAULT_SUBJECT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        tuitionTiming \u003d new TuitionTiming(DEFAULT_TUITION_TIMING);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        payments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        subjects \u003d personToCopy.getSubjects();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        tuitionTiming \u003d personToCopy.getTuitionTiming();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        payments \u003d new ArrayList\u003c\u003e(personToCopy.getPayments());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Sets the {@code Subject} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public PersonBuilder withSubjects(String ... subjectArray) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjects \u003d SampleDataUtil.getSubjectSet(subjectArray);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Sets the {@code TuitionTiming} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public PersonBuilder withTuitionTiming(String tuitionTiming) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.tuitionTiming \u003d new TuitionTiming(tuitionTiming);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Sets the {@code Payment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public PersonBuilder withPayments(String ... paymentArray) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (String payment: paymentArray) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            String[] separatedPayment \u003d payment.split(\"\\\\s\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            this.payments.add(new Payment("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    Index.fromOneBased(Integer.valueOf(separatedPayment[0])),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    Integer.valueOf(separatedPayment[1]),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    Integer.valueOf(separatedPayment[2]),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    Integer.valueOf(separatedPayment[3])"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Sets the {@code Payment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public PersonBuilder withPayments(Payment ... paymentArray) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (Payment payment: paymentArray) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.payments.add(payment);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return new Person(name, phone, email, address, subjects, tuitionTiming, tags, payments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Builds a default subject set."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @return the set of subject."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static Set\u003cSubject\u003e subjectBuilder() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e subjectSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectSet.add(Subject.makeSubject(\"Mathematics\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return subjectSet;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 13,
      "SusterDrifter": 20,
      "ongyz": 9,
      "andlimey": 30,
      "lywjoel": 1,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        person.getSubjects().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                s -\u003e sb.append(PREFIX_SUBJECT + s.getSubjectName() + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        sb.append(PREFIX_DAY_AND_TIME + person.getTuitionTiming().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        descriptor.getTuitionTiming().ifPresent(tuitionTiming -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                sb.append(PREFIX_DAY_AND_TIME).append(tuitionTiming.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "//        if (descriptor.getSubjects().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "//            Set\u003cSubject\u003e subjects \u003d descriptor.getSubjects().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": "//            if (subjects.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "//                sb.append(PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "//                subjects.forEach(s -\u003e sb.append(PREFIX_SUBJECT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andlimey"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 18,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Mathematics\").withTuitionTiming(\"Tuesday 8:00pm\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Chemistry\").withTuitionTiming(\"Monday 5:00pm\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withPayments(\"2 200 11 2018\", \"2 300 12 2018\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Physics\").withTuitionTiming(\"Saturday 1:00pm\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Mathematics\").withTuitionTiming(\"Saturday 3:00pm\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Economics\").withTuitionTiming(\"Sunday 11:00am\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Chemistry\").withTuitionTiming(\"Thursday 3:30pm\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Economics\").withTuitionTiming(\"Friday 5:00pm\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Mathematics\").withTuitionTiming(\"Monday 8:00pm\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Physics\").withTuitionTiming(\"Wednesday 6:00pm\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withSubjects(VALID_SUBJECT_AMY).withTuitionTiming(VALID_TUITION_TIMING_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withSubjects(VALID_SUBJECT_BOB).withTuitionTiming(VALID_TUITION_TIMING_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "andlimey": 18,
      "lywjoel": 9,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ALICE.getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedPersonUrl \u003d (\"name\u003d\" + ALICE.getName().fullName"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026phone\u003d\" + ALICE.getPhone().value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026email\u003d\" + ALICE.getEmail().value"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026address\u003d\" + ALICE.getAddress().value.replace(\"#\", \"%23\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026tags\u003d\" + builder.toString()).replaceAll(\" \", \"%20\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl().getQuery());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 8,
      "-": 46
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TUITION_TIMING_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUITION_TIMING_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + SUBJECT_DESC_AMY + \"    \" + TUITION_TIMING_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_BOB + SUBJECT_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* Case: missing subject -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* Case: missing tuitiontiming -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* Case: invalid subject -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + INVALID_SUBJECT_DESC + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* Case: invalid tuitiontiming -\u003e rejected */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + INVALID_TUITION_TIMING_DESC;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 20,
      "ongyz": 1,
      "andlimey": 14,
      "lywjoel": 14,
      "-": 234
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        PersonCardHandle selectedCard \u003d getPersonListPanel().getHandleToSelectedCard();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        selectedCard.getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedUrl \u003d (\"name\u003d\" + selectedCard.getName()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026phone\u003d\" + selectedCard.getPhone()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026email\u003d\" + selectedCard.getEmail()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026address\u003d\" + selectedCard.getAddress().replace(\"#\", \"%23\")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \"\u0026tags\u003d\" + builder.toString())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .replaceAll(\" \", \"%20\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedUrl,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getBrowserPanel().getLoadedUrl().getQuery().replaceAll(\"\\\\[\", \"\").replaceAll(\"\\\\]\", \"\"));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 13,
      "-": 281
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 1,
      "-": 195
    }
  }
]
